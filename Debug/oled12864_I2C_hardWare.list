
oled12864_I2C_hardWare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b8  080069b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c0  080069c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000538  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ba1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002371  00000000  00000000  00030c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246e5  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f052  00000000  00000000  00058dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b38  00000000  00000000  00067e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e957  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c0  00000000  00000000  0013e9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067f8 	.word	0x080067f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080067f8 	.word	0x080067f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <_write+0x24>)
 800059e:	f004 fe64 	bl	800526a <HAL_UART_Transmit>
	return len;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000550 	.word	0x20000550

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 f87d 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f879 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f971 	bl	80008a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 f925 	bl	8000810 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80005c6:	f000 f94d 	bl	8000864 <MX_DMA_Init>
  MX_I2C2_Init();
 80005ca:	f000 f8e1 	bl	8000790 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t res = oled_i2c_Init();
 80005ce:	f000 fd18 	bl	8001002 <oled_i2c_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if (res != 0)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <main+0x36>
	  HAL_GPIO_TogglePin(LD1_Red_GPIO_Port, LD1_Red_Pin);
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <main+0xf4>)
 80005e2:	f001 ff80 	bl	80024e6 <HAL_GPIO_TogglePin>
  printf("%d\r\n", res);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4619      	mov	r1, r3
 80005ea:	482f      	ldr	r0, [pc, #188]	; (80006a8 <main+0xf8>)
 80005ec:	f005 f938 	bl	8005860 <iprintf>

  oled_Fill_Screen_Color(oled_color_White);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fdcd 	bl	8001190 <oled_Fill_Screen_Color>

  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f001 f8cd 	bl	8001798 <HAL_Delay>
  oled_Draw_Pixel(1, 1, oled_color_Black);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fde4 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(2, 2, oled_color_Black);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	2002      	movs	r0, #2
 800060e:	f000 fddf 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(3, 3, oled_color_Black);
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	2003      	movs	r0, #3
 8000618:	f000 fdda 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(4, 4, oled_color_Black);
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	2004      	movs	r0, #4
 8000622:	f000 fdd5 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(5, 5, oled_color_Black);
 8000626:	2200      	movs	r2, #0
 8000628:	2105      	movs	r1, #5
 800062a:	2005      	movs	r0, #5
 800062c:	f000 fdd0 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(6, 6, oled_color_Black);
 8000630:	2200      	movs	r2, #0
 8000632:	2106      	movs	r1, #6
 8000634:	2006      	movs	r0, #6
 8000636:	f000 fdcb 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(7, 7, oled_color_Black);
 800063a:	2200      	movs	r2, #0
 800063c:	2107      	movs	r1, #7
 800063e:	2007      	movs	r0, #7
 8000640:	f000 fdc6 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(8, 6, oled_color_Black);
 8000644:	2200      	movs	r2, #0
 8000646:	2106      	movs	r1, #6
 8000648:	2008      	movs	r0, #8
 800064a:	f000 fdc1 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(9, 5, oled_color_Black);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	2009      	movs	r0, #9
 8000654:	f000 fdbc 	bl	80011d0 <oled_Draw_Pixel>
  oled_Draw_Pixel(10, 4, oled_color_Black);
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fdb7 	bl	80011d0 <oled_Draw_Pixel>
  res = oled_Update_Screen();
 8000662:	f000 fd77 	bl	8001154 <oled_Update_Screen>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if (res != 0)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <main+0xca>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <main+0xf4>)
 8000676:	f001 ff36 	bl	80024e6 <HAL_GPIO_TogglePin>


  printf("oled 12864 I2C code...\r\n");
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0xfc>)
 800067c:	f005 f976 	bl	800596c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0xf4>)
 8000686:	f001 ff2e 	bl	80024e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f001 f884 	bl	8001798 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <main+0xf4>)
 8000696:	f001 ff26 	bl	80024e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 800069a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800069e:	f001 f87b 	bl	8001798 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 80006a2:	e7ed      	b.n	8000680 <main+0xd0>
 80006a4:	40021c00 	.word	0x40021c00
 80006a8:	08006810 	.word	0x08006810
 80006ac:	08006818 	.word	0x08006818

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 f8c6 	bl	8005850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemClock_Config+0xd8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <SystemClock_Config+0xd8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xd8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xdc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemClock_Config+0xdc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000720:	230f      	movs	r3, #15
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000724:	23d8      	movs	r3, #216	; 0xd8
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f004 f903 	bl	8004940 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f924 	bl	800098c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f004 f8ac 	bl	80048a0 <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800074e:	f000 f91d 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f004 fb5d 	bl	8004e30 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800077c:	f000 f906 	bl	800098c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C2_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C2_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C2_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_I2C2_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C2_Init+0x74>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2C2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fea5 	bl	800251c <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f8d8 	bl	800098c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C2_Init+0x74>)
 80007e0:	f003 ffe2 	bl	80047a8 <HAL_I2CEx_ConfigAnalogFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007ea:	f000 f8cf 	bl	800098c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C2_Init+0x74>)
 80007f2:	f004 f815 	bl	8004820 <HAL_I2CEx_ConfigDigitalFilter>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007fc:	f000 f8c6 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000049c 	.word	0x2000049c
 8000808:	40005800 	.word	0x40005800
 800080c:	00061a80 	.word	0x00061a80

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART1_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000848:	f004 fcc2 	bl	80051d0 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f89b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000550 	.word	0x20000550
 8000860:	40011000 	.word	0x40011000

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	202f      	movs	r0, #47	; 0x2f
 800088c:	f001 f883 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000890:	202f      	movs	r0, #47	; 0x2f
 8000892:	f001 f89c 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_GPIO_Init+0xdc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_GPIO_Init+0xdc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <MX_GPIO_Init+0xdc>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_GPIO_Init+0xdc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <MX_GPIO_Init+0xe0>)
 8000932:	f001 fdbf 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 8000936:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_GPIO_Init+0xe0>)
 8000950:	f001 fc04 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000954:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095a:	2312      	movs	r3, #18
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000966:	2304      	movs	r3, #4
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0xe4>)
 8000972:	f001 fbf3 	bl	800215c <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021c00 	.word	0x40021c00
 8000988:	40020400 	.word	0x40020400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <oled_Write_CMD>:
 * @brief write indicate command to oled Register
 * @param cmd: [in] input command
 * @retval status 0:write cmd ok    1:write cmd error
 */
static uint8_t oled_Write_CMD(uint8_t cmd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd);
 80009a2:	2301      	movs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	2178      	movs	r1, #120	; 0x78
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <oled_Write_CMD+0x74>)
 80009b2:	f001 fef7 	bl	80027a4 <HAL_I2C_Mem_Write_DMA>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d120      	bne.n	8000a02 <oled_Write_CMD+0x6a>
	{
		uint32_t startTime = HAL_GetTick();
 80009c0:	f000 fede 	bl	8001780 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 80009c6:	bf00      	nop
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <oled_Write_CMD+0x78>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d008      	beq.n	80009e2 <oled_Write_CMD+0x4a>
 80009d0:	f000 fed6 	bl	8001780 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	f242 720f 	movw	r2, #9999	; 0x270f
 80009de:	4293      	cmp	r3, r2
 80009e0:	d9f2      	bls.n	80009c8 <oled_Write_CMD+0x30>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 80009e2:	f000 fecd 	bl	8001780 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d901      	bls.n	80009f8 <oled_Write_CMD+0x60>
			return 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e005      	b.n	8000a04 <oled_Write_CMD+0x6c>
		oled_i2c_dma_mem_write_flag = 0;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <oled_Write_CMD+0x78>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <oled_Write_CMD+0x6c>
		return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000049c 	.word	0x2000049c
 8000a10:	2000008d 	.word	0x2000008d

08000a14 <oled_Write_Data>:
 * @param data[]: [in] input data array
 * @param len:	[in] input data array length
 * @retval status 0:write data ok    1:write data error
 */
static uint8_t oled_Write_Data(uint8_t data[], uint16_t len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len);
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	2178      	movs	r1, #120	; 0x78
 8000a2e:	4817      	ldr	r0, [pc, #92]	; (8000a8c <oled_Write_Data+0x78>)
 8000a30:	f001 feb8 	bl	80027a4 <HAL_I2C_Mem_Write_DMA>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d120      	bne.n	8000a80 <oled_Write_Data+0x6c>
	{
		uint32_t startTime = HAL_GetTick();
 8000a3e:	f000 fe9f 	bl	8001780 <HAL_GetTick>
 8000a42:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 8000a44:	bf00      	nop
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <oled_Write_Data+0x7c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d008      	beq.n	8000a60 <oled_Write_Data+0x4c>
 8000a4e:	f000 fe97 	bl	8001780 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d9f2      	bls.n	8000a46 <oled_Write_Data+0x32>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 8000a60:	f000 fe8e 	bl	8001780 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d901      	bls.n	8000a76 <oled_Write_Data+0x62>
			return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e005      	b.n	8000a82 <oled_Write_Data+0x6e>
		oled_i2c_dma_mem_write_flag = 0;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <oled_Write_Data+0x7c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e000      	b.n	8000a82 <oled_Write_Data+0x6e>
		return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000049c 	.word	0x2000049c
 8000a90:	2000008d 	.word	0x2000008d

08000a94 <oled_Fill_GDDRAM_Buffer>:

/**
 * @brief use indicate color(on/off) to filling oled all pixels
 */
static void oled_Fill_GDDRAM_Buffer(oled_color_t color)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e00d      	b.n	8000ac0 <oled_Fill_GDDRAM_Buffer+0x2c>
	{
		oled_display_buff[i] = (color == oled_color_Black)? (0x00): (0xFF);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <oled_Fill_GDDRAM_Buffer+0x1a>
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e000      	b.n	8000ab0 <oled_Fill_GDDRAM_Buffer+0x1c>
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <oled_Fill_GDDRAM_Buffer+0x48>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac6:	d3ed      	bcc.n	8000aa4 <oled_Fill_GDDRAM_Buffer+0x10>
	}
	/* set buffer updated flag */
	bufferUpdateFlag = 1;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <oled_Fill_GDDRAM_Buffer+0x4c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	2000008c 	.word	0x2000008c

08000ae4 <oled_Set_Contrast>:
 * 		[oled_cmd_display_contrast_1(0x81)  +  ContrastVal(default value = 0x7F)]
 * @param ContrastVal: [in] contrast value between 0 t0 255
 * @retval status 0:write command ok    1:write command error
 */
uint8_t oled_Set_Contrast(uint8_t ContrastVal)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
	// cmd Set Contrast 0x81
	res = oled_Write_CMD(oled_cmd_display_contrast_1);
 8000af2:	2081      	movs	r0, #129	; 0x81
 8000af4:	f7ff ff50 	bl	8000998 <oled_Write_CMD>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <oled_Set_Contrast+0x22>
		return 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00c      	b.n	8000b20 <oled_Set_Contrast+0x3c>
	// The segment output current increases as the contrast step value increases
	oled_Write_CMD(ContrastVal) ? (res = 1) : (res = 0);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff45 	bl	8000998 <oled_Write_CMD>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <oled_Set_Contrast+0x36>
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e001      	b.n	8000b1e <oled_Set_Contrast+0x3a>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
	return res;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <oled_Set_Display_Follow_RAM_Or_No>:
 * @NOTE If A5h command is issued, then by using A4h command, the display will resume to the GDDRAM contents.
 * @param RAM_Output: [in]	follow	ignore
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Follow_RAM_Or_No(RAM_Output_t RAM_Output)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]

	switch (RAM_Output) {
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <oled_Set_Display_Follow_RAM_Or_No+0x1a>
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d006      	beq.n	8000b4e <oled_Set_Display_Follow_RAM_Or_No+0x26>
 8000b40:	e00b      	b.n	8000b5a <oled_Set_Display_Follow_RAM_Or_No+0x32>
		case RAM_output_follow:
			//	cmd 0xA4  A4h command enable display outputs according to the GDDRAM contents.
			//			  A4h command resumes the display from entire display “ON” stage.
			res = oled_Write_CMD(oled_cmd_display_following);
 8000b42:	20a4      	movs	r0, #164	; 0xa4
 8000b44:	f7ff ff28 	bl	8000998 <oled_Write_CMD>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
			break;
 8000b4c:	e008      	b.n	8000b60 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		case RAM_output_ignore:
			// cmd 0xA5  A5h command forces the entire display to be “ON”, regardless of the contents of the display data RAM.
			res = oled_Write_CMD(oled_cmd_display_ignore);
 8000b4e:	20a5      	movs	r0, #165	; 0xa5
 8000b50:	f7ff ff22 	bl	8000998 <oled_Write_CMD>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
			break;
 8000b58:	e002      	b.n	8000b60 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		default:
			res = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
			break;
 8000b5e:	bf00      	nop
	}
	return res;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <oled_Set_Display_Normal_Inverse>:
 * 			while in inverse display a RAM data of 0 indicates an “ON” pixel
 * @param display_Way_t: [in]  display_normal	display_invers
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_Normal_Inverse(display_Way_t display_Way)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
	switch (display_Way) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <oled_Set_Display_Normal_Inverse+0x1a>
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d006      	beq.n	8000b90 <oled_Set_Display_Normal_Inverse+0x26>
 8000b82:	e00b      	b.n	8000b9c <oled_Set_Display_Normal_Inverse+0x32>
		case display_normal:
			//	cmd 0xA6  normal display
			res = oled_Write_CMD(oled_cmd_display_normal);
 8000b84:	20a6      	movs	r0, #166	; 0xa6
 8000b86:	f7ff ff07 	bl	8000998 <oled_Write_CMD>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
			break;
 8000b8e:	e007      	b.n	8000ba0 <oled_Set_Display_Normal_Inverse+0x36>
		case display_invers:
			//	cmd 0xA7  inverse display
			res = oled_Write_CMD(oled_cmd_display_inverse);
 8000b90:	20a7      	movs	r0, #167	; 0xa7
 8000b92:	f7ff ff01 	bl	8000998 <oled_Write_CMD>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
			break;
 8000b9a:	e001      	b.n	8000ba0 <oled_Set_Display_Normal_Inverse+0x36>
		default:
			return 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <oled_Set_Display_Normal_Inverse+0x38>
	}
	return res;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <oled_Set_Display_ON_OFF>:
 * @NOTE  These single byte commands are used to turn the OLED panel display ON or OFF.
 * @param display_Switch_t: [in]  display_on	display_off
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_ON_OFF(display_Switch_t	display_Switch)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	switch (display_Switch) {
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <oled_Set_Display_ON_OFF+0x1a>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d006      	beq.n	8000bd0 <oled_Set_Display_ON_OFF+0x26>
 8000bc2:	e00b      	b.n	8000bdc <oled_Set_Display_ON_OFF+0x32>
		case display_on:
			//	cmd	AFh : Display ON
			res = oled_Write_CMD(oled_cmd_display_on);
 8000bc4:	20af      	movs	r0, #175	; 0xaf
 8000bc6:	f7ff fee7 	bl	8000998 <oled_Write_CMD>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
			break;
 8000bce:	e007      	b.n	8000be0 <oled_Set_Display_ON_OFF+0x36>
		case display_off:
			//	cmd AEh : Display OFF
			res = oled_Write_CMD(oled_cmd_display_off);
 8000bd0:	20ae      	movs	r0, #174	; 0xae
 8000bd2:	f7ff fee1 	bl	8000998 <oled_Write_CMD>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73fb      	strb	r3, [r7, #15]
			break;
 8000bda:	e001      	b.n	8000be0 <oled_Set_Display_ON_OFF+0x36>
		default:
			return 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <oled_Set_Display_ON_OFF+0x38>
	}
	return res;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <oled_Set_Memory_Addr_Mode>:
 * 		       11b,Invalid
 * @param addr_Mode: [in] Memory Addressing Mode
 * @retval status 0:ok	1/2:error
 */
uint8_t oled_Set_Memory_Addr_Mode(addr_Mode_t	addr_Mode)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]

	// cmd Set Memory Addressing Mode (20h)
	res = oled_Write_CMD(oled_cmd_set_memory_addr_mode_1);
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	f7ff fecd 	bl	8000998 <oled_Write_CMD>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <oled_Set_Memory_Addr_Mode+0x22>
		return 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e01f      	b.n	8000c4c <oled_Set_Memory_Addr_Mode+0x62>
	switch (addr_Mode) {
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d012      	beq.n	8000c38 <oled_Set_Memory_Addr_Mode+0x4e>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	dc16      	bgt.n	8000c44 <oled_Set_Memory_Addr_Mode+0x5a>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <oled_Set_Memory_Addr_Mode+0x36>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d006      	beq.n	8000c2c <oled_Set_Memory_Addr_Mode+0x42>
 8000c1e:	e011      	b.n	8000c44 <oled_Set_Memory_Addr_Mode+0x5a>
		case addr_mode_Horizontal:
			res = oled_Write_CMD((uint8_t)addr_mode_Horizontal);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff feb9 	bl	8000998 <oled_Write_CMD>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]
			break;
 8000c2a:	e00e      	b.n	8000c4a <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Vertical:
			res = oled_Write_CMD((uint8_t)addr_mode_Vertical);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff feb3 	bl	8000998 <oled_Write_CMD>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
			break;
 8000c36:	e008      	b.n	8000c4a <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Page:
			res = oled_Write_CMD((uint8_t)addr_mode_Page);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fead 	bl	8000998 <oled_Write_CMD>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
			break;
 8000c42:	e002      	b.n	8000c4a <oled_Set_Memory_Addr_Mode+0x60>
		default:
			res = 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
			break;
 8000c48:	bf00      	nop
	}

	return res;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <oled_Set_Column_Start_End_Addr_HVMode>:
 * @param columnStartAddr: [in] column start address, Column start address, range : 0-127d, (RESET=0d)
 * @param columnEndAddr  : [in] column end   address, Column end   address, range : 0-127d, (RESET =127d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Column_Start_End_Addr_HVMode(uint8_t columnStartAddr, uint8_t columnEndAddr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

	if (columnStartAddr < 0 || columnStartAddr >= oled_H_Pix || columnEndAddr < 0 || columnEndAddr >= oled_H_Pix)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db03      	blt.n	8000c78 <oled_Set_Column_Start_End_Addr_HVMode+0x24>
 8000c70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da01      	bge.n	8000c7c <oled_Set_Column_Start_End_Addr_HVMode+0x28>
		return 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e028      	b.n	8000cce <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	// cmd 0x21 Set Column Address range
	res = oled_Write_CMD(oled_cmd_set_col_addr_range_1);
 8000c7c:	2021      	movs	r0, #33	; 0x21
 8000c7e:	f7ff fe8b 	bl	8000998 <oled_Write_CMD>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <oled_Set_Column_Start_End_Addr_HVMode+0x3c>
		return 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e01e      	b.n	8000cce <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	//	Column start address A[6:0]	(RESET=0d)
	//	Column   end address B[6:0]	(RESET=127d)
	uint8_t startAddr = (columnStartAddr & 0b01111111);	//A[6:0]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c96:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (columnEndAddr   & 0b01111111);	//B[6:0]
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c9e:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe78 	bl	8000998 <oled_Write_CMD>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <oled_Set_Column_Start_End_Addr_HVMode+0x62>
		return 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00b      	b.n	8000cce <oled_Set_Column_Start_End_Addr_HVMode+0x7a>
	res = oled_Write_CMD(endAddr);
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe6d 	bl	8000998 <oled_Write_CMD>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <oled_Set_Column_Start_End_Addr_HVMode+0x78>
		return 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	return res;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <oled_Set_Page_Start_End_Addr_HVMode>:
 * @param pageStartAddr: [in] Page start Address, range : 0-7d,  (RESET = 0d)
 * @param pageEndAddr  : [in] Page end   Address, range : 0-7d,  (RESET = 7d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Page_Start_End_Addr_HVMode(uint8_t pageStartAddr, uint8_t pageEndAddr)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460a      	mov	r2, r1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]

	if (pageStartAddr < 0 || pageStartAddr >= (oled_V_Pix/8) || pageEndAddr < 0 || pageEndAddr >= (oled_V_Pix/8))
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d802      	bhi.n	8000cf6 <oled_Set_Page_Start_End_Addr_HVMode+0x20>
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d901      	bls.n	8000cfa <oled_Set_Page_Start_End_Addr_HVMode+0x24>
		return 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e028      	b.n	8000d4c <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	cmd 0x22	Set Page Address range
	res = oled_Write_CMD(oled_cmd_set_page_addr_range_1);
 8000cfa:	2022      	movs	r0, #34	; 0x22
 8000cfc:	f7ff fe4c 	bl	8000998 <oled_Write_CMD>
 8000d00:	4603      	mov	r3, r0
 8000d02:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <oled_Set_Page_Start_End_Addr_HVMode+0x38>
		return 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e01e      	b.n	8000d4c <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	Page start address A[2:0]	(RESET=0)
	//	Page   end address B[2:0]	(RESET=7)
	uint8_t startAddr = (pageStartAddr & 0b00000111);	// A[2:0]
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (pageEndAddr   & 0b00000111);	// B[2:0}
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe39 	bl	8000998 <oled_Write_CMD>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <oled_Set_Page_Start_End_Addr_HVMode+0x5e>
		return 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e00b      	b.n	8000d4c <oled_Set_Page_Start_End_Addr_HVMode+0x76>
	res = oled_Write_CMD(endAddr);
 8000d34:	7b7b      	ldrb	r3, [r7, #13]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fe2e 	bl	8000998 <oled_Write_CMD>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <oled_Set_Page_Start_End_Addr_HVMode+0x74>
		return 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	return res;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <oled_Set_Display_Start_Line>:
 * 			With value equal to 1, DRAM row 1 is mapped to COM0 and so on.
 * @param startLineVal: [in] Set Display Start Line  0 ~ oled_V_Pix-1
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Start_Line(uint8_t startLineVal)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
	if (startLineVal < 0 || startLineVal >= oled_V_Pix)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b3f      	cmp	r3, #63	; 0x3f
 8000d66:	d901      	bls.n	8000d6c <oled_Set_Display_Start_Line+0x18>
		return 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e00f      	b.n	8000d8c <oled_Set_Display_Start_Line+0x38>

	//	cmd 0x40 ~ 0x70	Set Display Start Line
	uint8_t startLine = (startLineVal & 0b00011111) | oled_cmd_set_display_start_line;
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(startLine);
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fe09 	bl	8000998 <oled_Write_CMD>
 8000d86:	4603      	mov	r3, r0
 8000d88:	73fb      	strb	r3, [r7, #15]

	return res;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <oled_Set_Segment_Map>:
 * 		 This command only affects subsequent data input.  Data already stored in GDDRAM will have no changes.
 * @param	segment_Map_t:	[in] keep default or remap
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Segment_Map(segment_Map_t segment_Map)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]

	// cmd 0xA0/1 Set Segment Re-map
	uint8_t segmentMap = (segment_Map & 0x01) | oled_cmd_set_segment_remap_n;
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(segmentMap);
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fdee 	bl	8000998 <oled_Write_CMD>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]

	return res;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <oled_Set_MUX_Ratio>:
 * 			from 16MUX to 64MUX, RESET= 111111b (i.e. 63d, 64MUX) A[5:0] from 0 to 14 are invalid entry
 * @param	MUX_Ratio	from 16 to 64
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_MUX_Ratio(uint8_t MUX_Ratio)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
	MUX_Ratio -= 1;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
	if (MUX_Ratio < 15 || MUX_Ratio >= 64)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b0e      	cmp	r3, #14
 8000de2:	d902      	bls.n	8000dea <oled_Set_MUX_Ratio+0x20>
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b3f      	cmp	r3, #63	; 0x3f
 8000de8:	d901      	bls.n	8000dee <oled_Set_MUX_Ratio+0x24>
		return 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e014      	b.n	8000e18 <oled_Set_MUX_Ratio+0x4e>
	//	cmd 0xA8  set multiplex ratio value (15 ~ 63)+1
	res = oled_Write_CMD(oled_cmd_set_multiplex_ratio_1);
 8000dee:	20a8      	movs	r0, #168	; 0xa8
 8000df0:	f7ff fdd2 	bl	8000998 <oled_Write_CMD>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <oled_Set_MUX_Ratio+0x38>
		return 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00a      	b.n	8000e18 <oled_Set_MUX_Ratio+0x4e>

	//	cmd 15d~63d	multiplex ratio value
	uint8_t muxRatio = (MUX_Ratio & 0b00111111);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e08:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(muxRatio);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fdc3 	bl	8000998 <oled_Write_CMD>
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]
	return res;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <oled_Set_Com_Map_Output_Scan_Dirct>:
 * 	// remapping
 * @param com_Map: [in] com scan dirction (remap or not)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Com_Map_Output_Scan_Dirct(com_Map_t com_Map)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]

	switch (com_Map) {
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <oled_Set_Com_Map_Output_Scan_Dirct+0x1a>
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d006      	beq.n	8000e46 <oled_Set_Com_Map_Output_Scan_Dirct+0x26>
 8000e38:	e00b      	b.n	8000e52 <oled_Set_Com_Map_Output_Scan_Dirct+0x32>
		case com_normal_mapping:
			// cmd C0h	DDRAM row-0  ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_increase);
 8000e3a:	20c0      	movs	r0, #192	; 0xc0
 8000e3c:	f7ff fdac 	bl	8000998 <oled_Write_CMD>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
			break;
 8000e44:	e008      	b.n	8000e58 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		case com_remapping:
			// cmd C8h	DDRAM row-63 ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_decrease);
 8000e46:	20c8      	movs	r0, #200	; 0xc8
 8000e48:	f7ff fda6 	bl	8000998 <oled_Write_CMD>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
			break;
 8000e50:	e002      	b.n	8000e58 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		default:
			res = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
			break;
 8000e56:	bf00      	nop
	}

	return res;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <oled_Set_Display_Offset_Vertical>:
 * @NOTE	this is a double byte command
 * @param offsetVal: [in] vertical offset value
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Offset_Vertical(uint8_t offsetVal)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

	if (offsetVal < 0 || offsetVal >= oled_V_Pix)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b3f      	cmp	r3, #63	; 0x3f
 8000e74:	d901      	bls.n	8000e7a <oled_Set_Display_Offset_Vertical+0x18>
		return 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e014      	b.n	8000ea4 <oled_Set_Display_Offset_Vertical+0x42>

	//	cmd 0xD3 set display offset (DDRAM oled_row indicate line start)
	res = oled_Write_CMD(oled_cmd_set_display_offset_1);
 8000e7a:	20d3      	movs	r0, #211	; 0xd3
 8000e7c:	f7ff fd8c 	bl	8000998 <oled_Write_CMD>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <oled_Set_Display_Offset_Vertical+0x2c>
		return 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00a      	b.n	8000ea4 <oled_Set_Display_Offset_Vertical+0x42>

	// cmd set offset line value from 0 to 63
	uint8_t offsetValue = (offsetVal & 0b00111111);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e94:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(offsetValue);
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fd7d 	bl	8000998 <oled_Write_CMD>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]

	return res;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <oled_Set_Com_Pins_Hardware_Config>:
 * @NOTE  This command sets the COM signals pin configuration to match the OLED panel hardware layout.
 * @param common_Hardware_Config: [in] common config parameters
 * @retval staus	0:ok	1:error
 */
uint8_t oled_Set_Com_Pins_Hardware_Config(common_Hardware_Config_t common_Hardware_Config)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

	// cmd Set COM Pins Hardware Configuration (DAh)
	res = oled_Write_CMD(oled_cmd_set_com_pins_1);
 8000eba:	20da      	movs	r0, #218	; 0xda
 8000ebc:	f7ff fd6c 	bl	8000998 <oled_Write_CMD>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <oled_Set_Com_Pins_Hardware_Config+0x22>
		return 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e006      	b.n	8000edc <oled_Set_Com_Pins_Hardware_Config+0x30>

	res = oled_Write_CMD(common_Hardware_Config);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fd61 	bl	8000998 <oled_Write_CMD>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73fb      	strb	r3, [r7, #15]

	return res;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <oled_Set_Display_Clock_Parameter>:
 * @param Fosc: [in] D5h A[7:4] The higher the register setting results in higher frequency
 * @param factor_D: [in] division factor D    DCLK=FOSC/D (D -> D5h A[3:0]bit)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Clock_Parameter(uint8_t Fosc, uint8_t factor_D)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

	if (factor_D < 0 || factor_D > 15 || Fosc < 0 || Fosc > 15)
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	d802      	bhi.n	8000f04 <oled_Set_Display_Clock_Parameter+0x20>
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d901      	bls.n	8000f08 <oled_Set_Display_Clock_Parameter+0x24>
		return 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e018      	b.n	8000f3a <oled_Set_Display_Clock_Parameter+0x56>

	uint8_t clockVal = (Fosc << 4) |factor_D;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	b25a      	sxtb	r2, r3
 8000f0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	73bb      	strb	r3, [r7, #14]
	// cmd 0xD5	Set Display Clock Divide Ratio/ Oscillator Frequency
	res = oled_Write_CMD(oled_cmd_set_clk_div_1);
 8000f18:	20d5      	movs	r0, #213	; 0xd5
 8000f1a:	f7ff fd3d 	bl	8000998 <oled_Write_CMD>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <oled_Set_Display_Clock_Parameter+0x48>
		return 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e006      	b.n	8000f3a <oled_Set_Display_Clock_Parameter+0x56>
	res = oled_Write_CMD(clockVal);
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd32 	bl	8000998 <oled_Write_CMD>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]

	return res;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <oled_Set_PreCharge_Period>:
 * @param phase_2_period: [in] Phase 2 period of up to 15 DCLK clocks 0 is invalid entry   (RESET=2h)
 * 			1 ~ 15 A[7:4]
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_PreCharge_Period(uint8_t phase_1_period, uint8_t phase_2_period)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

	if (phase_1_period < 1 || phase_1_period > 15 || phase_2_period < 1 || phase_2_period > 15)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <oled_Set_PreCharge_Period+0x2c>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	d805      	bhi.n	8000f6e <oled_Set_PreCharge_Period+0x2c>
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <oled_Set_PreCharge_Period+0x2c>
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	d901      	bls.n	8000f72 <oled_Set_PreCharge_Period+0x30>
		return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e018      	b.n	8000fa4 <oled_Set_PreCharge_Period+0x62>

	uint8_t phasePeriod = (phase_2_period << 4) | phase_1_period;
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	b25a      	sxtb	r2, r3
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(oled_cmd_set_pre_charge_period_1);
 8000f82:	20d9      	movs	r0, #217	; 0xd9
 8000f84:	f7ff fd08 	bl	8000998 <oled_Write_CMD>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <oled_Set_PreCharge_Period+0x54>
		return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e006      	b.n	8000fa4 <oled_Set_PreCharge_Period+0x62>
	res = oled_Write_CMD(phasePeriod);
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fcfd 	bl	8000998 <oled_Write_CMD>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

	return res;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <oled_Set_Charge_Pump>:
 * 			  |- AFh -> Display ON
 * @param	charge_pumt_control: [in] charge pump enable or disable
 * @retval	status	0:ok	>0:error
 */
uint8_t oled_Set_Charge_Pump(charge_pump_control_t	charge_pumt_control)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]

	//	cmd 0x8D	Charge Pump Setting
	res = oled_Write_CMD(oled_cmd_set_charge_pump_1);
 8000fba:	208d      	movs	r0, #141	; 0x8d
 8000fbc:	f7ff fcec 	bl	8000998 <oled_Write_CMD>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <oled_Set_Charge_Pump+0x22>
		return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e015      	b.n	8000ffa <oled_Set_Charge_Pump+0x4e>

	switch (charge_pumt_control) {
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <oled_Set_Charge_Pump+0x2e>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d006      	beq.n	8000fe6 <oled_Set_Charge_Pump+0x3a>
 8000fd8:	e00b      	b.n	8000ff2 <oled_Set_Charge_Pump+0x46>
		case charge_pump_disable:
			res = oled_Write_CMD(0x10);
 8000fda:	2010      	movs	r0, #16
 8000fdc:	f7ff fcdc 	bl	8000998 <oled_Write_CMD>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
			break;
 8000fe4:	e008      	b.n	8000ff8 <oled_Set_Charge_Pump+0x4c>
		case charge_pump_enable:
			res = oled_Write_CMD(0x14);
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f7ff fcd6 	bl	8000998 <oled_Write_CMD>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
			break;
 8000ff0:	e002      	b.n	8000ff8 <oled_Set_Charge_Pump+0x4c>
		default:
			res = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
			break;
 8000ff6:	bf00      	nop
	}

	return res;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <oled_i2c_Init>:
/**
  * @brief oled 12864 init
  * @retval status 0:init ok    1:init error
  */
uint8_t oled_i2c_Init(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
	// status flag
	int status = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]

	// Wait for the screen to boot
	HAL_Delay(500);
 800100c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001010:	f000 fbc2 	bl	8001798 <HAL_Delay>

	// oled initial process
	/* 0.Display Off */
	status += oled_Set_Display_ON_OFF(display_off);
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff fdc8 	bl	8000baa <oled_Set_Display_ON_OFF>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	607b      	str	r3, [r7, #4]

	/* 1.Memory address mode : horizontal mode */
	status += oled_Set_Memory_Addr_Mode(addr_mode_Horizontal);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fde0 	bl	8000bea <oled_Set_Memory_Addr_Mode>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	607b      	str	r3, [r7, #4]
	status += oled_Set_Page_Start_End_Addr_HVMode(0, 7);
 8001034:	2107      	movs	r1, #7
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fe4d 	bl	8000cd6 <oled_Set_Page_Start_End_Addr_HVMode>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	607b      	str	r3, [r7, #4]
	status += oled_Set_Column_Start_End_Addr_HVMode(0, 127);
 8001046:	217f      	movs	r1, #127	; 0x7f
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fe03 	bl	8000c54 <oled_Set_Column_Start_End_Addr_HVMode>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	607b      	str	r3, [r7, #4]

	/* 2.Set MUX Ratio */
	status += oled_Set_MUX_Ratio(oled_V_Pix);
 8001058:	2040      	movs	r0, #64	; 0x40
 800105a:	f7ff feb6 	bl	8000dca <oled_Set_MUX_Ratio>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	607b      	str	r3, [r7, #4]

	/* 3.Set Display Offset */
	status += oled_Set_Display_Offset_Vertical(0);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fefa 	bl	8000e62 <oled_Set_Display_Offset_Vertical>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	607b      	str	r3, [r7, #4]

	/* 4.Set Display Start Line */
	status += oled_Set_Display_Start_Line(0);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fe6b 	bl	8000d54 <oled_Set_Display_Start_Line>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	607b      	str	r3, [r7, #4]

	/* 5.Set Segment Re-map */
	status += oled_Set_Segment_Map(segment_remapping);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fe83 	bl	8000d94 <oled_Set_Segment_Map>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	607b      	str	r3, [r7, #4]

	/* 6.Set COM Output Scan Direction (map) */
	status += oled_Set_Com_Map_Output_Scan_Dirct(com_remapping);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fec1 	bl	8000e20 <oled_Set_Com_Map_Output_Scan_Dirct>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	607b      	str	r3, [r7, #4]

	/* 7. Set Pre-charge Period value phase1(1~15) phase2(1~15) */
	status += oled_Set_PreCharge_Period(2, 2);
 80010a8:	2102      	movs	r1, #2
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff ff49 	bl	8000f42 <oled_Set_PreCharge_Period>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	607b      	str	r3, [r7, #4]

	/* 8.Set COM Pins hardware configuration */
	status += oled_Set_Com_Pins_Hardware_Config(common_alternative_config|common_disable_left_right_remap);
 80010ba:	2012      	movs	r0, #18
 80010bc:	f7ff fef6 	bl	8000eac <oled_Set_Com_Pins_Hardware_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	607b      	str	r3, [r7, #4]

	/* 9.Set Contrast Control */
	status += oled_Set_Contrast(0x7F);
 80010ca:	207f      	movs	r0, #127	; 0x7f
 80010cc:	f7ff fd0a 	bl	8000ae4 <oled_Set_Contrast>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	607b      	str	r3, [r7, #4]

	/* 10.Disable Entire Display On */
	status += oled_Set_Display_Follow_RAM_Or_No(RAM_output_follow);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fd24 	bl	8000b28 <oled_Set_Display_Follow_RAM_Or_No>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]

	/* 11.Set Normal Display */
	status += oled_Set_Display_Normal_Inverse(display_normal);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fd3d 	bl	8000b6a <oled_Set_Display_Normal_Inverse>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	607b      	str	r3, [r7, #4]

	/* 12.Set Osc Frequency */
	status += oled_Set_Display_Clock_Parameter(0x0F, 0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	200f      	movs	r0, #15
 80010fe:	f7ff fef1 	bl	8000ee4 <oled_Set_Display_Clock_Parameter>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	607b      	str	r3, [r7, #4]

	/* 13.Enable charge pump regulator */
	status += oled_Set_Charge_Pump(charge_pump_enable);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff4d 	bl	8000fac <oled_Set_Charge_Pump>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	607b      	str	r3, [r7, #4]

	/* 14.clear whole screen write 0 to GDDRAM */
	status += oled_Fill_Screen_Color(oled_color_Black);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f837 	bl	8001190 <oled_Fill_Screen_Color>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	607b      	str	r3, [r7, #4]

	/* 15.Display On */
	status += oled_Set_Display_ON_OFF(display_on);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fd3c 	bl	8000baa <oled_Set_Display_ON_OFF>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	607b      	str	r3, [r7, #4]

//	oled_Clear_Screen();

	if (status != 0)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <oled_i2c_Init+0x146>
		return status;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	e000      	b.n	800114a <oled_i2c_Init+0x148>

	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <oled_Update_Screen>:
/**
 * @brief write oled_cmd_display_contrast_1 into oled GDDRAM
 * @retval status 0:write ok	1:write error
 */
uint8_t oled_Update_Screen(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	if (bufferUpdateFlag == 0)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <oled_Update_Screen+0x34>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <oled_Update_Screen+0x12>
		return 0;	// don't need updata screen
 8001162:	2300      	movs	r3, #0
 8001164:	e00c      	b.n	8001180 <oled_Update_Screen+0x2c>

	uint8_t res = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
	res = oled_Write_Data(oled_display_buff, sizeof(oled_display_buff));
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <oled_Update_Screen+0x38>)
 8001170:	f7ff fc50 	bl	8000a14 <oled_Write_Data>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]

    bufferUpdateFlag = 0;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <oled_Update_Screen+0x34>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
    return res;
 800117e:	79fb      	ldrb	r3, [r7, #7]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000008c 	.word	0x2000008c
 800118c:	20000090 	.word	0x20000090

08001190 <oled_Fill_Screen_Color>:
 * 		  include oled screen update
 * @param	oled_color: [in] oled_color_black	oled_color_white
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Fill_Screen_Color(oled_color_t	oled_color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

	//	set oled_buffer value
	switch (oled_color) {
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <oled_Fill_Screen_Color+0x1a>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d004      	beq.n	80011b2 <oled_Fill_Screen_Color+0x22>
 80011a8:	e007      	b.n	80011ba <oled_Fill_Screen_Color+0x2a>
		case oled_color_Black:
			oled_Fill_GDDRAM_Buffer(oled_color_Black);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fc72 	bl	8000a94 <oled_Fill_GDDRAM_Buffer>
			break;
 80011b0:	e005      	b.n	80011be <oled_Fill_Screen_Color+0x2e>
		case oled_color_White:
			oled_Fill_GDDRAM_Buffer(oled_color_White);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fc6e 	bl	8000a94 <oled_Fill_GDDRAM_Buffer>
			break;
 80011b8:	e001      	b.n	80011be <oled_Fill_Screen_Color+0x2e>
		default:
			return 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e004      	b.n	80011c8 <oled_Fill_Screen_Color+0x38>
			break;
	}


	//	update screen, write oled_buffer to GDDRAM
	res = oled_Update_Screen();
 80011be:	f7ff ffc9 	bl	8001154 <oled_Update_Screen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]

	return res;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <oled_Draw_Pixel>:
 * @param	py: [in] y value (0 ~ 63)  row
 * @param	oled_color:	[in] oled_color_black	oled_color_white
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Draw_Pixel(uint8_t px, uint8_t py, oled_color_t oled_color)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
	if (px < 0 || px >= oled_H_Pix || py < 0 || py >= oled_V_Pix)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db02      	blt.n	80011f0 <oled_Draw_Pixel+0x20>
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d901      	bls.n	80011f4 <oled_Draw_Pixel+0x24>
		return 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e047      	b.n	8001284 <oled_Draw_Pixel+0xb4>

	uint8_t res = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]

	switch (oled_color) {
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <oled_Draw_Pixel+0x34>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d01e      	beq.n	8001240 <oled_Draw_Pixel+0x70>
 8001202:	e03b      	b.n	800127c <oled_Draw_Pixel+0xac>
		case oled_color_Black:
			oled_display_buff[px + (py/8)*oled_H_Pix] ^=  (0x01 << (py%8));
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	b2d8      	uxtb	r0, r3
 800120c:	4603      	mov	r3, r0
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4413      	add	r3, r2
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <oled_Draw_Pixel+0xc0>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	b25a      	sxtb	r2, r3
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4053      	eors	r3, r2
 8001228:	b259      	sxtb	r1, r3
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	4603      	mov	r3, r0
 800122e:	01db      	lsls	r3, r3, #7
 8001230:	4413      	add	r3, r2
 8001232:	b2c9      	uxtb	r1, r1
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <oled_Draw_Pixel+0xc0>)
 8001236:	54d1      	strb	r1, [r2, r3]
			bufferUpdateFlag = 1;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <oled_Draw_Pixel+0xc4>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
			break;
 800123e:	e020      	b.n	8001282 <oled_Draw_Pixel+0xb2>
		case oled_color_White:
			oled_display_buff[px + (py/8)*oled_H_Pix] |=  (0x01 << (py%8));
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	4603      	mov	r3, r0
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	4413      	add	r3, r2
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <oled_Draw_Pixel+0xc0>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	b25a      	sxtb	r2, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b259      	sxtb	r1, r3
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4603      	mov	r3, r0
 800126a:	01db      	lsls	r3, r3, #7
 800126c:	4413      	add	r3, r2
 800126e:	b2c9      	uxtb	r1, r1
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <oled_Draw_Pixel+0xc0>)
 8001272:	54d1      	strb	r1, [r2, r3]
			bufferUpdateFlag = 1;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <oled_Draw_Pixel+0xc4>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
			break;
 800127a:	e002      	b.n	8001282 <oled_Draw_Pixel+0xb2>
		default:
			res = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
			break;
 8001280:	bf00      	nop
	}

	return res;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000090 	.word	0x20000090
 8001294:	2000008c 	.word	0x2000008c

08001298 <HAL_I2C_MemTxCpltCallback>:
/**
 *	Men write transfer complete callback
 */
#if	oled_i2c_dma
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	printf("mem tx cplt call back\r\n");
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <HAL_I2C_MemTxCpltCallback+0x28>)
 80012a2:	f004 fb63 	bl	800596c <puts>
	if (hi2c->Instance == oled_i2c.Instance)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_I2C_MemTxCpltCallback+0x2c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <HAL_I2C_MemTxCpltCallback+0x20>
	{
		oled_i2c_dma_mem_write_flag = 1;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_I2C_MemTxCpltCallback+0x30>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
	}
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	080068e8 	.word	0x080068e8
 80012c4:	2000049c 	.word	0x2000049c
 80012c8:	2000008d 	.word	0x2000008d

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_I2C_MspInit+0xf0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d161      	bne.n	8001402 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800135a:	2303      	movs	r3, #3
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136a:	2304      	movs	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4827      	ldr	r0, [pc, #156]	; (8001414 <HAL_I2C_MspInit+0xf8>)
 8001376:	f000 fef1 	bl	800215c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_I2C_MspInit+0xf4>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_I2C_MspInit+0x100>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 800139e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013d8:	f000 fb14 	bl	8001a04 <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80013e2:	f7ff fad3 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_I2C_MspInit+0xfc>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2021      	movs	r0, #33	; 0x21
 80013f8:	f000 facd 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013fc:	2021      	movs	r0, #33	; 0x21
 80013fe:	f000 fae6 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005800 	.word	0x40005800
 8001410:	40023800 	.word	0x40023800
 8001414:	40021400 	.word	0x40021400
 8001418:	200004f0 	.word	0x200004f0
 800141c:	400260b8 	.word	0x400260b8

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_UART_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0x88>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_UART_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_UART_MspInit+0x88>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_UART_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_UART_MspInit+0x8c>)
 8001498:	f000 fe60 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f92c 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <I2C2_EV_IRQHandler+0x10>)
 800150a:	f001 faad 	bl	8002a68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000049c 	.word	0x2000049c

08001518 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA1_Stream7_IRQHandler+0x10>)
 800151e:	f000 fb99 	bl	8001c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200004f0 	.word	0x200004f0

0800152c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
	}

return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f004 f8fc 	bl	80057fc <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20030000 	.word	0x20030000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000490 	.word	0x20000490
 8001638:	200005a8 	.word	0x200005a8

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f004 f8bb 	bl	8005808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7fe ff8d 	bl	80005b0 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001698:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016a4:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 80016a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016ac:	200005a8 	.word	0x200005a8

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_Init+0x40>)
 80016be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_Init+0x40>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x40>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 f94f 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fdf0 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f967 	bl	80019ea <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 f92f 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000000 	.word	0x20000000
 8001750:	20000008 	.word	0x20000008
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000594 	.word	0x20000594

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000594 	.word	0x20000594

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <__NVIC_EnableIRQ+0x38>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff8e 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff29 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff3e 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff8e 	bl	80018d4 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5d 	bl	8001880 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff31 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff feb6 	bl	8001780 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e099      	b.n	8001b54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a40:	e00f      	b.n	8001a62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a42:	f7ff fe9d 	bl	8001780 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d908      	bls.n	8001a62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e078      	b.n	8001b54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e8      	bne.n	8001a42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_DMA_Init+0x158>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d107      	bne.n	8001acc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f023 0307 	bic.w	r3, r3, #7
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d117      	bne.n	8001b26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 faab 	bl	8002064 <DMA_CheckFifoParam>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b22:	2301      	movs	r3, #1
 8001b24:	e016      	b.n	8001b54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fa62 	bl	8001ff8 <DMA_CalcBaseAndBitshift>
 8001b34:	4603      	mov	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	223f      	movs	r2, #63	; 0x3f
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	f010803f 	.word	0xf010803f

08001b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA_Start_IT+0x26>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e040      	b.n	8001c08 <HAL_DMA_Start_IT+0xa8>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12f      	bne.n	8001bfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f9f4 	bl	8001f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	223f      	movs	r2, #63	; 0x3f
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0216 	orr.w	r2, r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0208 	orr.w	r2, r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e005      	b.n	8001c06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00c      	b.n	8001c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2205      	movs	r2, #5
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_DMA_IRQHandler+0x258>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a92      	ldr	r2, [pc, #584]	; (8001eb0 <HAL_DMA_IRQHandler+0x25c>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a9b      	lsrs	r3, r3, #10
 8001c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	2208      	movs	r2, #8
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01a      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0204 	bic.w	r2, r2, #4
 8001ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2208      	movs	r2, #8
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d012      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2204      	movs	r2, #4
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2210      	movs	r2, #16
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d043      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03c      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	2210      	movs	r2, #16
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d018      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d108      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d024      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
 8001d82:	e01f      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
 8001d94:	e016      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2220      	movs	r2, #32
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 808e 	beq.w	8001ef2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8086 	beq.w	8001ef2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2220      	movs	r2, #32
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d136      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0216 	bic.w	r2, r2, #22
 8001e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x1da>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	223f      	movs	r2, #63	; 0x3f
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d07d      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
        }
        return;
 8001e6a:	e078      	b.n	8001f5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01c      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d030      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e02b      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d027      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
 8001eaa:	e022      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x29e>
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0210 	bic.w	r2, r2, #16
 8001ed0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d032      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d022      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d307      	bcc.n	8001f3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f2      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x2ca>
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e000      	b.n	8001f60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f5e:	bf00      	nop
    }
  }
}
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop

08001f68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d108      	bne.n	8001fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fda:	e007      	b.n	8001fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b10      	subs	r3, #16
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <DMA_CalcBaseAndBitshift+0x64>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <DMA_CalcBaseAndBitshift+0x68>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d909      	bls.n	800203a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	1d1a      	adds	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
 8002038:	e007      	b.n	800204a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	aaaaaaab 	.word	0xaaaaaaab
 8002060:	08006918 	.word	0x08006918

08002064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11f      	bne.n	80020be <DMA_CheckFifoParam+0x5a>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d856      	bhi.n	8002132 <DMA_CheckFifoParam+0xce>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <DMA_CheckFifoParam+0x28>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020af 	.word	0x080020af
 8002094:	0800209d 	.word	0x0800209d
 8002098:	08002133 	.word	0x08002133
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d046      	beq.n	8002136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e043      	b.n	8002136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b6:	d140      	bne.n	800213a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e03d      	b.n	800213a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d121      	bne.n	800210c <DMA_CheckFifoParam+0xa8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d837      	bhi.n	800213e <DMA_CheckFifoParam+0xda>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <DMA_CheckFifoParam+0x70>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020eb 	.word	0x080020eb
 80020dc:	080020e5 	.word	0x080020e5
 80020e0:	080020fd 	.word	0x080020fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e030      	b.n	800214c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d025      	beq.n	8002142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fa:	e022      	b.n	8002142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002104:	d11f      	bne.n	8002146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800210a:	e01c      	b.n	8002146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d903      	bls.n	800211a <DMA_CheckFifoParam+0xb6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d003      	beq.n	8002120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002118:	e018      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      break;
 800211e:	e015      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e00b      	b.n	800214a <DMA_CheckFifoParam+0xe6>
      break;
 8002132:	bf00      	nop
 8002134:	e00a      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e008      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e006      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e004      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e002      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;   
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
    }
  } 
  
  return status; 
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e177      	b.n	8002468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8166 	bne.w	8002462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80c0 	beq.w	8002462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a65      	ldr	r2, [pc, #404]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a61      	ldr	r2, [pc, #388]	; (8002484 <HAL_GPIO_Init+0x328>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d037      	beq.n	800239a <HAL_GPIO_Init+0x23e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_GPIO_Init+0x330>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_GPIO_Init+0x23a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x236>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a55      	ldr	r2, [pc, #340]	; (8002494 <HAL_GPIO_Init+0x338>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x232>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_GPIO_Init+0x33c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x22e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_GPIO_Init+0x340>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x22a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x344>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x226>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x348>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x222>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x21e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x350>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x21a>
 8002372:	2309      	movs	r3, #9
 8002374:	e012      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002376:	230a      	movs	r3, #10
 8002378:	e010      	b.n	800239c <HAL_GPIO_Init+0x240>
 800237a:	2308      	movs	r3, #8
 800237c:	e00e      	b.n	800239c <HAL_GPIO_Init+0x240>
 800237e:	2307      	movs	r3, #7
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002382:	2306      	movs	r3, #6
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x240>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x240>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x240>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x328>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023de:	4a34      	ldr	r2, [pc, #208]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_GPIO_Init+0x354>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <HAL_GPIO_Init+0x354>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f ae84 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40022400 	.word	0x40022400
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43d9      	mvns	r1, r3
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	400b      	ands	r3, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e12b      	b.n	8002786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe feea 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002580:	f002 fdfe 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8002584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a81      	ldr	r2, [pc, #516]	; (8002790 <HAL_I2C_Init+0x274>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d807      	bhi.n	80025a0 <HAL_I2C_Init+0x84>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a80      	ldr	r2, [pc, #512]	; (8002794 <HAL_I2C_Init+0x278>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e006      	b.n	80025ae <HAL_I2C_Init+0x92>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a7d      	ldr	r2, [pc, #500]	; (8002798 <HAL_I2C_Init+0x27c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0e7      	b.n	8002786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a78      	ldr	r2, [pc, #480]	; (800279c <HAL_I2C_Init+0x280>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <HAL_I2C_Init+0x274>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d802      	bhi.n	80025f0 <HAL_I2C_Init+0xd4>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	e009      	b.n	8002604 <HAL_I2C_Init+0xe8>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a69      	ldr	r2, [pc, #420]	; (80027a0 <HAL_I2C_Init+0x284>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	3301      	adds	r3, #1
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	495c      	ldr	r1, [pc, #368]	; (8002790 <HAL_I2C_Init+0x274>)
 8002620:	428b      	cmp	r3, r1
 8002622:	d819      	bhi.n	8002658 <HAL_I2C_Init+0x13c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e59      	subs	r1, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002638:	400b      	ands	r3, r1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_I2C_Init+0x138>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb1 f3f3 	udiv	r3, r1, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	e051      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002654:	2304      	movs	r3, #4
 8002656:	e04f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_I2C_Init+0x168>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e012      	b.n	80026aa <HAL_I2C_Init+0x18e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Init+0x196>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e022      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10e      	bne.n	80026d8 <HAL_I2C_Init+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e58      	subs	r0, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	440b      	add	r3, r1
 80026c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6911      	ldr	r1, [r2, #16]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	000186a0 	.word	0x000186a0
 8002794:	001e847f 	.word	0x001e847f
 8002798:	003d08ff 	.word	0x003d08ff
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c2:	f7fe ffdd 	bl	8001780 <HAL_GetTick>
 80027c6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	f040 813a 	bne.w	8002a4a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80027d6:	4b9f      	ldr	r3, [pc, #636]	; (8002a54 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	08db      	lsrs	r3, r3, #3
 80027dc:	4a9e      	ldr	r2, [pc, #632]	; (8002a58 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0a1a      	lsrs	r2, r3, #8
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e110      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b02      	cmp	r3, #2
 8002836:	d0db      	beq.n	80027f0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Mem_Write_DMA+0xa2>
 8002842:	2302      	movs	r3, #2
 8002844:	e102      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d007      	beq.n	800286c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2221      	movs	r2, #33	; 0x21
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a6c      	ldr	r2, [pc, #432]	; (8002a5c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80028ae:	897a      	ldrh	r2, [r7, #10]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80028b4:	893a      	ldrh	r2, [r7, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a9 	beq.w	8002a22 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02a      	beq.n	800292e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	4a5f      	ldr	r2, [pc, #380]	; (8002a64 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 80028e6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	2200      	movs	r2, #0
 80028fe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	2200      	movs	r2, #0
 8002906:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	4619      	mov	r1, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3310      	adds	r3, #16
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	f7ff f91f 	bl	8001b60 <HAL_DMA_Start_IT>
 8002922:	4603      	mov	r3, r0
 8002924:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002926:	7efb      	ldrb	r3, [r7, #27]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d166      	bne.n	80029fa <HAL_I2C_Mem_Write_DMA+0x256>
 800292c:	e013      	b.n	8002956 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07a      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002956:	88f8      	ldrh	r0, [r7, #6]
 8002958:	893a      	ldrh	r2, [r7, #8]
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	2323      	movs	r3, #35	; 0x23
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4603      	mov	r3, r0
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 fb3a 	bl	8003fe0 <I2C_RequestMemoryWrite>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d022      	beq.n	80029b8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f94a 	bl	8001c10 <HAL_DMA_Abort_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002996:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e049      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e028      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e014      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000000 	.word	0x20000000
 8002a58:	14f8b589 	.word	0x14f8b589
 8002a5c:	ffff0000 	.word	0xffff0000
 8002a60:	0800410d 	.word	0x0800410d
 8002a64:	080042b7 	.word	0x080042b7

08002a68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a88:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d003      	beq.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x38>
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	f040 80c1 	bne.w	8002c22 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ac0:	d003      	beq.n	8002aca <HAL_I2C_EV_IRQHandler+0x62>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_EV_IRQHandler+0x66>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x68>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f000 8132 	beq.w	8002d3a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x92>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	0a5b      	lsrs	r3, r3, #9
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 fe40 	bl	8004772 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fcc8 	bl	8003488 <I2C_Master_SB>
 8002af8:	e092      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_I2C_EV_IRQHandler+0xb2>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	0a5b      	lsrs	r3, r3, #9
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fd3e 	bl	8003594 <I2C_Master_ADD10>
 8002b18:	e082      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0xd2>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	0a5b      	lsrs	r3, r3, #9
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fd58 	bl	80035e8 <I2C_Master_ADDR>
 8002b38:	e072      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03b      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b54:	f000 80f3 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	09db      	lsrs	r3, r3, #7
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00f      	beq.n	8002b84 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f942 	bl	8002e06 <I2C_MasterTransmit_TXE>
 8002b82:	e04d      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80d6 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	0a5b      	lsrs	r3, r3, #9
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80cf 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
 8002ba2:	2b21      	cmp	r3, #33	; 0x21
 8002ba4:	d103      	bne.n	8002bae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f9c9 	bl	8002f3e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bac:	e0c7      	b.n	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	f040 80c4 	bne.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa37 	bl	800302a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbc:	e0bf      	b.n	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bcc:	f000 80b7 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00f      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x194>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x194>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 faac 	bl	8003152 <I2C_MasterReceive_RXNE>
 8002bfa:	e011      	b.n	8002c20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 809a 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	0a5b      	lsrs	r3, r3, #9
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8093 	beq.w	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fb4b 	bl	80032b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1e:	e08e      	b.n	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c20:	e08d      	b.n	8002d3e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e007      	b.n	8002c44 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_I2C_EV_IRQHandler+0x20e>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00c      	beq.n	8002c76 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c6c:	69b9      	ldr	r1, [r7, #24]
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 ff09 	bl	8003a86 <I2C_Slave_ADDR>
 8002c74:	e066      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x22e>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	0a5b      	lsrs	r3, r3, #9
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 ff44 	bl	8003b1c <I2C_Slave_STOPF>
 8002c94:	e056      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d002      	beq.n	8002ca2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d125      	bne.n	8002cee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	09db      	lsrs	r3, r3, #7
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00f      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x266>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	0a9b      	lsrs	r3, r3, #10
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x266>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fe1f 	bl	800390a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ccc:	e039      	b.n	8002d42 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d033      	beq.n	8002d42 <HAL_I2C_EV_IRQHandler+0x2da>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	0a5b      	lsrs	r3, r3, #9
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02d      	beq.n	8002d42 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fe4c 	bl	8003984 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cec:	e029      	b.n	8002d42 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00f      	beq.n	8002d1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	0a9b      	lsrs	r3, r3, #10
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fe57 	bl	80039c6 <I2C_SlaveReceive_RXNE>
 8002d18:	e014      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00e      	beq.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	0a5b      	lsrs	r3, r3, #9
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fe85 	bl	8003a42 <I2C_SlaveReceive_BTF>
 8002d38:	e004      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	70fb      	strb	r3, [r7, #3]
 8002da6:	4613      	mov	r3, r2
 8002da8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e1c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d150      	bne.n	8002ece <I2C_MasterTransmit_TXE+0xc8>
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b21      	cmp	r3, #33	; 0x21
 8002e30:	d14d      	bne.n	8002ece <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d01d      	beq.n	8002e74 <I2C_MasterTransmit_TXE+0x6e>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d01a      	beq.n	8002e74 <I2C_MasterTransmit_TXE+0x6e>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e44:	d016      	beq.n	8002e74 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e54:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2211      	movs	r2, #17
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff6c 	bl	8002d4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e72:	e060      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e82:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e92:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d107      	bne.n	8002ebe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe f9ee 	bl	8001298 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ebc:	e03b      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff3f 	bl	8002d4a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ecc:	e033      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b21      	cmp	r3, #33	; 0x21
 8002ed2:	d005      	beq.n	8002ee0 <I2C_MasterTransmit_TXE+0xda>
 8002ed4:	7bbb      	ldrb	r3, [r7, #14]
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d12d      	bne.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b22      	cmp	r3, #34	; 0x22
 8002ede:	d12a      	bne.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002efa:	e01c      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d103      	bne.n	8002f10 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f88e 	bl	800302a <I2C_MemoryTransmit_TXE_BTF>
}
 8002f0e:	e012      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f34:	e7ff      	b.n	8002f36 <I2C_MasterTransmit_TXE+0x130>
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b21      	cmp	r3, #33	; 0x21
 8002f56:	d164      	bne.n	8003022 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f86:	e04c      	b.n	8003022 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d01d      	beq.n	8002fca <I2C_MasterTransmit_BTF+0x8c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d01a      	beq.n	8002fca <I2C_MasterTransmit_BTF+0x8c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f9a:	d016      	beq.n	8002fca <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002faa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2211      	movs	r2, #17
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fec1 	bl	8002d4a <HAL_I2C_MasterTxCpltCallback>
}
 8002fc8:	e02b      	b.n	8003022 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fd8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d107      	bne.n	8003014 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe f943 	bl	8001298 <HAL_I2C_MemTxCpltCallback>
}
 8003012:	e006      	b.n	8003022 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fe94 	bl	8002d4a <HAL_I2C_MasterTxCpltCallback>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11d      	bne.n	800307e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10b      	bne.n	8003062 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003060:	e073      	b.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	b29b      	uxth	r3, r3
 8003068:	121b      	asrs	r3, r3, #8
 800306a:	b2da      	uxtb	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800307c:	e065      	b.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10b      	bne.n	800309e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	b2da      	uxtb	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800309c:	e055      	b.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d151      	bne.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b22      	cmp	r3, #34	; 0x22
 80030aa:	d10d      	bne.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ba:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c6:	e040      	b.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b21      	cmp	r3, #33	; 0x21
 80030d6:	d112      	bne.n	80030fe <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030fc:	e025      	b.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d120      	bne.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b21      	cmp	r3, #33	; 0x21
 800310c:	d11d      	bne.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800311c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe f8a7 	bl	8001298 <HAL_I2C_MemTxCpltCallback>
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b22      	cmp	r3, #34	; 0x22
 8003164:	f040 80a2 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d921      	bls.n	80031ba <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	f040 8082 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80031b8:	e078      	b.n	80032ac <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d074      	beq.n	80032ac <I2C_MasterReceive_RXNE+0x15a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d002      	beq.n	80031ce <I2C_MasterReceive_RXNE+0x7c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d16e      	bne.n	80032ac <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f001 fa6e 	bl	80046b0 <I2C_WaitOnSTOPRequestThroughIT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d142      	bne.n	8003260 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d10a      	bne.n	800324a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fdc1 	bl	8002dca <HAL_I2C_MemRxCpltCallback>
}
 8003248:	e030      	b.n	80032ac <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2212      	movs	r2, #18
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fd80 	bl	8002d5e <HAL_I2C_MasterRxCpltCallback>
}
 800325e:	e025      	b.n	80032ac <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800326e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fd99 	bl	8002dde <HAL_I2C_ErrorCallback>
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003302:	e0bd      	b.n	8003480 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d129      	bne.n	8003362 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00a      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003360:	e08e      	b.n	8003480 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d176      	bne.n	800345a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d002      	beq.n	8003378 <I2C_MasterReceive_BTF+0xc4>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d108      	bne.n	800338a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e019      	b.n	80033be <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d002      	beq.n	8003396 <I2C_MasterReceive_BTF+0xe2>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d108      	bne.n	80033a8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e00a      	b.n	80033be <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d007      	beq.n	80033be <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003418:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d10a      	bne.n	8003444 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fcc4 	bl	8002dca <HAL_I2C_MemRxCpltCallback>
}
 8003442:	e01d      	b.n	8003480 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2212      	movs	r2, #18
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fc83 	bl	8002d5e <HAL_I2C_MasterRxCpltCallback>
}
 8003458:	e012      	b.n	8003480 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d117      	bne.n	80034cc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034b6:	e067      	b.n	8003588 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
}
 80034ca:	e05d      	b.n	8003588 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d4:	d133      	bne.n	800353e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b21      	cmp	r3, #33	; 0x21
 80034e0:	d109      	bne.n	80034f6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	e008      	b.n	8003508 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <I2C_Master_SB+0x92>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d032      	beq.n	8003588 <I2C_Master_SB+0x100>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02d      	beq.n	8003588 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	605a      	str	r2, [r3, #4]
}
 800353c:	e024      	b.n	8003588 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	b29b      	uxth	r3, r3
 800354c:	11db      	asrs	r3, r3, #7
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f003 0306 	and.w	r3, r3, #6
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f063 030f 	orn	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]
}
 8003562:	e011      	b.n	8003588 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10d      	bne.n	8003588 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	b29b      	uxth	r3, r3
 8003572:	11db      	asrs	r3, r3, #7
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0306 	and.w	r3, r3, #6
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f063 030e 	orn	r3, r3, #14
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <I2C_Master_ADD10+0x26>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <I2C_Master_ADD10+0x48>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035da:	605a      	str	r2, [r3, #4]
  }
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b091      	sub	sp, #68	; 0x44
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b22      	cmp	r3, #34	; 0x22
 8003610:	f040 8169 	bne.w	80038e6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10f      	bne.n	800363c <I2C_Master_ADDR+0x54>
 800361c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d10b      	bne.n	800363c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	e160      	b.n	80038fe <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11d      	bne.n	8003680 <I2C_Master_ADDR+0x98>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800364c:	d118      	bne.n	8003680 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003672:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	651a      	str	r2, [r3, #80]	; 0x50
 800367e:	e13e      	b.n	80038fe <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d113      	bne.n	80036b2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e115      	b.n	80038de <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	f040 808a 	bne.w	80037d2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c4:	d137      	bne.n	8003736 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	d113      	bne.n	800370e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	e0e7      	b.n	80038de <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e0d3      	b.n	80038de <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b08      	cmp	r3, #8
 800373a:	d02e      	beq.n	800379a <I2C_Master_ADDR+0x1b2>
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	2b20      	cmp	r3, #32
 8003740:	d02b      	beq.n	800379a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	2b12      	cmp	r3, #18
 8003746:	d102      	bne.n	800374e <I2C_Master_ADDR+0x166>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	2b01      	cmp	r3, #1
 800374c:	d125      	bne.n	800379a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	2b04      	cmp	r3, #4
 8003752:	d00e      	beq.n	8003772 <I2C_Master_ADDR+0x18a>
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2b02      	cmp	r3, #2
 8003758:	d00b      	beq.n	8003772 <I2C_Master_ADDR+0x18a>
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	2b10      	cmp	r3, #16
 800375e:	d008      	beq.n	8003772 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	e0a1      	b.n	80038de <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e085      	b.n	80038de <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d14d      	bne.n	8003878 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d016      	beq.n	8003810 <I2C_Master_ADDR+0x228>
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d013      	beq.n	8003810 <I2C_Master_ADDR+0x228>
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d010      	beq.n	8003810 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e007      	b.n	8003820 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382e:	d117      	bne.n	8003860 <I2C_Master_ADDR+0x278>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003836:	d00b      	beq.n	8003850 <I2C_Master_ADDR+0x268>
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	2b01      	cmp	r3, #1
 800383c:	d008      	beq.n	8003850 <I2C_Master_ADDR+0x268>
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b08      	cmp	r3, #8
 8003842:	d005      	beq.n	8003850 <I2C_Master_ADDR+0x268>
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	2b10      	cmp	r3, #16
 8003848:	d002      	beq.n	8003850 <I2C_Master_ADDR+0x268>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b20      	cmp	r3, #32
 800384e:	d107      	bne.n	8003860 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800385e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e032      	b.n	80038de <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003886:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d117      	bne.n	80038c8 <I2C_Master_ADDR+0x2e0>
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800389e:	d00b      	beq.n	80038b8 <I2C_Master_ADDR+0x2d0>
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d008      	beq.n	80038b8 <I2C_Master_ADDR+0x2d0>
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d005      	beq.n	80038b8 <I2C_Master_ADDR+0x2d0>
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d002      	beq.n	80038b8 <I2C_Master_ADDR+0x2d0>
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d107      	bne.n	80038c8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038e4:	e00b      	b.n	80038fe <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	e7ff      	b.n	80038fe <I2C_Master_ADDR+0x316>
 80038fe:	bf00      	nop
 8003900:	3744      	adds	r7, #68	; 0x44
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d114      	bne.n	800397c <I2C_SlaveTransmit_TXE+0x72>
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b29      	cmp	r3, #41	; 0x29
 8003956:	d111      	bne.n	800397c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2221      	movs	r2, #33	; 0x21
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2228      	movs	r2, #40	; 0x28
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff f9fb 	bl	8002d72 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d011      	beq.n	80039ba <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	781a      	ldrb	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02c      	beq.n	8003a3a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d114      	bne.n	8003a3a <I2C_SlaveReceive_RXNE+0x74>
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b2a      	cmp	r3, #42	; 0x2a
 8003a14:	d111      	bne.n	8003a3a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2222      	movs	r2, #34	; 0x22
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2228      	movs	r2, #40	; 0x28
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff f9a6 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d012      	beq.n	8003a7a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003aa0:	2b28      	cmp	r3, #40	; 0x28
 8003aa2:	d127      	bne.n	8003af4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	81bb      	strh	r3, [r7, #12]
 8003ad6:	e002      	b.n	8003ade <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ae6:	89ba      	ldrh	r2, [r7, #12]
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff f954 	bl	8002d9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003af2:	e00e      	b.n	8003b12 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b78:	d172      	bne.n	8003c60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b22      	cmp	r3, #34	; 0x22
 8003b7e:	d002      	beq.n	8003b86 <I2C_Slave_STOPF+0x6a>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b2a      	cmp	r3, #42	; 0x2a
 8003b84:	d135      	bne.n	8003bf2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0204 	orr.w	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe f9d2 	bl	8001f68 <HAL_DMA_GetState>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d049      	beq.n	8003c5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	4a69      	ldr	r2, [pc, #420]	; (8003d74 <I2C_Slave_STOPF+0x258>)
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f81a 	bl	8001c10 <HAL_DMA_Abort_IT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03d      	beq.n	8003c5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bec:	4610      	mov	r0, r2
 8003bee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bf0:	e035      	b.n	8003c5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0204 	orr.w	r2, r3, #4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe f99c 	bl	8001f68 <HAL_DMA_GetState>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d014      	beq.n	8003c60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	4a4e      	ldr	r2, [pc, #312]	; (8003d74 <I2C_Slave_STOPF+0x258>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd ffe4 	bl	8001c10 <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4798      	blx	r3
 8003c5c:	e000      	b.n	8003c60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d03e      	beq.n	8003ce8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d112      	bne.n	8003c9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d112      	bne.n	8003cd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f843 	bl	8003d7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cf6:	e039      	b.n	8003d6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d109      	bne.n	8003d12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2228      	movs	r2, #40	; 0x28
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff f83a 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b28      	cmp	r3, #40	; 0x28
 8003d1c:	d111      	bne.n	8003d42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <I2C_Slave_STOPF+0x25c>)
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff f83b 	bl	8002db6 <HAL_I2C_ListenCpltCallback>
}
 8003d40:	e014      	b.n	8003d6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	2b22      	cmp	r3, #34	; 0x22
 8003d48:	d002      	beq.n	8003d50 <I2C_Slave_STOPF+0x234>
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b22      	cmp	r3, #34	; 0x22
 8003d4e:	d10d      	bne.n	8003d6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff f80d 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08004331 	.word	0x08004331
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d002      	beq.n	8003da0 <I2C_ITError+0x24>
 8003d9a:	7bbb      	ldrb	r3, [r7, #14]
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10a      	bne.n	8003db6 <I2C_ITError+0x3a>
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b22      	cmp	r3, #34	; 0x22
 8003da4:	d107      	bne.n	8003db6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dbc:	2b28      	cmp	r3, #40	; 0x28
 8003dbe:	d107      	bne.n	8003dd0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2228      	movs	r2, #40	; 0x28
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dce:	e015      	b.n	8003dfc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dde:	d00a      	beq.n	8003df6 <I2C_ITError+0x7a>
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b60      	cmp	r3, #96	; 0x60
 8003de4:	d007      	beq.n	8003df6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0a:	d162      	bne.n	8003ed2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d020      	beq.n	8003e6c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <I2C_ITError+0x25c>)
 8003e30:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd feea 	bl	8001c10 <HAL_DMA_Abort_IT>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8089 	beq.w	8003f56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e66:	4610      	mov	r0, r2
 8003e68:	4798      	blx	r3
 8003e6a:	e074      	b.n	8003f56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4a59      	ldr	r2, [pc, #356]	; (8003fd8 <I2C_ITError+0x25c>)
 8003e72:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd fec9 	bl	8001c10 <HAL_DMA_Abort_IT>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d068      	beq.n	8003f56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d10b      	bne.n	8003eaa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
 8003ed0:	e041      	b.n	8003f56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b60      	cmp	r3, #96	; 0x60
 8003edc:	d125      	bne.n	8003f2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d10b      	bne.n	8003f12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe ff65 	bl	8002df2 <HAL_I2C_AbortCpltCallback>
 8003f28:	e015      	b.n	8003f56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d10b      	bne.n	8003f50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fe ff44 	bl	8002dde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10e      	bne.n	8003f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d113      	bne.n	8003fd0 <I2C_ITError+0x254>
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b28      	cmp	r3, #40	; 0x28
 8003fac:	d110      	bne.n	8003fd0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <I2C_ITError+0x260>)
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fef3 	bl	8002db6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	08004331 	.word	0x08004331
 8003fdc:	ffff0000 	.word	0xffff0000

08003fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa32 	bl	8004480 <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d103      	bne.n	800403a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e05f      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	492d      	ldr	r1, [pc, #180]	; (8004108 <I2C_RequestMemoryWrite+0x128>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa6a 	bl	800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04c      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fad4 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e02b      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	e021      	b.n	80040fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 faae 	bl	800462c <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e005      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	00010002 	.word	0x00010002

0800410c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004128:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800413e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	2200      	movs	r2, #0
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2200      	movs	r2, #0
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004166:	2b21      	cmp	r3, #33	; 0x21
 8004168:	d007      	beq.n	800417a <I2C_DMAXferCplt+0x6e>
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004170:	2b22      	cmp	r3, #34	; 0x22
 8004172:	d131      	bne.n	80041d8 <I2C_DMAXferCplt+0xcc>
 8004174:	7cbb      	ldrb	r3, [r7, #18]
 8004176:	2b20      	cmp	r3, #32
 8004178:	d12e      	bne.n	80041d8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004188:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	2b29      	cmp	r3, #41	; 0x29
 8004194:	d10a      	bne.n	80041ac <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2228      	movs	r2, #40	; 0x28
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041a4:	6978      	ldr	r0, [r7, #20]
 80041a6:	f7fe fde4 	bl	8002d72 <HAL_I2C_SlaveTxCpltCallback>
 80041aa:	e00c      	b.n	80041c6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b2a      	cmp	r3, #42	; 0x2a
 80041b0:	d109      	bne.n	80041c6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2222      	movs	r2, #34	; 0x22
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2228      	movs	r2, #40	; 0x28
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7fe fde0 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80041d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041d6:	e06a      	b.n	80042ae <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d064      	beq.n	80042ae <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800420c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004214:	d009      	beq.n	800422a <I2C_DMAXferCplt+0x11e>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d006      	beq.n	800422a <I2C_DMAXferCplt+0x11e>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004222:	d002      	beq.n	800422a <I2C_DMAXferCplt+0x11e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b20      	cmp	r3, #32
 8004228:	d107      	bne.n	800423a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004238:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004248:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004258:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f7fe fdb8 	bl	8002dde <HAL_I2C_ErrorCallback>
}
 800426e:	e01e      	b.n	80042ae <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d10a      	bne.n	800429a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7fe fd99 	bl	8002dca <HAL_I2C_MemRxCpltCallback>
}
 8004298:	e009      	b.n	80042ae <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2212      	movs	r2, #18
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f7fe fd58 	bl	8002d5e <HAL_I2C_MasterRxCpltCallback>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	2200      	movs	r2, #0
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	2200      	movs	r2, #0
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fd fe4d 	bl	8001f84 <HAL_DMA_GetError>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d01b      	beq.n	8004328 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0210 	orr.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7fe fd5b 	bl	8002dde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800434a:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <I2C_DMAAbort+0x148>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <I2C_DMAAbort+0x14c>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0a1a      	lsrs	r2, r3, #8
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00da      	lsls	r2, r3, #3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f043 0220 	orr.w	r2, r3, #32
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004376:	e00a      	b.n	800438e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d0ea      	beq.n	8004364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2200      	movs	r2, #0
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	2200      	movs	r2, #0
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	2200      	movs	r2, #0
 80043d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d10e      	bne.n	800441e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7fe fceb 	bl	8002df2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441c:	e027      	b.n	800446e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004424:	2b28      	cmp	r3, #40	; 0x28
 8004426:	d117      	bne.n	8004458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2228      	movs	r2, #40	; 0x28
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004456:	e007      	b.n	8004468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7fe fcb8 	bl	8002dde <HAL_I2C_ErrorCallback>
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000
 800447c:	14f8b589 	.word	0x14f8b589

08004480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004490:	e025      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d021      	beq.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fd f971 	bl	8001780 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e023      	b.n	8004526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10d      	bne.n	8004504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	e00c      	b.n	800451e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d0b6      	beq.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800453c:	e051      	b.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454c:	d123      	bne.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e046      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d021      	beq.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fd f8ef 	bl	8001780 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e020      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e00b      	b.n	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	43da      	mvns	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d18d      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	e02d      	b.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f86a 	bl	8004714 <I2C_IsAcknowledgeFailed>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02d      	b.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d021      	beq.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fd f895 	bl	8001780 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d116      	bne.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d1ca      	bne.n	800463a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80046bc:	4b13      	ldr	r3, [pc, #76]	; (800470c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	4a13      	ldr	r2, [pc, #76]	; (8004710 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	0a1a      	lsrs	r2, r3, #8
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e008      	b.n	8004700 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d0e9      	beq.n	80046d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000000 	.word	0x20000000
 8004710:	14f8b589 	.word	0x14f8b589

08004714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d11b      	bne.n	8004764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004782:	d103      	bne.n	800478c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800478a:	e007      	b.n	800479c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004794:	d102      	bne.n	800479c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2208      	movs	r2, #8
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d129      	bne.n	8004812 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0210 	bic.w	r2, r2, #16
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d12a      	bne.n	8004890 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2224      	movs	r2, #36	; 0x24
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	4313      	orrs	r3, r2
 800486a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_PWREx_EnableOverDrive+0x94>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fc ff58 	bl	8001780 <HAL_GetTick>
 80048d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048d2:	e009      	b.n	80048e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048d4:	f7fc ff54 	bl	8001780 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e2:	d901      	bls.n	80048e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e01f      	b.n	8004928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_PWREx_EnableOverDrive+0x98>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d1ee      	bne.n	80048d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048fc:	f7fc ff40 	bl	8001780 <HAL_GetTick>
 8004900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004902:	e009      	b.n	8004918 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004904:	f7fc ff3c 	bl	8001780 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004912:	d901      	bls.n	8004918 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e007      	b.n	8004928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_PWREx_EnableOverDrive+0x98>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004924:	d1ee      	bne.n	8004904 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	420e0040 	.word	0x420e0040
 8004938:	40007000 	.word	0x40007000
 800493c:	420e0044 	.word	0x420e0044

08004940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e264      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	4ba3      	ldr	r3, [pc, #652]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4ba0      	ldr	r3, [pc, #640]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b9d      	ldr	r3, [pc, #628]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b99      	ldr	r3, [pc, #612]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e23f      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b91      	ldr	r3, [pc, #580]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a87      	ldr	r2, [pc, #540]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b84      	ldr	r3, [pc, #528]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a83      	ldr	r2, [pc, #524]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a80      	ldr	r2, [pc, #512]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fc fec2 	bl	8001780 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fc febe 	bl	8001780 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e204      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fc feae 	bl	8001780 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fc feaa 	bl	8001780 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1f0      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b62      	ldr	r3, [pc, #392]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d116      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1c4      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b56      	ldr	r3, [pc, #344]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4952      	ldr	r1, [pc, #328]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	e03a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <HAL_RCC_OscConfig+0x2b0>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fc fe63 	bl	8001780 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fc fe5f 	bl	8001780 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1a5      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	4b46      	ldr	r3, [pc, #280]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4940      	ldr	r1, [pc, #256]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_OscConfig+0x2b0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fc fe42 	bl	8001780 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7fc fe3e 	bl	8001780 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e184      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d030      	beq.n	8004b8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b32:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <HAL_RCC_OscConfig+0x2b4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fc fe22 	bl	8001780 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fc fe1e 	bl	8001780 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e164      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b5e:	e015      	b.n	8004b8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_OscConfig+0x2b4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fc fe0b 	bl	8001780 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fc fe07 	bl	8001780 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e14d      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80a0 	beq.w	8004cda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d121      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fc fdcd 	bl	8001780 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	e011      	b.n	8004c0e <HAL_RCC_OscConfig+0x2ce>
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	42470e80 	.word	0x42470e80
 8004bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fc fdc0 	bl	8001780 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e106      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0e:	4b85      	ldr	r3, [pc, #532]	; (8004e24 <HAL_RCC_OscConfig+0x4e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x2f0>
 8004c22:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a80      	ldr	r2, [pc, #512]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2e:	e01c      	b.n	8004c6a <HAL_RCC_OscConfig+0x32a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x312>
 8004c38:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a7a      	ldr	r2, [pc, #488]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	4b78      	ldr	r3, [pc, #480]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a77      	ldr	r2, [pc, #476]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c50:	e00b      	b.n	8004c6a <HAL_RCC_OscConfig+0x32a>
 8004c52:	4b75      	ldr	r3, [pc, #468]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a74      	ldr	r2, [pc, #464]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5e:	4b72      	ldr	r3, [pc, #456]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a71      	ldr	r2, [pc, #452]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fc fd85 	bl	8001780 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fc fd81 	bl	8001780 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0c5      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ee      	beq.n	8004c7a <HAL_RCC_OscConfig+0x33a>
 8004c9c:	e014      	b.n	8004cc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fc fd6f 	bl	8001780 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc fd6b 	bl	8001780 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0af      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbc:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a55      	ldr	r2, [pc, #340]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 809b 	beq.w	8004e1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d05c      	beq.n	8004daa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d141      	bne.n	8004d7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf8:	4b4c      	ldr	r3, [pc, #304]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fc fd3f 	bl	8001780 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fc fd3b 	bl	8001780 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e081      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d18:	4b43      	ldr	r3, [pc, #268]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	019b      	lsls	r3, r3, #6
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	4937      	ldr	r1, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fc fd14 	bl	8001780 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fc fd10 	bl	8001780 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e056      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x41c>
 8004d7a:	e04e      	b.n	8004e1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fc fcfd 	bl	8001780 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fc fcf9 	bl	8001780 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e03f      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x44a>
 8004da8:	e037      	b.n	8004e1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e032      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d028      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d11a      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de6:	4013      	ands	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d111      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d107      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d001      	beq.n	8004e1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40007000 	.word	0x40007000
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	42470060 	.word	0x42470060

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cc      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efe:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e067      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4934      	ldr	r1, [pc, #208]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fc fc2e 	bl	8001780 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f28:	f7fc fc2a 	bl	8001780 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 020c 	and.w	r2, r3, #12
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1eb      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc fb8e 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	08006900 	.word	0x08006900
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	20000004 	.word	0x20000004

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b5b0      	push	{r4, r5, r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005002:	2100      	movs	r1, #0
 8005004:	6079      	str	r1, [r7, #4]
 8005006:	2100      	movs	r1, #0
 8005008:	60f9      	str	r1, [r7, #12]
 800500a:	2100      	movs	r1, #0
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800500e:	2100      	movs	r1, #0
 8005010:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005012:	4952      	ldr	r1, [pc, #328]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005014:	6889      	ldr	r1, [r1, #8]
 8005016:	f001 010c 	and.w	r1, r1, #12
 800501a:	2908      	cmp	r1, #8
 800501c:	d00d      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x3e>
 800501e:	2908      	cmp	r1, #8
 8005020:	f200 8094 	bhi.w	800514c <HAL_RCC_GetSysClockFreq+0x150>
 8005024:	2900      	cmp	r1, #0
 8005026:	d002      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0x32>
 8005028:	2904      	cmp	r1, #4
 800502a:	d003      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x38>
 800502c:	e08e      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502e:	4b4c      	ldr	r3, [pc, #304]	; (8005160 <HAL_RCC_GetSysClockFreq+0x164>)
 8005030:	60bb      	str	r3, [r7, #8]
       break;
 8005032:	e08e      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 8005036:	60bb      	str	r3, [r7, #8]
      break;
 8005038:	e08b      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503a:	4948      	ldr	r1, [pc, #288]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 800503c:	6849      	ldr	r1, [r1, #4]
 800503e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005042:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005044:	4945      	ldr	r1, [pc, #276]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005046:	6849      	ldr	r1, [r1, #4]
 8005048:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800504c:	2900      	cmp	r1, #0
 800504e:	d024      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005050:	4942      	ldr	r1, [pc, #264]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005052:	6849      	ldr	r1, [r1, #4]
 8005054:	0989      	lsrs	r1, r1, #6
 8005056:	4608      	mov	r0, r1
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005060:	f04f 0500 	mov.w	r5, #0
 8005064:	ea00 0204 	and.w	r2, r0, r4
 8005068:	ea01 0305 	and.w	r3, r1, r5
 800506c:	493d      	ldr	r1, [pc, #244]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 800506e:	fb01 f003 	mul.w	r0, r1, r3
 8005072:	2100      	movs	r1, #0
 8005074:	fb01 f102 	mul.w	r1, r1, r2
 8005078:	1844      	adds	r4, r0, r1
 800507a:	493a      	ldr	r1, [pc, #232]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 800507c:	fba2 0101 	umull	r0, r1, r2, r1
 8005080:	1863      	adds	r3, r4, r1
 8005082:	4619      	mov	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f7fb f900 	bl	8000290 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e04a      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	461a      	mov	r2, r3
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	ea02 0400 	and.w	r4, r2, r0
 80050b2:	ea03 0501 	and.w	r5, r3, r1
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	014b      	lsls	r3, r1, #5
 80050c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050c8:	0142      	lsls	r2, r0, #5
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	1b00      	subs	r0, r0, r4
 80050d0:	eb61 0105 	sbc.w	r1, r1, r5
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	018b      	lsls	r3, r1, #6
 80050de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050e2:	0182      	lsls	r2, r0, #6
 80050e4:	1a12      	subs	r2, r2, r0
 80050e6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f8:	00d0      	lsls	r0, r2, #3
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	1912      	adds	r2, r2, r4
 8005100:	eb45 0303 	adc.w	r3, r5, r3
 8005104:	f04f 0000 	mov.w	r0, #0
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	0299      	lsls	r1, r3, #10
 800510e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005112:	0290      	lsls	r0, r2, #10
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f7fb f8b4 	bl	8000290 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4613      	mov	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCC_GetSysClockFreq+0x164>)
 800514e:	60bb      	str	r3, [r7, #8]
      break;
 8005150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005152:	68bb      	ldr	r3, [r7, #8]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bdb0      	pop	{r4, r5, r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	017d7840 	.word	0x017d7840

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000000 	.word	0x20000000

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08006910 	.word	0x08006910

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	08006910 	.word	0x08006910

080051d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e03f      	b.n	8005262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc f912 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	; 0x24
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f929 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b08a      	sub	sp, #40	; 0x28
 800526e:	af02      	add	r7, sp, #8
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b20      	cmp	r3, #32
 8005288:	d17c      	bne.n	8005384 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_UART_Transmit+0x2c>
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e075      	b.n	8005386 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_UART_Transmit+0x3e>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e06e      	b.n	8005386 <HAL_UART_Transmit+0x11c>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	; 0x21
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052be:	f7fc fa5f 	bl	8001780 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d108      	bne.n	80052ec <HAL_UART_Transmit+0x82>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e003      	b.n	80052f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052fc:	e02a      	b.n	8005354 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f840 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e036      	b.n	8005386 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800532c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	3302      	adds	r3, #2
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e007      	b.n	8005346 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	3301      	adds	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1cf      	bne.n	80052fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2140      	movs	r1, #64	; 0x40
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f810 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b090      	sub	sp, #64	; 0x40
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539e:	e050      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d04c      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <UART_WaitOnFlagUntilTimeout+0x30>
 80053ae:	f7fc f9e7 	bl	8001780 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d241      	bcs.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053de:	637a      	str	r2, [r7, #52]	; 0x34
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	63bb      	str	r3, [r7, #56]	; 0x38
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005412:	623a      	str	r2, [r7, #32]
 8005414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	69f9      	ldr	r1, [r7, #28]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e00f      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4013      	ands	r3, r2
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	429a      	cmp	r2, r3
 800545e:	d09f      	beq.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3740      	adds	r7, #64	; 0x40
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	b09f      	sub	sp, #124	; 0x7c
 8005472:	af00      	add	r7, sp, #0
 8005474:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	68d9      	ldr	r1, [r3, #12]
 8005484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	ea40 0301 	orr.w	r3, r0, r1
 800548c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	431a      	orrs	r2, r3
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	431a      	orrs	r2, r3
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054b0:	f021 010c 	bic.w	r1, r1, #12
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ba:	430b      	orrs	r3, r1
 80054bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	6999      	ldr	r1, [r3, #24]
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	ea40 0301 	orr.w	r3, r0, r1
 80054d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4bc5      	ldr	r3, [pc, #788]	; (80057f0 <UART_SetConfig+0x384>)
 80054dc:	429a      	cmp	r2, r3
 80054de:	d004      	beq.n	80054ea <UART_SetConfig+0x7e>
 80054e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4bc3      	ldr	r3, [pc, #780]	; (80057f4 <UART_SetConfig+0x388>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ea:	f7ff fe5d 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 80054ee:	6778      	str	r0, [r7, #116]	; 0x74
 80054f0:	e002      	b.n	80054f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f2:	f7ff fe45 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 80054f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	f040 80b6 	bne.w	8005670 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005506:	461c      	mov	r4, r3
 8005508:	f04f 0500 	mov.w	r5, #0
 800550c:	4622      	mov	r2, r4
 800550e:	462b      	mov	r3, r5
 8005510:	1891      	adds	r1, r2, r2
 8005512:	6439      	str	r1, [r7, #64]	; 0x40
 8005514:	415b      	adcs	r3, r3
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
 8005518:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800551c:	1912      	adds	r2, r2, r4
 800551e:	eb45 0303 	adc.w	r3, r5, r3
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f04f 0100 	mov.w	r1, #0
 800552a:	00d9      	lsls	r1, r3, #3
 800552c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005530:	00d0      	lsls	r0, r2, #3
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	1911      	adds	r1, r2, r4
 8005538:	6639      	str	r1, [r7, #96]	; 0x60
 800553a:	416b      	adcs	r3, r5
 800553c:	667b      	str	r3, [r7, #100]	; 0x64
 800553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	461a      	mov	r2, r3
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	1891      	adds	r1, r2, r2
 800554a:	63b9      	str	r1, [r7, #56]	; 0x38
 800554c:	415b      	adcs	r3, r3
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005554:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005558:	f7fa fe9a 	bl	8000290 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4ba5      	ldr	r3, [pc, #660]	; (80057f8 <UART_SetConfig+0x38c>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011e      	lsls	r6, r3, #4
 800556a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800556c:	461c      	mov	r4, r3
 800556e:	f04f 0500 	mov.w	r5, #0
 8005572:	4622      	mov	r2, r4
 8005574:	462b      	mov	r3, r5
 8005576:	1891      	adds	r1, r2, r2
 8005578:	6339      	str	r1, [r7, #48]	; 0x30
 800557a:	415b      	adcs	r3, r3
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
 800557e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005582:	1912      	adds	r2, r2, r4
 8005584:	eb45 0303 	adc.w	r3, r5, r3
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	00d9      	lsls	r1, r3, #3
 8005592:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005596:	00d0      	lsls	r0, r2, #3
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	1911      	adds	r1, r2, r4
 800559e:	65b9      	str	r1, [r7, #88]	; 0x58
 80055a0:	416b      	adcs	r3, r5
 80055a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	461a      	mov	r2, r3
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	1891      	adds	r1, r2, r2
 80055b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80055b2:	415b      	adcs	r3, r3
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055be:	f7fa fe67 	bl	8000290 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b8c      	ldr	r3, [pc, #560]	; (80057f8 <UART_SetConfig+0x38c>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	; 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3332      	adds	r3, #50	; 0x32
 80055da:	4a87      	ldr	r2, [pc, #540]	; (80057f8 <UART_SetConfig+0x38c>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055e8:	441e      	add	r6, r3
 80055ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ec:	4618      	mov	r0, r3
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	1894      	adds	r4, r2, r2
 80055f8:	623c      	str	r4, [r7, #32]
 80055fa:	415b      	adcs	r3, r3
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
 80055fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005602:	1812      	adds	r2, r2, r0
 8005604:	eb41 0303 	adc.w	r3, r1, r3
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	f04f 0500 	mov.w	r5, #0
 8005610:	00dd      	lsls	r5, r3, #3
 8005612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005616:	00d4      	lsls	r4, r2, #3
 8005618:	4622      	mov	r2, r4
 800561a:	462b      	mov	r3, r5
 800561c:	1814      	adds	r4, r2, r0
 800561e:	653c      	str	r4, [r7, #80]	; 0x50
 8005620:	414b      	adcs	r3, r1
 8005622:	657b      	str	r3, [r7, #84]	; 0x54
 8005624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	1891      	adds	r1, r2, r2
 8005630:	61b9      	str	r1, [r7, #24]
 8005632:	415b      	adcs	r3, r3
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800563a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800563e:	f7fa fe27 	bl	8000290 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <UART_SetConfig+0x38c>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	; 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	3332      	adds	r3, #50	; 0x32
 800565a:	4a67      	ldr	r2, [pc, #412]	; (80057f8 <UART_SetConfig+0x38c>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	f003 0207 	and.w	r2, r3, #7
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4432      	add	r2, r6
 800566c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800566e:	e0b9      	b.n	80057e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005672:	461c      	mov	r4, r3
 8005674:	f04f 0500 	mov.w	r5, #0
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	1891      	adds	r1, r2, r2
 800567e:	6139      	str	r1, [r7, #16]
 8005680:	415b      	adcs	r3, r3
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005688:	1912      	adds	r2, r2, r4
 800568a:	eb45 0303 	adc.w	r3, r5, r3
 800568e:	f04f 0000 	mov.w	r0, #0
 8005692:	f04f 0100 	mov.w	r1, #0
 8005696:	00d9      	lsls	r1, r3, #3
 8005698:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800569c:	00d0      	lsls	r0, r2, #3
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	eb12 0804 	adds.w	r8, r2, r4
 80056a6:	eb43 0905 	adc.w	r9, r3, r5
 80056aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f04f 0100 	mov.w	r1, #0
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	008b      	lsls	r3, r1, #2
 80056be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056c2:	0082      	lsls	r2, r0, #2
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	f7fa fde2 	bl	8000290 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <UART_SetConfig+0x38c>)
 80056d2:	fba3 2302 	umull	r2, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	011e      	lsls	r6, r3, #4
 80056da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056dc:	4618      	mov	r0, r3
 80056de:	f04f 0100 	mov.w	r1, #0
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	1894      	adds	r4, r2, r2
 80056e8:	60bc      	str	r4, [r7, #8]
 80056ea:	415b      	adcs	r3, r3
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f2:	1812      	adds	r2, r2, r0
 80056f4:	eb41 0303 	adc.w	r3, r1, r3
 80056f8:	f04f 0400 	mov.w	r4, #0
 80056fc:	f04f 0500 	mov.w	r5, #0
 8005700:	00dd      	lsls	r5, r3, #3
 8005702:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005706:	00d4      	lsls	r4, r2, #3
 8005708:	4622      	mov	r2, r4
 800570a:	462b      	mov	r3, r5
 800570c:	1814      	adds	r4, r2, r0
 800570e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005710:	414b      	adcs	r3, r1
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4618      	mov	r0, r3
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	008b      	lsls	r3, r1, #2
 8005728:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800572c:	0082      	lsls	r2, r0, #2
 800572e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005732:	f7fa fdad 	bl	8000290 <__aeabi_uldivmod>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <UART_SetConfig+0x38c>)
 800573c:	fba3 1302 	umull	r1, r3, r3, r2
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	2164      	movs	r1, #100	; 0x64
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	3332      	adds	r3, #50	; 0x32
 800574e:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <UART_SetConfig+0x38c>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575a:	441e      	add	r6, r3
 800575c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575e:	4618      	mov	r0, r3
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	1894      	adds	r4, r2, r2
 800576a:	603c      	str	r4, [r7, #0]
 800576c:	415b      	adcs	r3, r3
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	1812      	adds	r2, r2, r0
 8005776:	eb41 0303 	adc.w	r3, r1, r3
 800577a:	f04f 0400 	mov.w	r4, #0
 800577e:	f04f 0500 	mov.w	r5, #0
 8005782:	00dd      	lsls	r5, r3, #3
 8005784:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005788:	00d4      	lsls	r4, r2, #3
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	eb12 0a00 	adds.w	sl, r2, r0
 8005792:	eb43 0b01 	adc.w	fp, r3, r1
 8005796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057ae:	0082      	lsls	r2, r0, #2
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	f7fa fd6c 	bl	8000290 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <UART_SetConfig+0x38c>)
 80057be:	fba3 1302 	umull	r1, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2164      	movs	r1, #100	; 0x64
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	3332      	adds	r3, #50	; 0x32
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <UART_SetConfig+0x38c>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4432      	add	r2, r6
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	377c      	adds	r7, #124	; 0x7c
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ee:	bf00      	nop
 80057f0:	40011000 	.word	0x40011000
 80057f4:	40011400 	.word	0x40011400
 80057f8:	51eb851f 	.word	0x51eb851f

080057fc <__errno>:
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <__errno+0x8>)
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c

08005808 <__libc_init_array>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4d0d      	ldr	r5, [pc, #52]	; (8005840 <__libc_init_array+0x38>)
 800580c:	4c0d      	ldr	r4, [pc, #52]	; (8005844 <__libc_init_array+0x3c>)
 800580e:	1b64      	subs	r4, r4, r5
 8005810:	10a4      	asrs	r4, r4, #2
 8005812:	2600      	movs	r6, #0
 8005814:	42a6      	cmp	r6, r4
 8005816:	d109      	bne.n	800582c <__libc_init_array+0x24>
 8005818:	4d0b      	ldr	r5, [pc, #44]	; (8005848 <__libc_init_array+0x40>)
 800581a:	4c0c      	ldr	r4, [pc, #48]	; (800584c <__libc_init_array+0x44>)
 800581c:	f000 ffec 	bl	80067f8 <_init>
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	2600      	movs	r6, #0
 8005826:	42a6      	cmp	r6, r4
 8005828:	d105      	bne.n	8005836 <__libc_init_array+0x2e>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005830:	4798      	blx	r3
 8005832:	3601      	adds	r6, #1
 8005834:	e7ee      	b.n	8005814 <__libc_init_array+0xc>
 8005836:	f855 3b04 	ldr.w	r3, [r5], #4
 800583a:	4798      	blx	r3
 800583c:	3601      	adds	r6, #1
 800583e:	e7f2      	b.n	8005826 <__libc_init_array+0x1e>
 8005840:	080069c0 	.word	0x080069c0
 8005844:	080069c0 	.word	0x080069c0
 8005848:	080069c0 	.word	0x080069c0
 800584c:	080069c4 	.word	0x080069c4

08005850 <memset>:
 8005850:	4402      	add	r2, r0
 8005852:	4603      	mov	r3, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	d100      	bne.n	800585a <memset+0xa>
 8005858:	4770      	bx	lr
 800585a:	f803 1b01 	strb.w	r1, [r3], #1
 800585e:	e7f9      	b.n	8005854 <memset+0x4>

08005860 <iprintf>:
 8005860:	b40f      	push	{r0, r1, r2, r3}
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <iprintf+0x2c>)
 8005864:	b513      	push	{r0, r1, r4, lr}
 8005866:	681c      	ldr	r4, [r3, #0]
 8005868:	b124      	cbz	r4, 8005874 <iprintf+0x14>
 800586a:	69a3      	ldr	r3, [r4, #24]
 800586c:	b913      	cbnz	r3, 8005874 <iprintf+0x14>
 800586e:	4620      	mov	r0, r4
 8005870:	f000 fa5e 	bl	8005d30 <__sinit>
 8005874:	ab05      	add	r3, sp, #20
 8005876:	9a04      	ldr	r2, [sp, #16]
 8005878:	68a1      	ldr	r1, [r4, #8]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fc2f 	bl	80060e0 <_vfiprintf_r>
 8005882:	b002      	add	sp, #8
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	b004      	add	sp, #16
 800588a:	4770      	bx	lr
 800588c:	2000000c 	.word	0x2000000c

08005890 <_puts_r>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	460e      	mov	r6, r1
 8005894:	4605      	mov	r5, r0
 8005896:	b118      	cbz	r0, 80058a0 <_puts_r+0x10>
 8005898:	6983      	ldr	r3, [r0, #24]
 800589a:	b90b      	cbnz	r3, 80058a0 <_puts_r+0x10>
 800589c:	f000 fa48 	bl	8005d30 <__sinit>
 80058a0:	69ab      	ldr	r3, [r5, #24]
 80058a2:	68ac      	ldr	r4, [r5, #8]
 80058a4:	b913      	cbnz	r3, 80058ac <_puts_r+0x1c>
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fa42 	bl	8005d30 <__sinit>
 80058ac:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <_puts_r+0xd0>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d120      	bne.n	80058f4 <_puts_r+0x64>
 80058b2:	686c      	ldr	r4, [r5, #4]
 80058b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b6:	07db      	lsls	r3, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_puts_r+0x36>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	0598      	lsls	r0, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_puts_r+0x36>
 80058c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c2:	f000 fad3 	bl	8005e6c <__retarget_lock_acquire_recursive>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	0719      	lsls	r1, r3, #28
 80058ca:	d51d      	bpl.n	8005908 <_puts_r+0x78>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	b1db      	cbz	r3, 8005908 <_puts_r+0x78>
 80058d0:	3e01      	subs	r6, #1
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058d8:	3b01      	subs	r3, #1
 80058da:	60a3      	str	r3, [r4, #8]
 80058dc:	bb39      	cbnz	r1, 800592e <_puts_r+0x9e>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da38      	bge.n	8005954 <_puts_r+0xc4>
 80058e2:	4622      	mov	r2, r4
 80058e4:	210a      	movs	r1, #10
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 f848 	bl	800597c <__swbuf_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d011      	beq.n	8005914 <_puts_r+0x84>
 80058f0:	250a      	movs	r5, #10
 80058f2:	e011      	b.n	8005918 <_puts_r+0x88>
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <_puts_r+0xd4>)
 80058f6:	429c      	cmp	r4, r3
 80058f8:	d101      	bne.n	80058fe <_puts_r+0x6e>
 80058fa:	68ac      	ldr	r4, [r5, #8]
 80058fc:	e7da      	b.n	80058b4 <_puts_r+0x24>
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <_puts_r+0xd8>)
 8005900:	429c      	cmp	r4, r3
 8005902:	bf08      	it	eq
 8005904:	68ec      	ldreq	r4, [r5, #12]
 8005906:	e7d5      	b.n	80058b4 <_puts_r+0x24>
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	f000 f888 	bl	8005a20 <__swsetup_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	d0dd      	beq.n	80058d0 <_puts_r+0x40>
 8005914:	f04f 35ff 	mov.w	r5, #4294967295
 8005918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591a:	07da      	lsls	r2, r3, #31
 800591c:	d405      	bmi.n	800592a <_puts_r+0x9a>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	059b      	lsls	r3, r3, #22
 8005922:	d402      	bmi.n	800592a <_puts_r+0x9a>
 8005924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005926:	f000 faa2 	bl	8005e6e <__retarget_lock_release_recursive>
 800592a:	4628      	mov	r0, r5
 800592c:	bd70      	pop	{r4, r5, r6, pc}
 800592e:	2b00      	cmp	r3, #0
 8005930:	da04      	bge.n	800593c <_puts_r+0xac>
 8005932:	69a2      	ldr	r2, [r4, #24]
 8005934:	429a      	cmp	r2, r3
 8005936:	dc06      	bgt.n	8005946 <_puts_r+0xb6>
 8005938:	290a      	cmp	r1, #10
 800593a:	d004      	beq.n	8005946 <_puts_r+0xb6>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	6022      	str	r2, [r4, #0]
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	e7c5      	b.n	80058d2 <_puts_r+0x42>
 8005946:	4622      	mov	r2, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f817 	bl	800597c <__swbuf_r>
 800594e:	3001      	adds	r0, #1
 8005950:	d1bf      	bne.n	80058d2 <_puts_r+0x42>
 8005952:	e7df      	b.n	8005914 <_puts_r+0x84>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	250a      	movs	r5, #10
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	6022      	str	r2, [r4, #0]
 800595c:	701d      	strb	r5, [r3, #0]
 800595e:	e7db      	b.n	8005918 <_puts_r+0x88>
 8005960:	08006944 	.word	0x08006944
 8005964:	08006964 	.word	0x08006964
 8005968:	08006924 	.word	0x08006924

0800596c <puts>:
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <puts+0xc>)
 800596e:	4601      	mov	r1, r0
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f7ff bf8d 	b.w	8005890 <_puts_r>
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c

0800597c <__swbuf_r>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	460e      	mov	r6, r1
 8005980:	4614      	mov	r4, r2
 8005982:	4605      	mov	r5, r0
 8005984:	b118      	cbz	r0, 800598e <__swbuf_r+0x12>
 8005986:	6983      	ldr	r3, [r0, #24]
 8005988:	b90b      	cbnz	r3, 800598e <__swbuf_r+0x12>
 800598a:	f000 f9d1 	bl	8005d30 <__sinit>
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <__swbuf_r+0x98>)
 8005990:	429c      	cmp	r4, r3
 8005992:	d12b      	bne.n	80059ec <__swbuf_r+0x70>
 8005994:	686c      	ldr	r4, [r5, #4]
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	071a      	lsls	r2, r3, #28
 800599e:	d52f      	bpl.n	8005a00 <__swbuf_r+0x84>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	b36b      	cbz	r3, 8005a00 <__swbuf_r+0x84>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1ac0      	subs	r0, r0, r3
 80059aa:	6963      	ldr	r3, [r4, #20]
 80059ac:	b2f6      	uxtb	r6, r6
 80059ae:	4283      	cmp	r3, r0
 80059b0:	4637      	mov	r7, r6
 80059b2:	dc04      	bgt.n	80059be <__swbuf_r+0x42>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f926 	bl	8005c08 <_fflush_r>
 80059bc:	bb30      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	60a3      	str	r3, [r4, #8]
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	6022      	str	r2, [r4, #0]
 80059ca:	701e      	strb	r6, [r3, #0]
 80059cc:	6963      	ldr	r3, [r4, #20]
 80059ce:	3001      	adds	r0, #1
 80059d0:	4283      	cmp	r3, r0
 80059d2:	d004      	beq.n	80059de <__swbuf_r+0x62>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	07db      	lsls	r3, r3, #31
 80059d8:	d506      	bpl.n	80059e8 <__swbuf_r+0x6c>
 80059da:	2e0a      	cmp	r6, #10
 80059dc:	d104      	bne.n	80059e8 <__swbuf_r+0x6c>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f911 	bl	8005c08 <_fflush_r>
 80059e6:	b988      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059e8:	4638      	mov	r0, r7
 80059ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <__swbuf_r+0x9c>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d101      	bne.n	80059f6 <__swbuf_r+0x7a>
 80059f2:	68ac      	ldr	r4, [r5, #8]
 80059f4:	e7cf      	b.n	8005996 <__swbuf_r+0x1a>
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <__swbuf_r+0xa0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	bf08      	it	eq
 80059fc:	68ec      	ldreq	r4, [r5, #12]
 80059fe:	e7ca      	b.n	8005996 <__swbuf_r+0x1a>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f80c 	bl	8005a20 <__swsetup_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d0cb      	beq.n	80059a4 <__swbuf_r+0x28>
 8005a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a10:	e7ea      	b.n	80059e8 <__swbuf_r+0x6c>
 8005a12:	bf00      	nop
 8005a14:	08006944 	.word	0x08006944
 8005a18:	08006964 	.word	0x08006964
 8005a1c:	08006924 	.word	0x08006924

08005a20 <__swsetup_r>:
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <__swsetup_r+0xcc>)
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	681d      	ldr	r5, [r3, #0]
 8005a26:	4606      	mov	r6, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b125      	cbz	r5, 8005a36 <__swsetup_r+0x16>
 8005a2c:	69ab      	ldr	r3, [r5, #24]
 8005a2e:	b913      	cbnz	r3, 8005a36 <__swsetup_r+0x16>
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 f97d 	bl	8005d30 <__sinit>
 8005a36:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <__swsetup_r+0xd0>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	d10f      	bne.n	8005a5c <__swsetup_r+0x3c>
 8005a3c:	686c      	ldr	r4, [r5, #4]
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a44:	0719      	lsls	r1, r3, #28
 8005a46:	d42c      	bmi.n	8005aa2 <__swsetup_r+0x82>
 8005a48:	06dd      	lsls	r5, r3, #27
 8005a4a:	d411      	bmi.n	8005a70 <__swsetup_r+0x50>
 8005a4c:	2309      	movs	r3, #9
 8005a4e:	6033      	str	r3, [r6, #0]
 8005a50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	e03e      	b.n	8005ada <__swsetup_r+0xba>
 8005a5c:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <__swsetup_r+0xd4>)
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	d101      	bne.n	8005a66 <__swsetup_r+0x46>
 8005a62:	68ac      	ldr	r4, [r5, #8]
 8005a64:	e7eb      	b.n	8005a3e <__swsetup_r+0x1e>
 8005a66:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <__swsetup_r+0xd8>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	bf08      	it	eq
 8005a6c:	68ec      	ldreq	r4, [r5, #12]
 8005a6e:	e7e6      	b.n	8005a3e <__swsetup_r+0x1e>
 8005a70:	0758      	lsls	r0, r3, #29
 8005a72:	d512      	bpl.n	8005a9a <__swsetup_r+0x7a>
 8005a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a76:	b141      	cbz	r1, 8005a8a <__swsetup_r+0x6a>
 8005a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a7c:	4299      	cmp	r1, r3
 8005a7e:	d002      	beq.n	8005a86 <__swsetup_r+0x66>
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 fa59 	bl	8005f38 <_free_r>
 8005a86:	2300      	movs	r3, #0
 8005a88:	6363      	str	r3, [r4, #52]	; 0x34
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	b94b      	cbnz	r3, 8005aba <__swsetup_r+0x9a>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d003      	beq.n	8005aba <__swsetup_r+0x9a>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 f9ff 	bl	8005eb8 <__smakebuf_r>
 8005aba:	89a0      	ldrh	r0, [r4, #12]
 8005abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac0:	f010 0301 	ands.w	r3, r0, #1
 8005ac4:	d00a      	beq.n	8005adc <__swsetup_r+0xbc>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60a3      	str	r3, [r4, #8]
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	425b      	negs	r3, r3
 8005ace:	61a3      	str	r3, [r4, #24]
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	b943      	cbnz	r3, 8005ae6 <__swsetup_r+0xc6>
 8005ad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ad8:	d1ba      	bne.n	8005a50 <__swsetup_r+0x30>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	0781      	lsls	r1, r0, #30
 8005ade:	bf58      	it	pl
 8005ae0:	6963      	ldrpl	r3, [r4, #20]
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	e7f4      	b.n	8005ad0 <__swsetup_r+0xb0>
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	e7f7      	b.n	8005ada <__swsetup_r+0xba>
 8005aea:	bf00      	nop
 8005aec:	2000000c 	.word	0x2000000c
 8005af0:	08006944 	.word	0x08006944
 8005af4:	08006964 	.word	0x08006964
 8005af8:	08006924 	.word	0x08006924

08005afc <__sflush_r>:
 8005afc:	898a      	ldrh	r2, [r1, #12]
 8005afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	0710      	lsls	r0, r2, #28
 8005b06:	460c      	mov	r4, r1
 8005b08:	d458      	bmi.n	8005bbc <__sflush_r+0xc0>
 8005b0a:	684b      	ldr	r3, [r1, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc05      	bgt.n	8005b1c <__sflush_r+0x20>
 8005b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dc02      	bgt.n	8005b1c <__sflush_r+0x20>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	d0f9      	beq.n	8005b16 <__sflush_r+0x1a>
 8005b22:	2300      	movs	r3, #0
 8005b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b28:	682f      	ldr	r7, [r5, #0]
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	d032      	beq.n	8005b94 <__sflush_r+0x98>
 8005b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	075a      	lsls	r2, r3, #29
 8005b34:	d505      	bpl.n	8005b42 <__sflush_r+0x46>
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	1ac0      	subs	r0, r0, r3
 8005b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b3c:	b10b      	cbz	r3, 8005b42 <__sflush_r+0x46>
 8005b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b40:	1ac0      	subs	r0, r0, r3
 8005b42:	2300      	movs	r3, #0
 8005b44:	4602      	mov	r2, r0
 8005b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b48:	6a21      	ldr	r1, [r4, #32]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b0      	blx	r6
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	d106      	bne.n	8005b62 <__sflush_r+0x66>
 8005b54:	6829      	ldr	r1, [r5, #0]
 8005b56:	291d      	cmp	r1, #29
 8005b58:	d82c      	bhi.n	8005bb4 <__sflush_r+0xb8>
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <__sflush_r+0x108>)
 8005b5c:	40ca      	lsrs	r2, r1
 8005b5e:	07d6      	lsls	r6, r2, #31
 8005b60:	d528      	bpl.n	8005bb4 <__sflush_r+0xb8>
 8005b62:	2200      	movs	r2, #0
 8005b64:	6062      	str	r2, [r4, #4]
 8005b66:	04d9      	lsls	r1, r3, #19
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	6022      	str	r2, [r4, #0]
 8005b6c:	d504      	bpl.n	8005b78 <__sflush_r+0x7c>
 8005b6e:	1c42      	adds	r2, r0, #1
 8005b70:	d101      	bne.n	8005b76 <__sflush_r+0x7a>
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	b903      	cbnz	r3, 8005b78 <__sflush_r+0x7c>
 8005b76:	6560      	str	r0, [r4, #84]	; 0x54
 8005b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7a:	602f      	str	r7, [r5, #0]
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d0ca      	beq.n	8005b16 <__sflush_r+0x1a>
 8005b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b84:	4299      	cmp	r1, r3
 8005b86:	d002      	beq.n	8005b8e <__sflush_r+0x92>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f9d5 	bl	8005f38 <_free_r>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	6360      	str	r0, [r4, #52]	; 0x34
 8005b92:	e7c1      	b.n	8005b18 <__sflush_r+0x1c>
 8005b94:	6a21      	ldr	r1, [r4, #32]
 8005b96:	2301      	movs	r3, #1
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b0      	blx	r6
 8005b9c:	1c41      	adds	r1, r0, #1
 8005b9e:	d1c7      	bne.n	8005b30 <__sflush_r+0x34>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0c4      	beq.n	8005b30 <__sflush_r+0x34>
 8005ba6:	2b1d      	cmp	r3, #29
 8005ba8:	d001      	beq.n	8005bae <__sflush_r+0xb2>
 8005baa:	2b16      	cmp	r3, #22
 8005bac:	d101      	bne.n	8005bb2 <__sflush_r+0xb6>
 8005bae:	602f      	str	r7, [r5, #0]
 8005bb0:	e7b1      	b.n	8005b16 <__sflush_r+0x1a>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	e7ad      	b.n	8005b18 <__sflush_r+0x1c>
 8005bbc:	690f      	ldr	r7, [r1, #16]
 8005bbe:	2f00      	cmp	r7, #0
 8005bc0:	d0a9      	beq.n	8005b16 <__sflush_r+0x1a>
 8005bc2:	0793      	lsls	r3, r2, #30
 8005bc4:	680e      	ldr	r6, [r1, #0]
 8005bc6:	bf08      	it	eq
 8005bc8:	694b      	ldreq	r3, [r1, #20]
 8005bca:	600f      	str	r7, [r1, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2300      	movne	r3, #0
 8005bd0:	eba6 0807 	sub.w	r8, r6, r7
 8005bd4:	608b      	str	r3, [r1, #8]
 8005bd6:	f1b8 0f00 	cmp.w	r8, #0
 8005bda:	dd9c      	ble.n	8005b16 <__sflush_r+0x1a>
 8005bdc:	6a21      	ldr	r1, [r4, #32]
 8005bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be0:	4643      	mov	r3, r8
 8005be2:	463a      	mov	r2, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b0      	blx	r6
 8005be8:	2800      	cmp	r0, #0
 8005bea:	dc06      	bgt.n	8005bfa <__sflush_r+0xfe>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	e78e      	b.n	8005b18 <__sflush_r+0x1c>
 8005bfa:	4407      	add	r7, r0
 8005bfc:	eba8 0800 	sub.w	r8, r8, r0
 8005c00:	e7e9      	b.n	8005bd6 <__sflush_r+0xda>
 8005c02:	bf00      	nop
 8005c04:	20400001 	.word	0x20400001

08005c08 <_fflush_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	690b      	ldr	r3, [r1, #16]
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	b913      	cbnz	r3, 8005c18 <_fflush_r+0x10>
 8005c12:	2500      	movs	r5, #0
 8005c14:	4628      	mov	r0, r5
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	b118      	cbz	r0, 8005c22 <_fflush_r+0x1a>
 8005c1a:	6983      	ldr	r3, [r0, #24]
 8005c1c:	b90b      	cbnz	r3, 8005c22 <_fflush_r+0x1a>
 8005c1e:	f000 f887 	bl	8005d30 <__sinit>
 8005c22:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <_fflush_r+0x6c>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d11b      	bne.n	8005c60 <_fflush_r+0x58>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ef      	beq.n	8005c12 <_fflush_r+0xa>
 8005c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c34:	07d0      	lsls	r0, r2, #31
 8005c36:	d404      	bmi.n	8005c42 <_fflush_r+0x3a>
 8005c38:	0599      	lsls	r1, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_fflush_r+0x3a>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f000 f915 	bl	8005e6c <__retarget_lock_acquire_recursive>
 8005c42:	4628      	mov	r0, r5
 8005c44:	4621      	mov	r1, r4
 8005c46:	f7ff ff59 	bl	8005afc <__sflush_r>
 8005c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4c:	07da      	lsls	r2, r3, #31
 8005c4e:	4605      	mov	r5, r0
 8005c50:	d4e0      	bmi.n	8005c14 <_fflush_r+0xc>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	059b      	lsls	r3, r3, #22
 8005c56:	d4dd      	bmi.n	8005c14 <_fflush_r+0xc>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f000 f908 	bl	8005e6e <__retarget_lock_release_recursive>
 8005c5e:	e7d9      	b.n	8005c14 <_fflush_r+0xc>
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <_fflush_r+0x70>)
 8005c62:	429c      	cmp	r4, r3
 8005c64:	d101      	bne.n	8005c6a <_fflush_r+0x62>
 8005c66:	68ac      	ldr	r4, [r5, #8]
 8005c68:	e7df      	b.n	8005c2a <_fflush_r+0x22>
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <_fflush_r+0x74>)
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	bf08      	it	eq
 8005c70:	68ec      	ldreq	r4, [r5, #12]
 8005c72:	e7da      	b.n	8005c2a <_fflush_r+0x22>
 8005c74:	08006944 	.word	0x08006944
 8005c78:	08006964 	.word	0x08006964
 8005c7c:	08006924 	.word	0x08006924

08005c80 <std>:
 8005c80:	2300      	movs	r3, #0
 8005c82:	b510      	push	{r4, lr}
 8005c84:	4604      	mov	r4, r0
 8005c86:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c8e:	6083      	str	r3, [r0, #8]
 8005c90:	8181      	strh	r1, [r0, #12]
 8005c92:	6643      	str	r3, [r0, #100]	; 0x64
 8005c94:	81c2      	strh	r2, [r0, #14]
 8005c96:	6183      	str	r3, [r0, #24]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	305c      	adds	r0, #92	; 0x5c
 8005c9e:	f7ff fdd7 	bl	8005850 <memset>
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <std+0x38>)
 8005ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x3c>)
 8005ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x40>)
 8005cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x44>)
 8005cb0:	6224      	str	r4, [r4, #32]
 8005cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08006689 	.word	0x08006689
 8005cbc:	080066ab 	.word	0x080066ab
 8005cc0:	080066e3 	.word	0x080066e3
 8005cc4:	08006707 	.word	0x08006707

08005cc8 <_cleanup_r>:
 8005cc8:	4901      	ldr	r1, [pc, #4]	; (8005cd0 <_cleanup_r+0x8>)
 8005cca:	f000 b8af 	b.w	8005e2c <_fwalk_reent>
 8005cce:	bf00      	nop
 8005cd0:	08005c09 	.word	0x08005c09

08005cd4 <__sfmoreglue>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	1e4a      	subs	r2, r1, #1
 8005cd8:	2568      	movs	r5, #104	; 0x68
 8005cda:	4355      	muls	r5, r2
 8005cdc:	460e      	mov	r6, r1
 8005cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce2:	f000 f979 	bl	8005fd8 <_malloc_r>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	b140      	cbz	r0, 8005cfc <__sfmoreglue+0x28>
 8005cea:	2100      	movs	r1, #0
 8005cec:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf0:	300c      	adds	r0, #12
 8005cf2:	60a0      	str	r0, [r4, #8]
 8005cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cf8:	f7ff fdaa 	bl	8005850 <memset>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}

08005d00 <__sfp_lock_acquire>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__sfp_lock_acquire+0x8>)
 8005d02:	f000 b8b3 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005d06:	bf00      	nop
 8005d08:	200005a0 	.word	0x200005a0

08005d0c <__sfp_lock_release>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__sfp_lock_release+0x8>)
 8005d0e:	f000 b8ae 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005d12:	bf00      	nop
 8005d14:	200005a0 	.word	0x200005a0

08005d18 <__sinit_lock_acquire>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__sinit_lock_acquire+0x8>)
 8005d1a:	f000 b8a7 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	2000059b 	.word	0x2000059b

08005d24 <__sinit_lock_release>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__sinit_lock_release+0x8>)
 8005d26:	f000 b8a2 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	2000059b 	.word	0x2000059b

08005d30 <__sinit>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	f7ff fff0 	bl	8005d18 <__sinit_lock_acquire>
 8005d38:	69a3      	ldr	r3, [r4, #24]
 8005d3a:	b11b      	cbz	r3, 8005d44 <__sinit+0x14>
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	f7ff bff0 	b.w	8005d24 <__sinit_lock_release>
 8005d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d48:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4a:	4b13      	ldr	r3, [pc, #76]	; (8005d98 <__sinit+0x68>)
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <__sinit+0x6c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	bf04      	itt	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	61a3      	streq	r3, [r4, #24]
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f820 	bl	8005da0 <__sfp>
 8005d60:	6060      	str	r0, [r4, #4]
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f81c 	bl	8005da0 <__sfp>
 8005d68:	60a0      	str	r0, [r4, #8]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 f818 	bl	8005da0 <__sfp>
 8005d70:	2200      	movs	r2, #0
 8005d72:	60e0      	str	r0, [r4, #12]
 8005d74:	2104      	movs	r1, #4
 8005d76:	6860      	ldr	r0, [r4, #4]
 8005d78:	f7ff ff82 	bl	8005c80 <std>
 8005d7c:	68a0      	ldr	r0, [r4, #8]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2109      	movs	r1, #9
 8005d82:	f7ff ff7d 	bl	8005c80 <std>
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	2112      	movs	r1, #18
 8005d8c:	f7ff ff78 	bl	8005c80 <std>
 8005d90:	2301      	movs	r3, #1
 8005d92:	61a3      	str	r3, [r4, #24]
 8005d94:	e7d2      	b.n	8005d3c <__sinit+0xc>
 8005d96:	bf00      	nop
 8005d98:	08006920 	.word	0x08006920
 8005d9c:	08005cc9 	.word	0x08005cc9

08005da0 <__sfp>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	4607      	mov	r7, r0
 8005da4:	f7ff ffac 	bl	8005d00 <__sfp_lock_acquire>
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <__sfp+0x84>)
 8005daa:	681e      	ldr	r6, [r3, #0]
 8005dac:	69b3      	ldr	r3, [r6, #24]
 8005dae:	b913      	cbnz	r3, 8005db6 <__sfp+0x16>
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff ffbd 	bl	8005d30 <__sinit>
 8005db6:	3648      	adds	r6, #72	; 0x48
 8005db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	d503      	bpl.n	8005dc8 <__sfp+0x28>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	b30b      	cbz	r3, 8005e08 <__sfp+0x68>
 8005dc4:	6836      	ldr	r6, [r6, #0]
 8005dc6:	e7f7      	b.n	8005db8 <__sfp+0x18>
 8005dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dcc:	b9d5      	cbnz	r5, 8005e04 <__sfp+0x64>
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <__sfp+0x88>)
 8005dd0:	60e3      	str	r3, [r4, #12]
 8005dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8005dd8:	f000 f847 	bl	8005e6a <__retarget_lock_init_recursive>
 8005ddc:	f7ff ff96 	bl	8005d0c <__sfp_lock_release>
 8005de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005de8:	6025      	str	r5, [r4, #0]
 8005dea:	61a5      	str	r5, [r4, #24]
 8005dec:	2208      	movs	r2, #8
 8005dee:	4629      	mov	r1, r5
 8005df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df4:	f7ff fd2c 	bl	8005850 <memset>
 8005df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e00:	4620      	mov	r0, r4
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e04:	3468      	adds	r4, #104	; 0x68
 8005e06:	e7d9      	b.n	8005dbc <__sfp+0x1c>
 8005e08:	2104      	movs	r1, #4
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ff62 	bl	8005cd4 <__sfmoreglue>
 8005e10:	4604      	mov	r4, r0
 8005e12:	6030      	str	r0, [r6, #0]
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1d5      	bne.n	8005dc4 <__sfp+0x24>
 8005e18:	f7ff ff78 	bl	8005d0c <__sfp_lock_release>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	e7ee      	b.n	8005e00 <__sfp+0x60>
 8005e22:	bf00      	nop
 8005e24:	08006920 	.word	0x08006920
 8005e28:	ffff0001 	.word	0xffff0001

08005e2c <_fwalk_reent>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	4606      	mov	r6, r0
 8005e32:	4688      	mov	r8, r1
 8005e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e38:	2700      	movs	r7, #0
 8005e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8005e42:	d505      	bpl.n	8005e50 <_fwalk_reent+0x24>
 8005e44:	6824      	ldr	r4, [r4, #0]
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d1f7      	bne.n	8005e3a <_fwalk_reent+0xe>
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e50:	89ab      	ldrh	r3, [r5, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d907      	bls.n	8005e66 <_fwalk_reent+0x3a>
 8005e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	d003      	beq.n	8005e66 <_fwalk_reent+0x3a>
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4630      	mov	r0, r6
 8005e62:	47c0      	blx	r8
 8005e64:	4307      	orrs	r7, r0
 8005e66:	3568      	adds	r5, #104	; 0x68
 8005e68:	e7e9      	b.n	8005e3e <_fwalk_reent+0x12>

08005e6a <__retarget_lock_init_recursive>:
 8005e6a:	4770      	bx	lr

08005e6c <__retarget_lock_acquire_recursive>:
 8005e6c:	4770      	bx	lr

08005e6e <__retarget_lock_release_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__swhatbuf_r>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	460e      	mov	r6, r1
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	b096      	sub	sp, #88	; 0x58
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	461d      	mov	r5, r3
 8005e80:	da07      	bge.n	8005e92 <__swhatbuf_r+0x22>
 8005e82:	2300      	movs	r3, #0
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	89b3      	ldrh	r3, [r6, #12]
 8005e88:	061a      	lsls	r2, r3, #24
 8005e8a:	d410      	bmi.n	8005eae <__swhatbuf_r+0x3e>
 8005e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e90:	e00e      	b.n	8005eb0 <__swhatbuf_r+0x40>
 8005e92:	466a      	mov	r2, sp
 8005e94:	f000 fc5e 	bl	8006754 <_fstat_r>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	dbf2      	blt.n	8005e82 <__swhatbuf_r+0x12>
 8005e9c:	9a01      	ldr	r2, [sp, #4]
 8005e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ea6:	425a      	negs	r2, r3
 8005ea8:	415a      	adcs	r2, r3
 8005eaa:	602a      	str	r2, [r5, #0]
 8005eac:	e7ee      	b.n	8005e8c <__swhatbuf_r+0x1c>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	b016      	add	sp, #88	; 0x58
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}

08005eb8 <__smakebuf_r>:
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ebc:	079d      	lsls	r5, r3, #30
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	d507      	bpl.n	8005ed4 <__smakebuf_r+0x1c>
 8005ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	6163      	str	r3, [r4, #20]
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	ab01      	add	r3, sp, #4
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f7ff ffca 	bl	8005e70 <__swhatbuf_r>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 f879 	bl	8005fd8 <_malloc_r>
 8005ee6:	b948      	cbnz	r0, 8005efc <__smakebuf_r+0x44>
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	059a      	lsls	r2, r3, #22
 8005eee:	d4ef      	bmi.n	8005ed0 <__smakebuf_r+0x18>
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	e7e3      	b.n	8005ec4 <__smakebuf_r+0xc>
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <__smakebuf_r+0x7c>)
 8005efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	6020      	str	r0, [r4, #0]
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	6163      	str	r3, [r4, #20]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	6120      	str	r0, [r4, #16]
 8005f12:	b15b      	cbz	r3, 8005f2c <__smakebuf_r+0x74>
 8005f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 fc2d 	bl	8006778 <_isatty_r>
 8005f1e:	b128      	cbz	r0, 8005f2c <__smakebuf_r+0x74>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	89a0      	ldrh	r0, [r4, #12]
 8005f2e:	4305      	orrs	r5, r0
 8005f30:	81a5      	strh	r5, [r4, #12]
 8005f32:	e7cd      	b.n	8005ed0 <__smakebuf_r+0x18>
 8005f34:	08005cc9 	.word	0x08005cc9

08005f38 <_free_r>:
 8005f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	d048      	beq.n	8005fd0 <_free_r+0x98>
 8005f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f42:	9001      	str	r0, [sp, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f1a1 0404 	sub.w	r4, r1, #4
 8005f4a:	bfb8      	it	lt
 8005f4c:	18e4      	addlt	r4, r4, r3
 8005f4e:	f000 fc35 	bl	80067bc <__malloc_lock>
 8005f52:	4a20      	ldr	r2, [pc, #128]	; (8005fd4 <_free_r+0x9c>)
 8005f54:	9801      	ldr	r0, [sp, #4]
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	4615      	mov	r5, r2
 8005f5a:	b933      	cbnz	r3, 8005f6a <_free_r+0x32>
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6014      	str	r4, [r2, #0]
 8005f60:	b003      	add	sp, #12
 8005f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f66:	f000 bc2f 	b.w	80067c8 <__malloc_unlock>
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	d90b      	bls.n	8005f86 <_free_r+0x4e>
 8005f6e:	6821      	ldr	r1, [r4, #0]
 8005f70:	1862      	adds	r2, r4, r1
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bf04      	itt	eq
 8005f76:	681a      	ldreq	r2, [r3, #0]
 8005f78:	685b      	ldreq	r3, [r3, #4]
 8005f7a:	6063      	str	r3, [r4, #4]
 8005f7c:	bf04      	itt	eq
 8005f7e:	1852      	addeq	r2, r2, r1
 8005f80:	6022      	streq	r2, [r4, #0]
 8005f82:	602c      	str	r4, [r5, #0]
 8005f84:	e7ec      	b.n	8005f60 <_free_r+0x28>
 8005f86:	461a      	mov	r2, r3
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b10b      	cbz	r3, 8005f90 <_free_r+0x58>
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x4e>
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	1855      	adds	r5, r2, r1
 8005f94:	42a5      	cmp	r5, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x78>
 8005f98:	6824      	ldr	r4, [r4, #0]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	d1dd      	bne.n	8005f60 <_free_r+0x28>
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	4421      	add	r1, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7d7      	b.n	8005f60 <_free_r+0x28>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x80>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	e7d3      	b.n	8005f60 <_free_r+0x28>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1949      	addeq	r1, r1, r5
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6054      	str	r4, [r2, #4]
 8005fce:	e7c7      	b.n	8005f60 <_free_r+0x28>
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	20000494 	.word	0x20000494

08005fd8 <_malloc_r>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	1ccd      	adds	r5, r1, #3
 8005fdc:	f025 0503 	bic.w	r5, r5, #3
 8005fe0:	3508      	adds	r5, #8
 8005fe2:	2d0c      	cmp	r5, #12
 8005fe4:	bf38      	it	cc
 8005fe6:	250c      	movcc	r5, #12
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	4606      	mov	r6, r0
 8005fec:	db01      	blt.n	8005ff2 <_malloc_r+0x1a>
 8005fee:	42a9      	cmp	r1, r5
 8005ff0:	d903      	bls.n	8005ffa <_malloc_r+0x22>
 8005ff2:	230c      	movs	r3, #12
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ffa:	f000 fbdf 	bl	80067bc <__malloc_lock>
 8005ffe:	4921      	ldr	r1, [pc, #132]	; (8006084 <_malloc_r+0xac>)
 8006000:	680a      	ldr	r2, [r1, #0]
 8006002:	4614      	mov	r4, r2
 8006004:	b99c      	cbnz	r4, 800602e <_malloc_r+0x56>
 8006006:	4f20      	ldr	r7, [pc, #128]	; (8006088 <_malloc_r+0xb0>)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	b923      	cbnz	r3, 8006016 <_malloc_r+0x3e>
 800600c:	4621      	mov	r1, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f000 fb2a 	bl	8006668 <_sbrk_r>
 8006014:	6038      	str	r0, [r7, #0]
 8006016:	4629      	mov	r1, r5
 8006018:	4630      	mov	r0, r6
 800601a:	f000 fb25 	bl	8006668 <_sbrk_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d123      	bne.n	800606a <_malloc_r+0x92>
 8006022:	230c      	movs	r3, #12
 8006024:	6033      	str	r3, [r6, #0]
 8006026:	4630      	mov	r0, r6
 8006028:	f000 fbce 	bl	80067c8 <__malloc_unlock>
 800602c:	e7e3      	b.n	8005ff6 <_malloc_r+0x1e>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	1b5b      	subs	r3, r3, r5
 8006032:	d417      	bmi.n	8006064 <_malloc_r+0x8c>
 8006034:	2b0b      	cmp	r3, #11
 8006036:	d903      	bls.n	8006040 <_malloc_r+0x68>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	441c      	add	r4, r3
 800603c:	6025      	str	r5, [r4, #0]
 800603e:	e004      	b.n	800604a <_malloc_r+0x72>
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	42a2      	cmp	r2, r4
 8006044:	bf0c      	ite	eq
 8006046:	600b      	streq	r3, [r1, #0]
 8006048:	6053      	strne	r3, [r2, #4]
 800604a:	4630      	mov	r0, r6
 800604c:	f000 fbbc 	bl	80067c8 <__malloc_unlock>
 8006050:	f104 000b 	add.w	r0, r4, #11
 8006054:	1d23      	adds	r3, r4, #4
 8006056:	f020 0007 	bic.w	r0, r0, #7
 800605a:	1ac2      	subs	r2, r0, r3
 800605c:	d0cc      	beq.n	8005ff8 <_malloc_r+0x20>
 800605e:	1a1b      	subs	r3, r3, r0
 8006060:	50a3      	str	r3, [r4, r2]
 8006062:	e7c9      	b.n	8005ff8 <_malloc_r+0x20>
 8006064:	4622      	mov	r2, r4
 8006066:	6864      	ldr	r4, [r4, #4]
 8006068:	e7cc      	b.n	8006004 <_malloc_r+0x2c>
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d0e3      	beq.n	800603c <_malloc_r+0x64>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4630      	mov	r0, r6
 8006078:	f000 faf6 	bl	8006668 <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d1dd      	bne.n	800603c <_malloc_r+0x64>
 8006080:	e7cf      	b.n	8006022 <_malloc_r+0x4a>
 8006082:	bf00      	nop
 8006084:	20000494 	.word	0x20000494
 8006088:	20000498 	.word	0x20000498

0800608c <__sfputc_r>:
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	b410      	push	{r4}
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	da08      	bge.n	80060aa <__sfputc_r+0x1e>
 8006098:	6994      	ldr	r4, [r2, #24]
 800609a:	42a3      	cmp	r3, r4
 800609c:	db01      	blt.n	80060a2 <__sfputc_r+0x16>
 800609e:	290a      	cmp	r1, #10
 80060a0:	d103      	bne.n	80060aa <__sfputc_r+0x1e>
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a6:	f7ff bc69 	b.w	800597c <__swbuf_r>
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	1c58      	adds	r0, r3, #1
 80060ae:	6010      	str	r0, [r2, #0]
 80060b0:	7019      	strb	r1, [r3, #0]
 80060b2:	4608      	mov	r0, r1
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <__sfputs_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	18d5      	adds	r5, r2, r3
 80060c4:	42ac      	cmp	r4, r5
 80060c6:	d101      	bne.n	80060cc <__sfputs_r+0x12>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e007      	b.n	80060dc <__sfputs_r+0x22>
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	463a      	mov	r2, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffda 	bl	800608c <__sfputc_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d1f3      	bne.n	80060c4 <__sfputs_r+0xa>
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e0 <_vfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	460d      	mov	r5, r1
 80060e6:	b09d      	sub	sp, #116	; 0x74
 80060e8:	4614      	mov	r4, r2
 80060ea:	4698      	mov	r8, r3
 80060ec:	4606      	mov	r6, r0
 80060ee:	b118      	cbz	r0, 80060f8 <_vfiprintf_r+0x18>
 80060f0:	6983      	ldr	r3, [r0, #24]
 80060f2:	b90b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x18>
 80060f4:	f7ff fe1c 	bl	8005d30 <__sinit>
 80060f8:	4b89      	ldr	r3, [pc, #548]	; (8006320 <_vfiprintf_r+0x240>)
 80060fa:	429d      	cmp	r5, r3
 80060fc:	d11b      	bne.n	8006136 <_vfiprintf_r+0x56>
 80060fe:	6875      	ldr	r5, [r6, #4]
 8006100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d405      	bmi.n	8006112 <_vfiprintf_r+0x32>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d402      	bmi.n	8006112 <_vfiprintf_r+0x32>
 800610c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800610e:	f7ff fead 	bl	8005e6c <__retarget_lock_acquire_recursive>
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	d501      	bpl.n	800611c <_vfiprintf_r+0x3c>
 8006118:	692b      	ldr	r3, [r5, #16]
 800611a:	b9eb      	cbnz	r3, 8006158 <_vfiprintf_r+0x78>
 800611c:	4629      	mov	r1, r5
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff fc7e 	bl	8005a20 <__swsetup_r>
 8006124:	b1c0      	cbz	r0, 8006158 <_vfiprintf_r+0x78>
 8006126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006128:	07dc      	lsls	r4, r3, #31
 800612a:	d50e      	bpl.n	800614a <_vfiprintf_r+0x6a>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	b01d      	add	sp, #116	; 0x74
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	4b7b      	ldr	r3, [pc, #492]	; (8006324 <_vfiprintf_r+0x244>)
 8006138:	429d      	cmp	r5, r3
 800613a:	d101      	bne.n	8006140 <_vfiprintf_r+0x60>
 800613c:	68b5      	ldr	r5, [r6, #8]
 800613e:	e7df      	b.n	8006100 <_vfiprintf_r+0x20>
 8006140:	4b79      	ldr	r3, [pc, #484]	; (8006328 <_vfiprintf_r+0x248>)
 8006142:	429d      	cmp	r5, r3
 8006144:	bf08      	it	eq
 8006146:	68f5      	ldreq	r5, [r6, #12]
 8006148:	e7da      	b.n	8006100 <_vfiprintf_r+0x20>
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	0598      	lsls	r0, r3, #22
 800614e:	d4ed      	bmi.n	800612c <_vfiprintf_r+0x4c>
 8006150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006152:	f7ff fe8c 	bl	8005e6e <__retarget_lock_release_recursive>
 8006156:	e7e9      	b.n	800612c <_vfiprintf_r+0x4c>
 8006158:	2300      	movs	r3, #0
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	2320      	movs	r3, #32
 800615e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006162:	f8cd 800c 	str.w	r8, [sp, #12]
 8006166:	2330      	movs	r3, #48	; 0x30
 8006168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800632c <_vfiprintf_r+0x24c>
 800616c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006170:	f04f 0901 	mov.w	r9, #1
 8006174:	4623      	mov	r3, r4
 8006176:	469a      	mov	sl, r3
 8006178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800617c:	b10a      	cbz	r2, 8006182 <_vfiprintf_r+0xa2>
 800617e:	2a25      	cmp	r2, #37	; 0x25
 8006180:	d1f9      	bne.n	8006176 <_vfiprintf_r+0x96>
 8006182:	ebba 0b04 	subs.w	fp, sl, r4
 8006186:	d00b      	beq.n	80061a0 <_vfiprintf_r+0xc0>
 8006188:	465b      	mov	r3, fp
 800618a:	4622      	mov	r2, r4
 800618c:	4629      	mov	r1, r5
 800618e:	4630      	mov	r0, r6
 8006190:	f7ff ff93 	bl	80060ba <__sfputs_r>
 8006194:	3001      	adds	r0, #1
 8006196:	f000 80aa 	beq.w	80062ee <_vfiprintf_r+0x20e>
 800619a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800619c:	445a      	add	r2, fp
 800619e:	9209      	str	r2, [sp, #36]	; 0x24
 80061a0:	f89a 3000 	ldrb.w	r3, [sl]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a2 	beq.w	80062ee <_vfiprintf_r+0x20e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061b4:	f10a 0a01 	add.w	sl, sl, #1
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	9307      	str	r3, [sp, #28]
 80061bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061c0:	931a      	str	r3, [sp, #104]	; 0x68
 80061c2:	4654      	mov	r4, sl
 80061c4:	2205      	movs	r2, #5
 80061c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ca:	4858      	ldr	r0, [pc, #352]	; (800632c <_vfiprintf_r+0x24c>)
 80061cc:	f7fa f810 	bl	80001f0 <memchr>
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	b9d8      	cbnz	r0, 800620c <_vfiprintf_r+0x12c>
 80061d4:	06d1      	lsls	r1, r2, #27
 80061d6:	bf44      	itt	mi
 80061d8:	2320      	movmi	r3, #32
 80061da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061de:	0713      	lsls	r3, r2, #28
 80061e0:	bf44      	itt	mi
 80061e2:	232b      	movmi	r3, #43	; 0x2b
 80061e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e8:	f89a 3000 	ldrb.w	r3, [sl]
 80061ec:	2b2a      	cmp	r3, #42	; 0x2a
 80061ee:	d015      	beq.n	800621c <_vfiprintf_r+0x13c>
 80061f0:	9a07      	ldr	r2, [sp, #28]
 80061f2:	4654      	mov	r4, sl
 80061f4:	2000      	movs	r0, #0
 80061f6:	f04f 0c0a 	mov.w	ip, #10
 80061fa:	4621      	mov	r1, r4
 80061fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006200:	3b30      	subs	r3, #48	; 0x30
 8006202:	2b09      	cmp	r3, #9
 8006204:	d94e      	bls.n	80062a4 <_vfiprintf_r+0x1c4>
 8006206:	b1b0      	cbz	r0, 8006236 <_vfiprintf_r+0x156>
 8006208:	9207      	str	r2, [sp, #28]
 800620a:	e014      	b.n	8006236 <_vfiprintf_r+0x156>
 800620c:	eba0 0308 	sub.w	r3, r0, r8
 8006210:	fa09 f303 	lsl.w	r3, r9, r3
 8006214:	4313      	orrs	r3, r2
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	46a2      	mov	sl, r4
 800621a:	e7d2      	b.n	80061c2 <_vfiprintf_r+0xe2>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	1d19      	adds	r1, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfbb      	ittet	lt
 8006228:	425b      	neglt	r3, r3
 800622a:	f042 0202 	orrlt.w	r2, r2, #2
 800622e:	9307      	strge	r3, [sp, #28]
 8006230:	9307      	strlt	r3, [sp, #28]
 8006232:	bfb8      	it	lt
 8006234:	9204      	strlt	r2, [sp, #16]
 8006236:	7823      	ldrb	r3, [r4, #0]
 8006238:	2b2e      	cmp	r3, #46	; 0x2e
 800623a:	d10c      	bne.n	8006256 <_vfiprintf_r+0x176>
 800623c:	7863      	ldrb	r3, [r4, #1]
 800623e:	2b2a      	cmp	r3, #42	; 0x2a
 8006240:	d135      	bne.n	80062ae <_vfiprintf_r+0x1ce>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	9203      	str	r2, [sp, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006252:	3402      	adds	r4, #2
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800633c <_vfiprintf_r+0x25c>
 800625a:	7821      	ldrb	r1, [r4, #0]
 800625c:	2203      	movs	r2, #3
 800625e:	4650      	mov	r0, sl
 8006260:	f7f9 ffc6 	bl	80001f0 <memchr>
 8006264:	b140      	cbz	r0, 8006278 <_vfiprintf_r+0x198>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	eba0 000a 	sub.w	r0, r0, sl
 800626c:	fa03 f000 	lsl.w	r0, r3, r0
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	4303      	orrs	r3, r0
 8006274:	3401      	adds	r4, #1
 8006276:	9304      	str	r3, [sp, #16]
 8006278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627c:	482c      	ldr	r0, [pc, #176]	; (8006330 <_vfiprintf_r+0x250>)
 800627e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006282:	2206      	movs	r2, #6
 8006284:	f7f9 ffb4 	bl	80001f0 <memchr>
 8006288:	2800      	cmp	r0, #0
 800628a:	d03f      	beq.n	800630c <_vfiprintf_r+0x22c>
 800628c:	4b29      	ldr	r3, [pc, #164]	; (8006334 <_vfiprintf_r+0x254>)
 800628e:	bb1b      	cbnz	r3, 80062d8 <_vfiprintf_r+0x1f8>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	3307      	adds	r3, #7
 8006294:	f023 0307 	bic.w	r3, r3, #7
 8006298:	3308      	adds	r3, #8
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	443b      	add	r3, r7
 80062a0:	9309      	str	r3, [sp, #36]	; 0x24
 80062a2:	e767      	b.n	8006174 <_vfiprintf_r+0x94>
 80062a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062a8:	460c      	mov	r4, r1
 80062aa:	2001      	movs	r0, #1
 80062ac:	e7a5      	b.n	80061fa <_vfiprintf_r+0x11a>
 80062ae:	2300      	movs	r3, #0
 80062b0:	3401      	adds	r4, #1
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	4619      	mov	r1, r3
 80062b6:	f04f 0c0a 	mov.w	ip, #10
 80062ba:	4620      	mov	r0, r4
 80062bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c0:	3a30      	subs	r2, #48	; 0x30
 80062c2:	2a09      	cmp	r2, #9
 80062c4:	d903      	bls.n	80062ce <_vfiprintf_r+0x1ee>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0c5      	beq.n	8006256 <_vfiprintf_r+0x176>
 80062ca:	9105      	str	r1, [sp, #20]
 80062cc:	e7c3      	b.n	8006256 <_vfiprintf_r+0x176>
 80062ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80062d2:	4604      	mov	r4, r0
 80062d4:	2301      	movs	r3, #1
 80062d6:	e7f0      	b.n	80062ba <_vfiprintf_r+0x1da>
 80062d8:	ab03      	add	r3, sp, #12
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	462a      	mov	r2, r5
 80062de:	4b16      	ldr	r3, [pc, #88]	; (8006338 <_vfiprintf_r+0x258>)
 80062e0:	a904      	add	r1, sp, #16
 80062e2:	4630      	mov	r0, r6
 80062e4:	f3af 8000 	nop.w
 80062e8:	4607      	mov	r7, r0
 80062ea:	1c78      	adds	r0, r7, #1
 80062ec:	d1d6      	bne.n	800629c <_vfiprintf_r+0x1bc>
 80062ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	d405      	bmi.n	8006300 <_vfiprintf_r+0x220>
 80062f4:	89ab      	ldrh	r3, [r5, #12]
 80062f6:	059a      	lsls	r2, r3, #22
 80062f8:	d402      	bmi.n	8006300 <_vfiprintf_r+0x220>
 80062fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fc:	f7ff fdb7 	bl	8005e6e <__retarget_lock_release_recursive>
 8006300:	89ab      	ldrh	r3, [r5, #12]
 8006302:	065b      	lsls	r3, r3, #25
 8006304:	f53f af12 	bmi.w	800612c <_vfiprintf_r+0x4c>
 8006308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630a:	e711      	b.n	8006130 <_vfiprintf_r+0x50>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <_vfiprintf_r+0x258>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4630      	mov	r0, r6
 8006318:	f000 f880 	bl	800641c <_printf_i>
 800631c:	e7e4      	b.n	80062e8 <_vfiprintf_r+0x208>
 800631e:	bf00      	nop
 8006320:	08006944 	.word	0x08006944
 8006324:	08006964 	.word	0x08006964
 8006328:	08006924 	.word	0x08006924
 800632c:	08006984 	.word	0x08006984
 8006330:	0800698e 	.word	0x0800698e
 8006334:	00000000 	.word	0x00000000
 8006338:	080060bb 	.word	0x080060bb
 800633c:	0800698a 	.word	0x0800698a

08006340 <_printf_common>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	4616      	mov	r6, r2
 8006346:	4699      	mov	r9, r3
 8006348:	688a      	ldr	r2, [r1, #8]
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006350:	4293      	cmp	r3, r2
 8006352:	bfb8      	it	lt
 8006354:	4613      	movlt	r3, r2
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800635c:	4607      	mov	r7, r0
 800635e:	460c      	mov	r4, r1
 8006360:	b10a      	cbz	r2, 8006366 <_printf_common+0x26>
 8006362:	3301      	adds	r3, #1
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	0699      	lsls	r1, r3, #26
 800636a:	bf42      	ittt	mi
 800636c:	6833      	ldrmi	r3, [r6, #0]
 800636e:	3302      	addmi	r3, #2
 8006370:	6033      	strmi	r3, [r6, #0]
 8006372:	6825      	ldr	r5, [r4, #0]
 8006374:	f015 0506 	ands.w	r5, r5, #6
 8006378:	d106      	bne.n	8006388 <_printf_common+0x48>
 800637a:	f104 0a19 	add.w	sl, r4, #25
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	6832      	ldr	r2, [r6, #0]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc26      	bgt.n	80063d6 <_printf_common+0x96>
 8006388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800638c:	1e13      	subs	r3, r2, #0
 800638e:	6822      	ldr	r2, [r4, #0]
 8006390:	bf18      	it	ne
 8006392:	2301      	movne	r3, #1
 8006394:	0692      	lsls	r2, r2, #26
 8006396:	d42b      	bmi.n	80063f0 <_printf_common+0xb0>
 8006398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800639c:	4649      	mov	r1, r9
 800639e:	4638      	mov	r0, r7
 80063a0:	47c0      	blx	r8
 80063a2:	3001      	adds	r0, #1
 80063a4:	d01e      	beq.n	80063e4 <_printf_common+0xa4>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	68e5      	ldr	r5, [r4, #12]
 80063aa:	6832      	ldr	r2, [r6, #0]
 80063ac:	f003 0306 	and.w	r3, r3, #6
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	bf08      	it	eq
 80063b4:	1aad      	subeq	r5, r5, r2
 80063b6:	68a3      	ldr	r3, [r4, #8]
 80063b8:	6922      	ldr	r2, [r4, #16]
 80063ba:	bf0c      	ite	eq
 80063bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c0:	2500      	movne	r5, #0
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bfc4      	itt	gt
 80063c6:	1a9b      	subgt	r3, r3, r2
 80063c8:	18ed      	addgt	r5, r5, r3
 80063ca:	2600      	movs	r6, #0
 80063cc:	341a      	adds	r4, #26
 80063ce:	42b5      	cmp	r5, r6
 80063d0:	d11a      	bne.n	8006408 <_printf_common+0xc8>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e008      	b.n	80063e8 <_printf_common+0xa8>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4652      	mov	r2, sl
 80063da:	4649      	mov	r1, r9
 80063dc:	4638      	mov	r0, r7
 80063de:	47c0      	blx	r8
 80063e0:	3001      	adds	r0, #1
 80063e2:	d103      	bne.n	80063ec <_printf_common+0xac>
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ec:	3501      	adds	r5, #1
 80063ee:	e7c6      	b.n	800637e <_printf_common+0x3e>
 80063f0:	18e1      	adds	r1, r4, r3
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	2030      	movs	r0, #48	; 0x30
 80063f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063fa:	4422      	add	r2, r4
 80063fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006404:	3302      	adds	r3, #2
 8006406:	e7c7      	b.n	8006398 <_printf_common+0x58>
 8006408:	2301      	movs	r3, #1
 800640a:	4622      	mov	r2, r4
 800640c:	4649      	mov	r1, r9
 800640e:	4638      	mov	r0, r7
 8006410:	47c0      	blx	r8
 8006412:	3001      	adds	r0, #1
 8006414:	d0e6      	beq.n	80063e4 <_printf_common+0xa4>
 8006416:	3601      	adds	r6, #1
 8006418:	e7d9      	b.n	80063ce <_printf_common+0x8e>
	...

0800641c <_printf_i>:
 800641c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	460c      	mov	r4, r1
 8006422:	4691      	mov	r9, r2
 8006424:	7e27      	ldrb	r7, [r4, #24]
 8006426:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006428:	2f78      	cmp	r7, #120	; 0x78
 800642a:	4680      	mov	r8, r0
 800642c:	469a      	mov	sl, r3
 800642e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006432:	d807      	bhi.n	8006444 <_printf_i+0x28>
 8006434:	2f62      	cmp	r7, #98	; 0x62
 8006436:	d80a      	bhi.n	800644e <_printf_i+0x32>
 8006438:	2f00      	cmp	r7, #0
 800643a:	f000 80d8 	beq.w	80065ee <_printf_i+0x1d2>
 800643e:	2f58      	cmp	r7, #88	; 0x58
 8006440:	f000 80a3 	beq.w	800658a <_printf_i+0x16e>
 8006444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800644c:	e03a      	b.n	80064c4 <_printf_i+0xa8>
 800644e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006452:	2b15      	cmp	r3, #21
 8006454:	d8f6      	bhi.n	8006444 <_printf_i+0x28>
 8006456:	a001      	add	r0, pc, #4	; (adr r0, 800645c <_printf_i+0x40>)
 8006458:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064c9 	.word	0x080064c9
 8006464:	08006445 	.word	0x08006445
 8006468:	08006445 	.word	0x08006445
 800646c:	08006445 	.word	0x08006445
 8006470:	08006445 	.word	0x08006445
 8006474:	080064c9 	.word	0x080064c9
 8006478:	08006445 	.word	0x08006445
 800647c:	08006445 	.word	0x08006445
 8006480:	08006445 	.word	0x08006445
 8006484:	08006445 	.word	0x08006445
 8006488:	080065d5 	.word	0x080065d5
 800648c:	080064f9 	.word	0x080064f9
 8006490:	080065b7 	.word	0x080065b7
 8006494:	08006445 	.word	0x08006445
 8006498:	08006445 	.word	0x08006445
 800649c:	080065f7 	.word	0x080065f7
 80064a0:	08006445 	.word	0x08006445
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	08006445 	.word	0x08006445
 80064ac:	08006445 	.word	0x08006445
 80064b0:	080065bf 	.word	0x080065bf
 80064b4:	680b      	ldr	r3, [r1, #0]
 80064b6:	1d1a      	adds	r2, r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	600a      	str	r2, [r1, #0]
 80064bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0a3      	b.n	8006610 <_printf_i+0x1f4>
 80064c8:	6825      	ldr	r5, [r4, #0]
 80064ca:	6808      	ldr	r0, [r1, #0]
 80064cc:	062e      	lsls	r6, r5, #24
 80064ce:	f100 0304 	add.w	r3, r0, #4
 80064d2:	d50a      	bpl.n	80064ea <_printf_i+0xce>
 80064d4:	6805      	ldr	r5, [r0, #0]
 80064d6:	600b      	str	r3, [r1, #0]
 80064d8:	2d00      	cmp	r5, #0
 80064da:	da03      	bge.n	80064e4 <_printf_i+0xc8>
 80064dc:	232d      	movs	r3, #45	; 0x2d
 80064de:	426d      	negs	r5, r5
 80064e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e4:	485e      	ldr	r0, [pc, #376]	; (8006660 <_printf_i+0x244>)
 80064e6:	230a      	movs	r3, #10
 80064e8:	e019      	b.n	800651e <_printf_i+0x102>
 80064ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064ee:	6805      	ldr	r5, [r0, #0]
 80064f0:	600b      	str	r3, [r1, #0]
 80064f2:	bf18      	it	ne
 80064f4:	b22d      	sxthne	r5, r5
 80064f6:	e7ef      	b.n	80064d8 <_printf_i+0xbc>
 80064f8:	680b      	ldr	r3, [r1, #0]
 80064fa:	6825      	ldr	r5, [r4, #0]
 80064fc:	1d18      	adds	r0, r3, #4
 80064fe:	6008      	str	r0, [r1, #0]
 8006500:	0628      	lsls	r0, r5, #24
 8006502:	d501      	bpl.n	8006508 <_printf_i+0xec>
 8006504:	681d      	ldr	r5, [r3, #0]
 8006506:	e002      	b.n	800650e <_printf_i+0xf2>
 8006508:	0669      	lsls	r1, r5, #25
 800650a:	d5fb      	bpl.n	8006504 <_printf_i+0xe8>
 800650c:	881d      	ldrh	r5, [r3, #0]
 800650e:	4854      	ldr	r0, [pc, #336]	; (8006660 <_printf_i+0x244>)
 8006510:	2f6f      	cmp	r7, #111	; 0x6f
 8006512:	bf0c      	ite	eq
 8006514:	2308      	moveq	r3, #8
 8006516:	230a      	movne	r3, #10
 8006518:	2100      	movs	r1, #0
 800651a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800651e:	6866      	ldr	r6, [r4, #4]
 8006520:	60a6      	str	r6, [r4, #8]
 8006522:	2e00      	cmp	r6, #0
 8006524:	bfa2      	ittt	ge
 8006526:	6821      	ldrge	r1, [r4, #0]
 8006528:	f021 0104 	bicge.w	r1, r1, #4
 800652c:	6021      	strge	r1, [r4, #0]
 800652e:	b90d      	cbnz	r5, 8006534 <_printf_i+0x118>
 8006530:	2e00      	cmp	r6, #0
 8006532:	d04d      	beq.n	80065d0 <_printf_i+0x1b4>
 8006534:	4616      	mov	r6, r2
 8006536:	fbb5 f1f3 	udiv	r1, r5, r3
 800653a:	fb03 5711 	mls	r7, r3, r1, r5
 800653e:	5dc7      	ldrb	r7, [r0, r7]
 8006540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006544:	462f      	mov	r7, r5
 8006546:	42bb      	cmp	r3, r7
 8006548:	460d      	mov	r5, r1
 800654a:	d9f4      	bls.n	8006536 <_printf_i+0x11a>
 800654c:	2b08      	cmp	r3, #8
 800654e:	d10b      	bne.n	8006568 <_printf_i+0x14c>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07df      	lsls	r7, r3, #31
 8006554:	d508      	bpl.n	8006568 <_printf_i+0x14c>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	6861      	ldr	r1, [r4, #4]
 800655a:	4299      	cmp	r1, r3
 800655c:	bfde      	ittt	le
 800655e:	2330      	movle	r3, #48	; 0x30
 8006560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006568:	1b92      	subs	r2, r2, r6
 800656a:	6122      	str	r2, [r4, #16]
 800656c:	f8cd a000 	str.w	sl, [sp]
 8006570:	464b      	mov	r3, r9
 8006572:	aa03      	add	r2, sp, #12
 8006574:	4621      	mov	r1, r4
 8006576:	4640      	mov	r0, r8
 8006578:	f7ff fee2 	bl	8006340 <_printf_common>
 800657c:	3001      	adds	r0, #1
 800657e:	d14c      	bne.n	800661a <_printf_i+0x1fe>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	b004      	add	sp, #16
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	4835      	ldr	r0, [pc, #212]	; (8006660 <_printf_i+0x244>)
 800658c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	680e      	ldr	r6, [r1, #0]
 8006594:	061f      	lsls	r7, r3, #24
 8006596:	f856 5b04 	ldr.w	r5, [r6], #4
 800659a:	600e      	str	r6, [r1, #0]
 800659c:	d514      	bpl.n	80065c8 <_printf_i+0x1ac>
 800659e:	07d9      	lsls	r1, r3, #31
 80065a0:	bf44      	itt	mi
 80065a2:	f043 0320 	orrmi.w	r3, r3, #32
 80065a6:	6023      	strmi	r3, [r4, #0]
 80065a8:	b91d      	cbnz	r5, 80065b2 <_printf_i+0x196>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	f023 0320 	bic.w	r3, r3, #32
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	2310      	movs	r3, #16
 80065b4:	e7b0      	b.n	8006518 <_printf_i+0xfc>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	f043 0320 	orr.w	r3, r3, #32
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	2378      	movs	r3, #120	; 0x78
 80065c0:	4828      	ldr	r0, [pc, #160]	; (8006664 <_printf_i+0x248>)
 80065c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065c6:	e7e3      	b.n	8006590 <_printf_i+0x174>
 80065c8:	065e      	lsls	r6, r3, #25
 80065ca:	bf48      	it	mi
 80065cc:	b2ad      	uxthmi	r5, r5
 80065ce:	e7e6      	b.n	800659e <_printf_i+0x182>
 80065d0:	4616      	mov	r6, r2
 80065d2:	e7bb      	b.n	800654c <_printf_i+0x130>
 80065d4:	680b      	ldr	r3, [r1, #0]
 80065d6:	6826      	ldr	r6, [r4, #0]
 80065d8:	6960      	ldr	r0, [r4, #20]
 80065da:	1d1d      	adds	r5, r3, #4
 80065dc:	600d      	str	r5, [r1, #0]
 80065de:	0635      	lsls	r5, r6, #24
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	d501      	bpl.n	80065e8 <_printf_i+0x1cc>
 80065e4:	6018      	str	r0, [r3, #0]
 80065e6:	e002      	b.n	80065ee <_printf_i+0x1d2>
 80065e8:	0671      	lsls	r1, r6, #25
 80065ea:	d5fb      	bpl.n	80065e4 <_printf_i+0x1c8>
 80065ec:	8018      	strh	r0, [r3, #0]
 80065ee:	2300      	movs	r3, #0
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	4616      	mov	r6, r2
 80065f4:	e7ba      	b.n	800656c <_printf_i+0x150>
 80065f6:	680b      	ldr	r3, [r1, #0]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	600a      	str	r2, [r1, #0]
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	6862      	ldr	r2, [r4, #4]
 8006600:	2100      	movs	r1, #0
 8006602:	4630      	mov	r0, r6
 8006604:	f7f9 fdf4 	bl	80001f0 <memchr>
 8006608:	b108      	cbz	r0, 800660e <_printf_i+0x1f2>
 800660a:	1b80      	subs	r0, r0, r6
 800660c:	6060      	str	r0, [r4, #4]
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	2300      	movs	r3, #0
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006618:	e7a8      	b.n	800656c <_printf_i+0x150>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d0ab      	beq.n	8006580 <_printf_i+0x164>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	079b      	lsls	r3, r3, #30
 800662c:	d413      	bmi.n	8006656 <_printf_i+0x23a>
 800662e:	68e0      	ldr	r0, [r4, #12]
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	4298      	cmp	r0, r3
 8006634:	bfb8      	it	lt
 8006636:	4618      	movlt	r0, r3
 8006638:	e7a4      	b.n	8006584 <_printf_i+0x168>
 800663a:	2301      	movs	r3, #1
 800663c:	4632      	mov	r2, r6
 800663e:	4649      	mov	r1, r9
 8006640:	4640      	mov	r0, r8
 8006642:	47d0      	blx	sl
 8006644:	3001      	adds	r0, #1
 8006646:	d09b      	beq.n	8006580 <_printf_i+0x164>
 8006648:	3501      	adds	r5, #1
 800664a:	68e3      	ldr	r3, [r4, #12]
 800664c:	9903      	ldr	r1, [sp, #12]
 800664e:	1a5b      	subs	r3, r3, r1
 8006650:	42ab      	cmp	r3, r5
 8006652:	dcf2      	bgt.n	800663a <_printf_i+0x21e>
 8006654:	e7eb      	b.n	800662e <_printf_i+0x212>
 8006656:	2500      	movs	r5, #0
 8006658:	f104 0619 	add.w	r6, r4, #25
 800665c:	e7f5      	b.n	800664a <_printf_i+0x22e>
 800665e:	bf00      	nop
 8006660:	08006995 	.word	0x08006995
 8006664:	080069a6 	.word	0x080069a6

08006668 <_sbrk_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_sbrk_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fa ffac 	bl	80015d0 <_sbrk>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_sbrk_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_sbrk_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200005a4 	.word	0x200005a4

08006688 <__sread>:
 8006688:	b510      	push	{r4, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	f000 f8a0 	bl	80067d4 <_read_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	bfab      	itete	ge
 8006698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800669a:	89a3      	ldrhlt	r3, [r4, #12]
 800669c:	181b      	addge	r3, r3, r0
 800669e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066a2:	bfac      	ite	ge
 80066a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066a6:	81a3      	strhlt	r3, [r4, #12]
 80066a8:	bd10      	pop	{r4, pc}

080066aa <__swrite>:
 80066aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	461f      	mov	r7, r3
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	05db      	lsls	r3, r3, #23
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4616      	mov	r6, r2
 80066ba:	d505      	bpl.n	80066c8 <__swrite+0x1e>
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	2302      	movs	r3, #2
 80066c2:	2200      	movs	r2, #0
 80066c4:	f000 f868 	bl	8006798 <_lseek_r>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	f000 b817 	b.w	8006710 <_write_r>

080066e2 <__sseek>:
 80066e2:	b510      	push	{r4, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 f855 	bl	8006798 <_lseek_r>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	bf15      	itete	ne
 80066f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066fe:	81a3      	strheq	r3, [r4, #12]
 8006700:	bf18      	it	ne
 8006702:	81a3      	strhne	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__sclose>:
 8006706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670a:	f000 b813 	b.w	8006734 <_close_r>
	...

08006710 <_write_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	; (8006730 <_write_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7f9 ff32 	bl	8000588 <_write>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_write_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_write_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	200005a4 	.word	0x200005a4

08006734 <_close_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d06      	ldr	r5, [pc, #24]	; (8006750 <_close_r+0x1c>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	f7fa ff11 	bl	8001566 <_close>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_close_r+0x1a>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_close_r+0x1a>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200005a4 	.word	0x200005a4

08006754 <_fstat_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d07      	ldr	r5, [pc, #28]	; (8006774 <_fstat_r+0x20>)
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	4611      	mov	r1, r2
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	f7fa ff0c 	bl	800157e <_fstat>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d102      	bne.n	8006770 <_fstat_r+0x1c>
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	b103      	cbz	r3, 8006770 <_fstat_r+0x1c>
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	bd38      	pop	{r3, r4, r5, pc}
 8006772:	bf00      	nop
 8006774:	200005a4 	.word	0x200005a4

08006778 <_isatty_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d06      	ldr	r5, [pc, #24]	; (8006794 <_isatty_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f7fa ff0b 	bl	800159e <_isatty>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_isatty_r+0x1a>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_isatty_r+0x1a>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200005a4 	.word	0x200005a4

08006798 <_lseek_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d07      	ldr	r5, [pc, #28]	; (80067b8 <_lseek_r+0x20>)
 800679c:	4604      	mov	r4, r0
 800679e:	4608      	mov	r0, r1
 80067a0:	4611      	mov	r1, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	602a      	str	r2, [r5, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f7fa ff04 	bl	80015b4 <_lseek>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_lseek_r+0x1e>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_lseek_r+0x1e>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	200005a4 	.word	0x200005a4

080067bc <__malloc_lock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_lock+0x8>)
 80067be:	f7ff bb55 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 80067c2:	bf00      	nop
 80067c4:	2000059c 	.word	0x2000059c

080067c8 <__malloc_unlock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_unlock+0x8>)
 80067ca:	f7ff bb50 	b.w	8005e6e <__retarget_lock_release_recursive>
 80067ce:	bf00      	nop
 80067d0:	2000059c 	.word	0x2000059c

080067d4 <_read_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_read_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fa fea2 	bl	800152c <_read>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_read_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_read_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200005a4 	.word	0x200005a4

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr
