
oled12864_I2C_hardWare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cc8  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009960  08009960  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009968  08009968  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800996c  0800996c  0001996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000538  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c0  200005c0  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011050  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245c  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  00034188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246a5  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f31a  00000000  00000000  00059385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6de6  00000000  00000000  0006869f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f485  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003994  00000000  00000000  0013f4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c80 	.word	0x08006c80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08006c80 	.word	0x08006c80

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <_write+0x24>)
 800059e:	f005 f88a 	bl	80056b6 <HAL_UART_Transmit>
	return len;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000568 	.word	0x20000568

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 faad 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f945 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fa3d 	bl	8000a3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 f9f1 	bl	80009a8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80005c6:	f000 fa19 	bl	80009fc <MX_DMA_Init>
  MX_I2C2_Init();
 80005ca:	f000 f9ad 	bl	8000928 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t res = oled_i2c_Init();
 80005ce:	f000 fde4 	bl	800119a <oled_i2c_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if (res != 0)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <main+0x36>
	  HAL_GPIO_TogglePin(LD1_Red_GPIO_Port, LD1_Red_Pin);
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4893      	ldr	r0, [pc, #588]	; (8000830 <main+0x280>)
 80005e2:	f002 f9b0 	bl	8002946 <HAL_GPIO_TogglePin>
  printf("%d\r\n", res);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4892      	ldr	r0, [pc, #584]	; (8000834 <main+0x284>)
 80005ec:	f005 fc26 	bl	8005e3c <iprintf>

  oled_Fill_Screen_Color(oled_color_White);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fe99 	bl	8001328 <oled_Fill_Screen_Color>

  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f001 fafd 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Pixel(1, 1, pixel_control_ON);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	2001      	movs	r0, #1
 8000604:	f000 feb8 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(2, 2, pixel_control_ON);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	2002      	movs	r0, #2
 800060e:	f000 feb3 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(3, 3, pixel_control_ON);
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	2003      	movs	r0, #3
 8000618:	f000 feae 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(4, 4, pixel_control_ON);
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	2004      	movs	r0, #4
 8000622:	f000 fea9 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(5, 5, pixel_control_ON);
 8000626:	2200      	movs	r2, #0
 8000628:	2105      	movs	r1, #5
 800062a:	2005      	movs	r0, #5
 800062c:	f000 fea4 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(6, 6, pixel_control_ON);
 8000630:	2200      	movs	r2, #0
 8000632:	2106      	movs	r1, #6
 8000634:	2006      	movs	r0, #6
 8000636:	f000 fe9f 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(7, 7, pixel_control_ON);
 800063a:	2200      	movs	r2, #0
 800063c:	2107      	movs	r1, #7
 800063e:	2007      	movs	r0, #7
 8000640:	f000 fe9a 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(8, 6, pixel_control_ON);
 8000644:	2200      	movs	r2, #0
 8000646:	2106      	movs	r1, #6
 8000648:	2008      	movs	r0, #8
 800064a:	f000 fe95 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(9, 5, pixel_control_ON);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	2009      	movs	r0, #9
 8000654:	f000 fe90 	bl	8001378 <oled_Draw_Pixel>
  oled_Draw_Pixel(10, 4, pixel_control_ON);
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fe8b 	bl	8001378 <oled_Draw_Pixel>
  res = oled_Update_Screen();
 8000662:	f000 fe43 	bl	80012ec <oled_Update_Screen>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if (res != 0)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <main+0xca>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	486e      	ldr	r0, [pc, #440]	; (8000830 <main+0x280>)
 8000676:	f002 f966 	bl	8002946 <HAL_GPIO_TogglePin>

  HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f001 fabb 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(0, 0, 'H', oled_Font_ASCII_08_16_courierNew);
 8000682:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <main+0x288>)
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2248      	movs	r2, #72	; 0x48
 800068c:	2100      	movs	r1, #0
 800068e:	2000      	movs	r0, #0
 8000690:	f000 ff24 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000694:	f000 fe2a 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 8000698:	20c8      	movs	r0, #200	; 0xc8
 800069a:	f001 faad 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(0, 16, 'G', oled_Font_ASCII_08_16_courierNew);
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <main+0x288>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2247      	movs	r2, #71	; 0x47
 80006a8:	2110      	movs	r1, #16
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 ff16 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80006b0:	f000 fe1c 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 80006b4:	20c8      	movs	r0, #200	; 0xc8
 80006b6:	f001 fa9f 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(0, 32, 'K', oled_Font_ASCII_08_16_courierNew);
 80006ba:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <main+0x288>)
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	9200      	str	r2, [sp, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	224b      	movs	r2, #75	; 0x4b
 80006c4:	2120      	movs	r1, #32
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 ff08 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80006cc:	f000 fe0e 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 80006d0:	20c8      	movs	r0, #200	; 0xc8
 80006d2:	f001 fa91 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(0, 48, 'Q', oled_Font_ASCII_08_16_courierNew);
 80006d6:	4b58      	ldr	r3, [pc, #352]	; (8000838 <main+0x288>)
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2251      	movs	r2, #81	; 0x51
 80006e0:	2130      	movs	r1, #48	; 0x30
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fefa 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80006e8:	f000 fe00 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 80006ec:	20c8      	movs	r0, #200	; 0xc8
 80006ee:	f001 fa83 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(8, 0, 'Z', oled_Font_ASCII_08_16_courierNew);
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x288>)
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	225a      	movs	r2, #90	; 0x5a
 80006fc:	2100      	movs	r1, #0
 80006fe:	2008      	movs	r0, #8
 8000700:	f000 feec 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000704:	f000 fdf2 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 8000708:	20c8      	movs	r0, #200	; 0xc8
 800070a:	f001 fa75 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(16, 0, '1', oled_Font_ASCII_08_16_courierNew);
 800070e:	4b4a      	ldr	r3, [pc, #296]	; (8000838 <main+0x288>)
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2231      	movs	r2, #49	; 0x31
 8000718:	2100      	movs	r1, #0
 800071a:	2010      	movs	r0, #16
 800071c:	f000 fede 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000720:	f000 fde4 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f001 fa67 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(24, 0, '~', oled_Font_ASCII_08_16_courierNew);
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <main+0x288>)
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	227e      	movs	r2, #126	; 0x7e
 8000734:	2100      	movs	r1, #0
 8000736:	2018      	movs	r0, #24
 8000738:	f000 fed0 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 800073c:	f000 fdd6 	bl	80012ec <oled_Update_Screen>
  HAL_Delay(200);
 8000740:	20c8      	movs	r0, #200	; 0xc8
 8000742:	f001 fa59 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(32, 0, '8', oled_Font_ASCII_08_16_courierNew);
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <main+0x288>)
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	9200      	str	r2, [sp, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	2020      	movs	r0, #32
 8000754:	f000 fec2 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000758:	f000 fdc8 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(200);
 800075c:	20c8      	movs	r0, #200	; 0xc8
 800075e:	f001 fa4b 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(40, 0, '4', oled_Font_ASCII_16_32_courierNew);
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <main+0x28c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	2028      	movs	r0, #40	; 0x28
 8000770:	f000 feb4 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000774:	f000 fdba 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(200);
 8000778:	20c8      	movs	r0, #200	; 0xc8
 800077a:	f001 fa3d 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(40, 32, '5', oled_Font_ASCII_16_32_courierNew);
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <main+0x28c>)
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	9200      	str	r2, [sp, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2235      	movs	r2, #53	; 0x35
 8000788:	2120      	movs	r1, #32
 800078a:	2028      	movs	r0, #40	; 0x28
 800078c:	f000 fea6 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 8000790:	f000 fdac 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(200);
 8000794:	20c8      	movs	r0, #200	; 0xc8
 8000796:	f001 fa2f 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(56, 0, '5', oled_Font_ASCII_12_24_courierNew);
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <main+0x290>)
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2235      	movs	r2, #53	; 0x35
 80007a4:	2100      	movs	r1, #0
 80007a6:	2038      	movs	r0, #56	; 0x38
 80007a8:	f000 fe98 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80007ac:	f000 fd9e 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(200);
 80007b0:	20c8      	movs	r0, #200	; 0xc8
 80007b2:	f001 fa21 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(56, 24, '5', oled_Font_ASCII_12_24_courierNew);
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0x290>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2235      	movs	r2, #53	; 0x35
 80007c0:	2118      	movs	r1, #24
 80007c2:	2038      	movs	r0, #56	; 0x38
 80007c4:	f000 fe8a 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80007c8:	f000 fd90 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(200);
 80007cc:	20c8      	movs	r0, #200	; 0xc8
 80007ce:	f001 fa13 	bl	8001bf8 <HAL_Delay>
  oled_Draw_Character(56, 44, '5', oled_Font_ASCII_12_24_courierNew);
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <main+0x290>)
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2235      	movs	r2, #53	; 0x35
 80007dc:	212c      	movs	r1, #44	; 0x2c
 80007de:	2038      	movs	r0, #56	; 0x38
 80007e0:	f000 fe7c 	bl	80014dc <oled_Draw_Character>
  oled_Update_Screen();
 80007e4:	f000 fd82 	bl	80012ec <oled_Update_Screen>

  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f001 fa04 	bl	8001bf8 <HAL_Delay>
  oled_Set_Display_Normal_Inverse(display_invers);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 fa86 	bl	8000d02 <oled_Set_Display_Normal_Inverse>

  HAL_Delay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fa:	f001 f9fd 	bl	8001bf8 <HAL_Delay>
  oled_Set_Display_Normal_Inverse(display_normal);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fa7f 	bl	8000d02 <oled_Set_Display_Normal_Inverse>

  printf("oled 12864 I2C code...\r\n");
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <main+0x294>)
 8000806:	f005 fb9f 	bl	8005f48 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <main+0x280>)
 8000810:	f002 f899 	bl	8002946 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f001 f9ef 	bl	8001bf8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <main+0x280>)
 8000820:	f002 f891 	bl	8002946 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8000824:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000828:	f001 f9e6 	bl	8001bf8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800082c:	e7ed      	b.n	800080a <main+0x25a>
 800082e:	bf00      	nop
 8000830:	40021c00 	.word	0x40021c00
 8000834:	08006c98 	.word	0x08006c98
 8000838:	20000000 	.word	0x20000000
 800083c:	20000010 	.word	0x20000010
 8000840:	20000008 	.word	0x20000008
 8000844:	08006ca0 	.word	0x08006ca0

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fa3e 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <SystemClock_Config+0xd8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <SystemClock_Config+0xd8>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemClock_Config+0xd8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xdc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a24      	ldr	r2, [pc, #144]	; (8000924 <SystemClock_Config+0xdc>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <SystemClock_Config+0xdc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008b8:	230f      	movs	r3, #15
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008bc:	23d8      	movs	r3, #216	; 0xd8
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 fa5d 	bl	8004d8c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f924 	bl	8000b24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008dc:	f004 fa06 	bl	8004cec <HAL_PWREx_EnableOverDrive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008e6:	f000 f91d 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2105      	movs	r1, #5
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fcb7 	bl	800527c <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000914:	f000 f906 	bl	8000b24 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C2_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C2_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C2_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C2_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C2_Init+0x74>)
 8000946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_I2C2_Init+0x74>)
 8000966:	f002 f809 	bl	800297c <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f8d8 	bl	8000b24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_I2C2_Init+0x74>)
 8000978:	f004 f93c 	bl	8004bf4 <HAL_I2CEx_ConfigAnalogFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 f8cf 	bl	8000b24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_I2C2_Init+0x74>)
 800098a:	f004 f96f 	bl	8004c6c <HAL_I2CEx_ConfigDigitalFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f8c6 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200004b4 	.word	0x200004b4
 80009a0:	40005800 	.word	0x40005800
 80009a4:	00061a80 	.word	0x00061a80

080009a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f004 fe1c 	bl	800561c <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f89b 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000568 	.word	0x20000568
 80009f8:	40011000 	.word	0x40011000

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	202f      	movs	r0, #47	; 0x2f
 8000a24:	f001 f9e7 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a28:	202f      	movs	r0, #47	; 0x2f
 8000a2a:	f001 fa00 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a5c:	f043 0320 	orr.w	r3, r3, #32
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0320 	and.w	r3, r3, #32
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xdc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000aca:	f001 ff23 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 8000ace:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ae8:	f001 fd68 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afe:	2304      	movs	r3, #4
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xe4>)
 8000b0a:	f001 fd57 	bl	80025bc <HAL_GPIO_Init>

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021c00 	.word	0x40021c00
 8000b20:	40020400 	.word	0x40020400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <oled_Write_CMD>:
 * @brief write indicate command to oled Register
 * @param cmd: [in] input command
 * @retval status 0:write cmd ok    1:write cmd error
 */
static uint8_t oled_Write_CMD(uint8_t cmd)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd);
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	2178      	movs	r1, #120	; 0x78
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <oled_Write_CMD+0x74>)
 8000b4a:	f002 f85b 	bl	8002c04 <HAL_I2C_Mem_Write_DMA>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d120      	bne.n	8000b9a <oled_Write_CMD+0x6a>
	{
		uint32_t startTime = HAL_GetTick();
 8000b58:	f001 f842 	bl	8001be0 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 8000b5e:	bf00      	nop
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <oled_Write_CMD+0x78>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d008      	beq.n	8000b7a <oled_Write_CMD+0x4a>
 8000b68:	f001 f83a 	bl	8001be0 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d9f2      	bls.n	8000b60 <oled_Write_CMD+0x30>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 8000b7a:	f001 f831 	bl	8001be0 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d901      	bls.n	8000b90 <oled_Write_CMD+0x60>
			return 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e005      	b.n	8000b9c <oled_Write_CMD+0x6c>
		oled_i2c_dma_mem_write_flag = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <oled_Write_CMD+0x78>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <oled_Write_CMD+0x6c>
		return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200004b4 	.word	0x200004b4
 8000ba8:	200000a6 	.word	0x200000a6

08000bac <oled_Write_Data>:
 * @param data[]: [in] input data array
 * @param len:	[in] input data array length
 * @retval status 0:write data ok    1:write data error
 */
static uint8_t oled_Write_Data(uint8_t data[], uint16_t len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len);
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	2178      	movs	r1, #120	; 0x78
 8000bc6:	4817      	ldr	r0, [pc, #92]	; (8000c24 <oled_Write_Data+0x78>)
 8000bc8:	f002 f81c 	bl	8002c04 <HAL_I2C_Mem_Write_DMA>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d120      	bne.n	8000c18 <oled_Write_Data+0x6c>
	{
		uint32_t startTime = HAL_GetTick();
 8000bd6:	f001 f803 	bl	8001be0 <HAL_GetTick>
 8000bda:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 8000bdc:	bf00      	nop
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <oled_Write_Data+0x7c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d008      	beq.n	8000bf8 <oled_Write_Data+0x4c>
 8000be6:	f000 fffb 	bl	8001be0 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d9f2      	bls.n	8000bde <oled_Write_Data+0x32>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 8000bf8:	f000 fff2 	bl	8001be0 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d901      	bls.n	8000c0e <oled_Write_Data+0x62>
			return 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e005      	b.n	8000c1a <oled_Write_Data+0x6e>
		oled_i2c_dma_mem_write_flag = 0;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <oled_Write_Data+0x7c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e000      	b.n	8000c1a <oled_Write_Data+0x6e>
		return 1;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200004b4 	.word	0x200004b4
 8000c28:	200000a6 	.word	0x200000a6

08000c2c <oled_Fill_GDDRAM_Buffer>:

/**
 * @brief use indicate color(on/off) to filling oled all pixels
 */
static void oled_Fill_GDDRAM_Buffer(oled_color_t color)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e00d      	b.n	8000c58 <oled_Fill_GDDRAM_Buffer+0x2c>
	{
		oled_display_buff[i] = (color == oled_color_Black)? (0x00): (0xFF);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <oled_Fill_GDDRAM_Buffer+0x1a>
 8000c42:	2100      	movs	r1, #0
 8000c44:	e000      	b.n	8000c48 <oled_Fill_GDDRAM_Buffer+0x1c>
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <oled_Fill_GDDRAM_Buffer+0x48>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	460a      	mov	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5e:	d3ed      	bcc.n	8000c3c <oled_Fill_GDDRAM_Buffer+0x10>
	}
	/* set buffer updated flag */
	oled.bufferUpdateFlag = 1;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <oled_Fill_GDDRAM_Buffer+0x4c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000a8 	.word	0x200000a8
 8000c78:	200000a4 	.word	0x200000a4

08000c7c <oled_Set_Contrast>:
 * 		[oled_cmd_display_contrast_1(0x81)  +  ContrastVal(default value = 0x7F)]
 * @param ContrastVal: [in] contrast value between 0 t0 255
 * @retval status 0:write command ok    1:write command error
 */
uint8_t oled_Set_Contrast(uint8_t ContrastVal)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
	// cmd Set Contrast 0x81
	res = oled_Write_CMD(oled_cmd_display_contrast_1);
 8000c8a:	2081      	movs	r0, #129	; 0x81
 8000c8c:	f7ff ff50 	bl	8000b30 <oled_Write_CMD>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <oled_Set_Contrast+0x22>
		return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00c      	b.n	8000cb8 <oled_Set_Contrast+0x3c>
	// The segment output current increases as the contrast step value increases
	oled_Write_CMD(ContrastVal) ? (res = 1) : (res = 0);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff45 	bl	8000b30 <oled_Write_CMD>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <oled_Set_Contrast+0x36>
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <oled_Set_Contrast+0x3a>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	return res;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <oled_Set_Display_Follow_RAM_Or_No>:
 * @NOTE If A5h command is issued, then by using A4h command, the display will resume to the GDDRAM contents.
 * @param RAM_Output: [in]	follow	ignore
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Follow_RAM_Or_No(RAM_Output_t RAM_Output)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]

	switch (RAM_Output) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <oled_Set_Display_Follow_RAM_Or_No+0x1a>
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d006      	beq.n	8000ce6 <oled_Set_Display_Follow_RAM_Or_No+0x26>
 8000cd8:	e00b      	b.n	8000cf2 <oled_Set_Display_Follow_RAM_Or_No+0x32>
		case RAM_output_follow:
			//	cmd 0xA4  A4h command enable display outputs according to the GDDRAM contents.
			//			  A4h command resumes the display from entire display “ON” stage.
			res = oled_Write_CMD(oled_cmd_display_following);
 8000cda:	20a4      	movs	r0, #164	; 0xa4
 8000cdc:	f7ff ff28 	bl	8000b30 <oled_Write_CMD>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
			break;
 8000ce4:	e008      	b.n	8000cf8 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		case RAM_output_ignore:
			// cmd 0xA5  A5h command forces the entire display to be “ON”, regardless of the contents of the display data RAM.
			res = oled_Write_CMD(oled_cmd_display_ignore);
 8000ce6:	20a5      	movs	r0, #165	; 0xa5
 8000ce8:	f7ff ff22 	bl	8000b30 <oled_Write_CMD>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf0:	e002      	b.n	8000cf8 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		default:
			res = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf6:	bf00      	nop
	}
	return res;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <oled_Set_Display_Normal_Inverse>:
 * 			while in inverse display a RAM data of 0 indicates an “ON” pixel
 * @param display_Way_t: [in]  display_normal	display_invers
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_Normal_Inverse(display_Way_t display_Way)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
	switch (display_Way) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <oled_Set_Display_Normal_Inverse+0x1a>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d006      	beq.n	8000d28 <oled_Set_Display_Normal_Inverse+0x26>
 8000d1a:	e00b      	b.n	8000d34 <oled_Set_Display_Normal_Inverse+0x32>
		case display_normal:
			//	cmd 0xA6  normal display
			res = oled_Write_CMD(oled_cmd_display_normal);
 8000d1c:	20a6      	movs	r0, #166	; 0xa6
 8000d1e:	f7ff ff07 	bl	8000b30 <oled_Write_CMD>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]

			break;
 8000d26:	e007      	b.n	8000d38 <oled_Set_Display_Normal_Inverse+0x36>
		case display_invers:
			//	cmd 0xA7  inverse display
			res = oled_Write_CMD(oled_cmd_display_inverse);
 8000d28:	20a7      	movs	r0, #167	; 0xa7
 8000d2a:	f7ff ff01 	bl	8000b30 <oled_Write_CMD>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]

			break;
 8000d32:	e001      	b.n	8000d38 <oled_Set_Display_Normal_Inverse+0x36>
		default:
			return 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <oled_Set_Display_Normal_Inverse+0x38>
	}
	return res;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <oled_Set_Display_ON_OFF>:
 * @NOTE  These single byte commands are used to turn the OLED panel display ON or OFF.
 * @param display_Switch_t: [in]  display_on	display_off
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_ON_OFF(display_Switch_t	display_Switch)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	switch (display_Switch) {
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <oled_Set_Display_ON_OFF+0x1a>
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d006      	beq.n	8000d68 <oled_Set_Display_ON_OFF+0x26>
 8000d5a:	e00b      	b.n	8000d74 <oled_Set_Display_ON_OFF+0x32>
		case display_on:
			//	cmd	AFh : Display ON
			res = oled_Write_CMD(oled_cmd_display_on);
 8000d5c:	20af      	movs	r0, #175	; 0xaf
 8000d5e:	f7ff fee7 	bl	8000b30 <oled_Write_CMD>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
			break;
 8000d66:	e007      	b.n	8000d78 <oled_Set_Display_ON_OFF+0x36>
		case display_off:
			//	cmd AEh : Display OFF
			res = oled_Write_CMD(oled_cmd_display_off);
 8000d68:	20ae      	movs	r0, #174	; 0xae
 8000d6a:	f7ff fee1 	bl	8000b30 <oled_Write_CMD>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
			break;
 8000d72:	e001      	b.n	8000d78 <oled_Set_Display_ON_OFF+0x36>
		default:
			return 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <oled_Set_Display_ON_OFF+0x38>
	}
	return res;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <oled_Set_Memory_Addr_Mode>:
 * 		       11b,Invalid
 * @param addr_Mode: [in] Memory Addressing Mode
 * @retval status 0:ok	1/2:error
 */
uint8_t oled_Set_Memory_Addr_Mode(addr_Mode_t	addr_Mode)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]

	// cmd Set Memory Addressing Mode (20h)
	res = oled_Write_CMD(oled_cmd_set_memory_addr_mode_1);
 8000d90:	2020      	movs	r0, #32
 8000d92:	f7ff fecd 	bl	8000b30 <oled_Write_CMD>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <oled_Set_Memory_Addr_Mode+0x22>
		return 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e01f      	b.n	8000de4 <oled_Set_Memory_Addr_Mode+0x62>
	switch (addr_Mode) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d012      	beq.n	8000dd0 <oled_Set_Memory_Addr_Mode+0x4e>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	dc16      	bgt.n	8000ddc <oled_Set_Memory_Addr_Mode+0x5a>
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <oled_Set_Memory_Addr_Mode+0x36>
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d006      	beq.n	8000dc4 <oled_Set_Memory_Addr_Mode+0x42>
 8000db6:	e011      	b.n	8000ddc <oled_Set_Memory_Addr_Mode+0x5a>
		case addr_mode_Horizontal:
			res = oled_Write_CMD((uint8_t)addr_mode_Horizontal);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff feb9 	bl	8000b30 <oled_Write_CMD>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
			break;
 8000dc2:	e00e      	b.n	8000de2 <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Vertical:
			res = oled_Write_CMD((uint8_t)addr_mode_Vertical);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff feb3 	bl	8000b30 <oled_Write_CMD>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
			break;
 8000dce:	e008      	b.n	8000de2 <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Page:
			res = oled_Write_CMD((uint8_t)addr_mode_Page);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fead 	bl	8000b30 <oled_Write_CMD>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
			break;
 8000dda:	e002      	b.n	8000de2 <oled_Set_Memory_Addr_Mode+0x60>
		default:
			res = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
			break;
 8000de0:	bf00      	nop
	}

	return res;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <oled_Set_Column_Start_End_Addr_HVMode>:
 * @param columnStartAddr: [in] column start address, Column start address, range : 0-127d, (RESET=0d)
 * @param columnEndAddr  : [in] column end   address, Column end   address, range : 0-127d, (RESET =127d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Column_Start_End_Addr_HVMode(uint8_t columnStartAddr, uint8_t columnEndAddr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

	if (columnStartAddr < 0 || columnStartAddr >= oled_H_Pix || columnEndAddr < 0 || columnEndAddr >= oled_H_Pix)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db03      	blt.n	8000e10 <oled_Set_Column_Start_End_Addr_HVMode+0x24>
 8000e08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da01      	bge.n	8000e14 <oled_Set_Column_Start_End_Addr_HVMode+0x28>
		return 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e028      	b.n	8000e66 <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	// cmd 0x21 Set Column Address range
	res = oled_Write_CMD(oled_cmd_set_col_addr_range_1);
 8000e14:	2021      	movs	r0, #33	; 0x21
 8000e16:	f7ff fe8b 	bl	8000b30 <oled_Write_CMD>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <oled_Set_Column_Start_End_Addr_HVMode+0x3c>
		return 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e01e      	b.n	8000e66 <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	//	Column start address A[6:0]	(RESET=0d)
	//	Column   end address B[6:0]	(RESET=127d)
	uint8_t startAddr = (columnStartAddr & 0b01111111);	//A[6:0]
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e2e:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (columnEndAddr   & 0b01111111);	//B[6:0]
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e36:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe78 	bl	8000b30 <oled_Write_CMD>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <oled_Set_Column_Start_End_Addr_HVMode+0x62>
		return 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00b      	b.n	8000e66 <oled_Set_Column_Start_End_Addr_HVMode+0x7a>
	res = oled_Write_CMD(endAddr);
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe6d 	bl	8000b30 <oled_Write_CMD>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <oled_Set_Column_Start_End_Addr_HVMode+0x78>
		return 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	return res;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <oled_Set_Page_Start_End_Addr_HVMode>:
 * @param pageStartAddr: [in] Page start Address, range : 0-7d,  (RESET = 0d)
 * @param pageEndAddr  : [in] Page end   Address, range : 0-7d,  (RESET = 7d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Page_Start_End_Addr_HVMode(uint8_t pageStartAddr, uint8_t pageEndAddr)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	460a      	mov	r2, r1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]

	if (pageStartAddr < 0 || pageStartAddr >= (oled_V_Pix/8) || pageEndAddr < 0 || pageEndAddr >= (oled_V_Pix/8))
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d802      	bhi.n	8000e8e <oled_Set_Page_Start_End_Addr_HVMode+0x20>
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	d901      	bls.n	8000e92 <oled_Set_Page_Start_End_Addr_HVMode+0x24>
		return 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e028      	b.n	8000ee4 <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	cmd 0x22	Set Page Address range
	res = oled_Write_CMD(oled_cmd_set_page_addr_range_1);
 8000e92:	2022      	movs	r0, #34	; 0x22
 8000e94:	f7ff fe4c 	bl	8000b30 <oled_Write_CMD>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <oled_Set_Page_Start_End_Addr_HVMode+0x38>
		return 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e01e      	b.n	8000ee4 <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	Page start address A[2:0]	(RESET=0)
	//	Page   end address B[2:0]	(RESET=7)
	uint8_t startAddr = (pageStartAddr & 0b00000111);	// A[2:0]
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (pageEndAddr   & 0b00000111);	// B[2:0}
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe39 	bl	8000b30 <oled_Write_CMD>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <oled_Set_Page_Start_End_Addr_HVMode+0x5e>
		return 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e00b      	b.n	8000ee4 <oled_Set_Page_Start_End_Addr_HVMode+0x76>
	res = oled_Write_CMD(endAddr);
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe2e 	bl	8000b30 <oled_Write_CMD>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <oled_Set_Page_Start_End_Addr_HVMode+0x74>
		return 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	return res;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <oled_Set_Display_Start_Line>:
 * 			With value equal to 1, DRAM row 1 is mapped to COM0 and so on.
 * @param startLineVal: [in] Set Display Start Line  0 ~ oled_V_Pix-1
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Start_Line(uint8_t startLineVal)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	if (startLineVal < 0 || startLineVal >= oled_V_Pix)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b3f      	cmp	r3, #63	; 0x3f
 8000efe:	d901      	bls.n	8000f04 <oled_Set_Display_Start_Line+0x18>
		return 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00f      	b.n	8000f24 <oled_Set_Display_Start_Line+0x38>

	//	cmd 0x40 ~ 0x70	Set Display Start Line
	uint8_t startLine = (startLineVal & 0b00011111) | oled_cmd_set_display_start_line;
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(startLine);
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe09 	bl	8000b30 <oled_Write_CMD>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]

	return res;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <oled_Set_Segment_Map>:
 * 		 This command only affects subsequent data input.  Data already stored in GDDRAM will have no changes.
 * @param	segment_Map_t:	[in] keep default or remap
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Segment_Map(segment_Map_t segment_Map)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]

	// cmd 0xA0/1 Set Segment Re-map
	uint8_t segmentMap = (segment_Map & 0x01) | oled_cmd_set_segment_remap_n;
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(segmentMap);
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fdee 	bl	8000b30 <oled_Write_CMD>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]

	return res;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <oled_Set_MUX_Ratio>:
 * 			from 16MUX to 64MUX, RESET= 111111b (i.e. 63d, 64MUX) A[5:0] from 0 to 14 are invalid entry
 * @param	MUX_Ratio	from 16 to 64
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_MUX_Ratio(uint8_t MUX_Ratio)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
	MUX_Ratio -= 1;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
	if (MUX_Ratio < 15 || MUX_Ratio >= 64)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b0e      	cmp	r3, #14
 8000f7a:	d902      	bls.n	8000f82 <oled_Set_MUX_Ratio+0x20>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f80:	d901      	bls.n	8000f86 <oled_Set_MUX_Ratio+0x24>
		return 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e014      	b.n	8000fb0 <oled_Set_MUX_Ratio+0x4e>
	//	cmd 0xA8  set multiplex ratio value (15 ~ 63)+1
	res = oled_Write_CMD(oled_cmd_set_multiplex_ratio_1);
 8000f86:	20a8      	movs	r0, #168	; 0xa8
 8000f88:	f7ff fdd2 	bl	8000b30 <oled_Write_CMD>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <oled_Set_MUX_Ratio+0x38>
		return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00a      	b.n	8000fb0 <oled_Set_MUX_Ratio+0x4e>

	//	cmd 15d~63d	multiplex ratio value
	uint8_t muxRatio = (MUX_Ratio & 0b00111111);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa0:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(muxRatio);
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fdc3 	bl	8000b30 <oled_Write_CMD>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
	return res;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <oled_Set_Com_Map_Output_Scan_Dirct>:
 * 	// remapping
 * @param com_Map: [in] com scan dirction (remap or not)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Com_Map_Output_Scan_Dirct(com_Map_t com_Map)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]

	switch (com_Map) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <oled_Set_Com_Map_Output_Scan_Dirct+0x1a>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d006      	beq.n	8000fde <oled_Set_Com_Map_Output_Scan_Dirct+0x26>
 8000fd0:	e00b      	b.n	8000fea <oled_Set_Com_Map_Output_Scan_Dirct+0x32>
		case com_normal_mapping:
			// cmd C0h	DDRAM row-0  ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_increase);
 8000fd2:	20c0      	movs	r0, #192	; 0xc0
 8000fd4:	f7ff fdac 	bl	8000b30 <oled_Write_CMD>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
			break;
 8000fdc:	e008      	b.n	8000ff0 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		case com_remapping:
			// cmd C8h	DDRAM row-63 ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_decrease);
 8000fde:	20c8      	movs	r0, #200	; 0xc8
 8000fe0:	f7ff fda6 	bl	8000b30 <oled_Write_CMD>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
			break;
 8000fe8:	e002      	b.n	8000ff0 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		default:
			res = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
			break;
 8000fee:	bf00      	nop
	}

	return res;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <oled_Set_Display_Offset_Vertical>:
 * @NOTE	this is a double byte command
 * @param offsetVal: [in] vertical offset value
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Offset_Vertical(uint8_t offsetVal)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

	if (offsetVal < 0 || offsetVal >= oled_V_Pix)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b3f      	cmp	r3, #63	; 0x3f
 800100c:	d901      	bls.n	8001012 <oled_Set_Display_Offset_Vertical+0x18>
		return 1;
 800100e:	2301      	movs	r3, #1
 8001010:	e014      	b.n	800103c <oled_Set_Display_Offset_Vertical+0x42>

	//	cmd 0xD3 set display offset (DDRAM oled_row indicate line start)
	res = oled_Write_CMD(oled_cmd_set_display_offset_1);
 8001012:	20d3      	movs	r0, #211	; 0xd3
 8001014:	f7ff fd8c 	bl	8000b30 <oled_Write_CMD>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <oled_Set_Display_Offset_Vertical+0x2c>
		return 1;
 8001022:	2301      	movs	r3, #1
 8001024:	e00a      	b.n	800103c <oled_Set_Display_Offset_Vertical+0x42>

	// cmd set offset line value from 0 to 63
	uint8_t offsetValue = (offsetVal & 0b00111111);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800102c:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(offsetValue);
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd7d 	bl	8000b30 <oled_Write_CMD>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]

	return res;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <oled_Set_Com_Pins_Hardware_Config>:
 * @NOTE  This command sets the COM signals pin configuration to match the OLED panel hardware layout.
 * @param common_Hardware_Config: [in] common config parameters
 * @retval staus	0:ok	1:error
 */
uint8_t oled_Set_Com_Pins_Hardware_Config(common_Hardware_Config_t common_Hardware_Config)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

	// cmd Set COM Pins Hardware Configuration (DAh)
	res = oled_Write_CMD(oled_cmd_set_com_pins_1);
 8001052:	20da      	movs	r0, #218	; 0xda
 8001054:	f7ff fd6c 	bl	8000b30 <oled_Write_CMD>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <oled_Set_Com_Pins_Hardware_Config+0x22>
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e006      	b.n	8001074 <oled_Set_Com_Pins_Hardware_Config+0x30>

	res = oled_Write_CMD(common_Hardware_Config);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fd61 	bl	8000b30 <oled_Write_CMD>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]

	return res;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <oled_Set_Display_Clock_Parameter>:
 * @param Fosc: [in] D5h A[7:4] The higher the register setting results in higher frequency
 * @param factor_D: [in] division factor D    DCLK=FOSC/D (D -> D5h A[3:0]bit)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Clock_Parameter(uint8_t Fosc, uint8_t factor_D)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

	if (factor_D < 0 || factor_D > 15 || Fosc < 0 || Fosc > 15)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d802      	bhi.n	800109c <oled_Set_Display_Clock_Parameter+0x20>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d901      	bls.n	80010a0 <oled_Set_Display_Clock_Parameter+0x24>
		return 1;
 800109c:	2301      	movs	r3, #1
 800109e:	e018      	b.n	80010d2 <oled_Set_Display_Clock_Parameter+0x56>

	uint8_t clockVal = (Fosc << 4) |factor_D;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	73bb      	strb	r3, [r7, #14]
	// cmd 0xD5	Set Display Clock Divide Ratio/ Oscillator Frequency
	res = oled_Write_CMD(oled_cmd_set_clk_div_1);
 80010b0:	20d5      	movs	r0, #213	; 0xd5
 80010b2:	f7ff fd3d 	bl	8000b30 <oled_Write_CMD>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <oled_Set_Display_Clock_Parameter+0x48>
		return 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e006      	b.n	80010d2 <oled_Set_Display_Clock_Parameter+0x56>
	res = oled_Write_CMD(clockVal);
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fd32 	bl	8000b30 <oled_Write_CMD>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

	return res;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <oled_Set_PreCharge_Period>:
 * @param phase_2_period: [in] Phase 2 period of up to 15 DCLK clocks 0 is invalid entry   (RESET=2h)
 * 			1 ~ 15 A[7:4]
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_PreCharge_Period(uint8_t phase_1_period, uint8_t phase_2_period)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	460a      	mov	r2, r1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]

	if (phase_1_period < 1 || phase_1_period > 15 || phase_2_period < 1 || phase_2_period > 15)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d008      	beq.n	8001106 <oled_Set_PreCharge_Period+0x2c>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d805      	bhi.n	8001106 <oled_Set_PreCharge_Period+0x2c>
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <oled_Set_PreCharge_Period+0x2c>
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d901      	bls.n	800110a <oled_Set_PreCharge_Period+0x30>
		return 1;
 8001106:	2301      	movs	r3, #1
 8001108:	e018      	b.n	800113c <oled_Set_PreCharge_Period+0x62>

	uint8_t phasePeriod = (phase_2_period << 4) | phase_1_period;
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	b25a      	sxtb	r2, r3
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4313      	orrs	r3, r2
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(oled_cmd_set_pre_charge_period_1);
 800111a:	20d9      	movs	r0, #217	; 0xd9
 800111c:	f7ff fd08 	bl	8000b30 <oled_Write_CMD>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <oled_Set_PreCharge_Period+0x54>
		return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e006      	b.n	800113c <oled_Set_PreCharge_Period+0x62>
	res = oled_Write_CMD(phasePeriod);
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fcfd 	bl	8000b30 <oled_Write_CMD>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

	return res;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <oled_Set_Charge_Pump>:
 * 			  |- AFh -> Display ON
 * @param	charge_pumt_control: [in] charge pump enable or disable
 * @retval	status	0:ok	>0:error
 */
uint8_t oled_Set_Charge_Pump(charge_pump_control_t	charge_pumt_control)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

	//	cmd 0x8D	Charge Pump Setting
	res = oled_Write_CMD(oled_cmd_set_charge_pump_1);
 8001152:	208d      	movs	r0, #141	; 0x8d
 8001154:	f7ff fcec 	bl	8000b30 <oled_Write_CMD>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <oled_Set_Charge_Pump+0x22>
		return 1;
 8001162:	2301      	movs	r3, #1
 8001164:	e015      	b.n	8001192 <oled_Set_Charge_Pump+0x4e>

	switch (charge_pumt_control) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <oled_Set_Charge_Pump+0x2e>
 800116c:	2b01      	cmp	r3, #1
 800116e:	d006      	beq.n	800117e <oled_Set_Charge_Pump+0x3a>
 8001170:	e00b      	b.n	800118a <oled_Set_Charge_Pump+0x46>
		case charge_pump_disable:
			res = oled_Write_CMD(0x10);
 8001172:	2010      	movs	r0, #16
 8001174:	f7ff fcdc 	bl	8000b30 <oled_Write_CMD>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]
			break;
 800117c:	e008      	b.n	8001190 <oled_Set_Charge_Pump+0x4c>
		case charge_pump_enable:
			res = oled_Write_CMD(0x14);
 800117e:	2014      	movs	r0, #20
 8001180:	f7ff fcd6 	bl	8000b30 <oled_Write_CMD>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
			break;
 8001188:	e002      	b.n	8001190 <oled_Set_Charge_Pump+0x4c>
		default:
			res = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
			break;
 800118e:	bf00      	nop
	}

	return res;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <oled_i2c_Init>:
/**
  * @brief oled 12864 init
  * @retval status 0:init ok    1:init error
  */
uint8_t oled_i2c_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
	// status flag
	int status = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]

	// Wait for the screen to boot
	HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a8:	f000 fd26 	bl	8001bf8 <HAL_Delay>

	// oled initial process
	/* 0.Display Off */
	status += oled_Set_Display_ON_OFF(display_off);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fdc8 	bl	8000d42 <oled_Set_Display_ON_OFF>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]

	/* 1.Memory address mode : horizontal mode */
	status += oled_Set_Memory_Addr_Mode(addr_mode_Horizontal);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fde0 	bl	8000d82 <oled_Set_Memory_Addr_Mode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	607b      	str	r3, [r7, #4]
	status += oled_Set_Page_Start_End_Addr_HVMode(0, 7);
 80011cc:	2107      	movs	r1, #7
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fe4d 	bl	8000e6e <oled_Set_Page_Start_End_Addr_HVMode>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	607b      	str	r3, [r7, #4]
	status += oled_Set_Column_Start_End_Addr_HVMode(0, 127);
 80011de:	217f      	movs	r1, #127	; 0x7f
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fe03 	bl	8000dec <oled_Set_Column_Start_End_Addr_HVMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	607b      	str	r3, [r7, #4]

	/* 2.Set MUX Ratio */
	status += oled_Set_MUX_Ratio(oled_V_Pix);
 80011f0:	2040      	movs	r0, #64	; 0x40
 80011f2:	f7ff feb6 	bl	8000f62 <oled_Set_MUX_Ratio>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]

	/* 3.Set Display Offset */
	status += oled_Set_Display_Offset_Vertical(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fefa 	bl	8000ffa <oled_Set_Display_Offset_Vertical>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	607b      	str	r3, [r7, #4]

	/* 4.Set Display Start Line */
	status += oled_Set_Display_Start_Line(0);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fe6b 	bl	8000eec <oled_Set_Display_Start_Line>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	607b      	str	r3, [r7, #4]

	/* 5.Set Segment Re-map */
	status += oled_Set_Segment_Map(segment_remapping);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fe83 	bl	8000f2c <oled_Set_Segment_Map>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	607b      	str	r3, [r7, #4]

	/* 6.Set COM Output Scan Direction (map) */
	status += oled_Set_Com_Map_Output_Scan_Dirct(com_remapping);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff fec1 	bl	8000fb8 <oled_Set_Com_Map_Output_Scan_Dirct>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	607b      	str	r3, [r7, #4]

	/* 7. Set Pre-charge Period value phase1(1~15) phase2(1~15) */
	status += oled_Set_PreCharge_Period(2, 2);
 8001240:	2102      	movs	r1, #2
 8001242:	2002      	movs	r0, #2
 8001244:	f7ff ff49 	bl	80010da <oled_Set_PreCharge_Period>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	607b      	str	r3, [r7, #4]

	/* 8.Set COM Pins hardware configuration */
	status += oled_Set_Com_Pins_Hardware_Config(common_alternative_config|common_disable_left_right_remap);
 8001252:	2012      	movs	r0, #18
 8001254:	f7ff fef6 	bl	8001044 <oled_Set_Com_Pins_Hardware_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	607b      	str	r3, [r7, #4]

	/* 9.Set Contrast Control */
	status += oled_Set_Contrast(0x7F);
 8001262:	207f      	movs	r0, #127	; 0x7f
 8001264:	f7ff fd0a 	bl	8000c7c <oled_Set_Contrast>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	607b      	str	r3, [r7, #4]

	/* 10.Disable Entire Display On */
	status += oled_Set_Display_Follow_RAM_Or_No(RAM_output_follow);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fd24 	bl	8000cc0 <oled_Set_Display_Follow_RAM_Or_No>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	607b      	str	r3, [r7, #4]

	/* 11.Set Normal Display */
	status += oled_Set_Display_Normal_Inverse(display_normal);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fd3d 	bl	8000d02 <oled_Set_Display_Normal_Inverse>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	607b      	str	r3, [r7, #4]

	/* 12.Set Osc Frequency */
	status += oled_Set_Display_Clock_Parameter(0x0F, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	200f      	movs	r0, #15
 8001296:	f7ff fef1 	bl	800107c <oled_Set_Display_Clock_Parameter>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]

	/* 13.Enable charge pump regulator */
	status += oled_Set_Charge_Pump(charge_pump_enable);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ff4d 	bl	8001144 <oled_Set_Charge_Pump>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	607b      	str	r3, [r7, #4]

	/* 14.clear whole screen write 0 to GDDRAM */
	status += oled_Fill_Screen_Color(oled_color_Black);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f837 	bl	8001328 <oled_Fill_Screen_Color>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	607b      	str	r3, [r7, #4]

	/* 15.Display On */
	status += oled_Set_Display_ON_OFF(display_on);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fd3c 	bl	8000d42 <oled_Set_Display_ON_OFF>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	607b      	str	r3, [r7, #4]

//	oled_Clear_Screen();

	if (status != 0)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <oled_i2c_Init+0x146>
		return status;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e000      	b.n	80012e2 <oled_i2c_Init+0x148>

	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <oled_Update_Screen>:
/**
 * @brief write oled_cmd_display_contrast_1 into oled GDDRAM
 * @retval status 0:write ok	1:write error
 */
uint8_t oled_Update_Screen(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	if (oled.bufferUpdateFlag == 0)
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <oled_Update_Screen+0x34>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <oled_Update_Screen+0x12>
		return 0;	// don't need updata screen
 80012fa:	2300      	movs	r3, #0
 80012fc:	e00c      	b.n	8001318 <oled_Update_Screen+0x2c>

	uint8_t res = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]
	res = oled_Write_Data(oled_display_buff, sizeof(oled_display_buff));
 8001302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <oled_Update_Screen+0x38>)
 8001308:	f7ff fc50 	bl	8000bac <oled_Write_Data>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]

    oled.bufferUpdateFlag = 0;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <oled_Update_Screen+0x34>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
    return res;
 8001316:	79fb      	ldrb	r3, [r7, #7]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000a4 	.word	0x200000a4
 8001324:	200000a8 	.word	0x200000a8

08001328 <oled_Fill_Screen_Color>:
 * 		  include oled screen update
 * @param	oled_color: [in] oled_color_black	oled_color_white
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Fill_Screen_Color(oled_color_t	oled_color)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]

	//	set oled_buffer value
	switch (oled_color) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <oled_Fill_Screen_Color+0x1a>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d007      	beq.n	8001350 <oled_Fill_Screen_Color+0x28>
 8001340:	e00d      	b.n	800135e <oled_Fill_Screen_Color+0x36>
		case oled_color_Black:
			oled_Fill_GDDRAM_Buffer(oled_color_Black);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fc72 	bl	8000c2c <oled_Fill_GDDRAM_Buffer>
			oled.clear_GDDRAM_Use_0_1_Flag = 0;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <oled_Fill_Screen_Color+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
			break;
 800134e:	e008      	b.n	8001362 <oled_Fill_Screen_Color+0x3a>
		case oled_color_White:
			oled_Fill_GDDRAM_Buffer(oled_color_White);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fc6b 	bl	8000c2c <oled_Fill_GDDRAM_Buffer>
			oled.clear_GDDRAM_Use_0_1_Flag = 1;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <oled_Fill_Screen_Color+0x4c>)
 8001358:	2201      	movs	r2, #1
 800135a:	705a      	strb	r2, [r3, #1]
			break;
 800135c:	e001      	b.n	8001362 <oled_Fill_Screen_Color+0x3a>
		default:
			return 1;
 800135e:	2301      	movs	r3, #1
 8001360:	e004      	b.n	800136c <oled_Fill_Screen_Color+0x44>
			break;
	}


	//	update screen, write oled_buffer to GDDRAM
	res = oled_Update_Screen();
 8001362:	f7ff ffc3 	bl	80012ec <oled_Update_Screen>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]

	return res;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000a4 	.word	0x200000a4

08001378 <oled_Draw_Pixel>:
 * @param	py: [in] y value (0 ~ 63)  row		[< oled_V_pix]
 * @param	pixel_control:	[in] pixel_control_ON	pixel_control_OFF
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Draw_Pixel(uint8_t px, uint8_t py, pixel_control_t pixel_control)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	460b      	mov	r3, r1
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	4613      	mov	r3, r2
 8001388:	717b      	strb	r3, [r7, #5]
	if (px < 0 || px >= oled_H_Pix || py < 0 || py >= oled_V_Pix)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db02      	blt.n	8001398 <oled_Draw_Pixel+0x20>
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d901      	bls.n	800139c <oled_Draw_Pixel+0x24>
		return 1;
 8001398:	2301      	movs	r3, #1
 800139a:	e094      	b.n	80014c6 <oled_Draw_Pixel+0x14e>
	// Set the (x,y) pixel value to the opposite of the background value
	if (pixel_control == pixel_control_ON)
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d145      	bne.n	800142e <oled_Draw_Pixel+0xb6>
	{
		//	GDDRAM buffer -> oled display	1:on	0:off(background)
		if (oled.clear_GDDRAM_Use_0_1_Flag == 0)
 80013a2:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11a      	bne.n	80013e0 <oled_Draw_Pixel+0x68>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] |=  (0x01 << (py%8));
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	4413      	add	r3, r2
 80013b8:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <oled_Draw_Pixel+0x160>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b259      	sxtb	r1, r3
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	4603      	mov	r3, r0
 80013d4:	01db      	lsls	r3, r3, #7
 80013d6:	4413      	add	r3, r2
 80013d8:	b2c9      	uxtb	r1, r1
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <oled_Draw_Pixel+0x160>)
 80013dc:	54d1      	strb	r1, [r2, r3]
 80013de:	e022      	b.n	8001426 <oled_Draw_Pixel+0xae>
		}
		//	GDDRAM buffer -> oled display	0:on	1:off(background)
		else if (oled.clear_GDDRAM_Use_0_1_Flag == 1)
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d11c      	bne.n	8001422 <oled_Draw_Pixel+0xaa>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] &= ~(0x01 << (py%8));
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	4413      	add	r3, r2
 80013f6:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <oled_Draw_Pixel+0x160>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4013      	ands	r3, r2
 8001410:	b259      	sxtb	r1, r3
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	4603      	mov	r3, r0
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	4413      	add	r3, r2
 800141a:	b2c9      	uxtb	r1, r1
 800141c:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <oled_Draw_Pixel+0x160>)
 800141e:	54d1      	strb	r1, [r2, r3]
 8001420:	e001      	b.n	8001426 <oled_Draw_Pixel+0xae>
		}
		else {
			return 1;
 8001422:	2301      	movs	r3, #1
 8001424:	e04f      	b.n	80014c6 <oled_Draw_Pixel+0x14e>
		}
		// set buffer updata flag value
		oled.bufferUpdateFlag = 1;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e04a      	b.n	80014c4 <oled_Draw_Pixel+0x14c>
	}
	// set (x,y) pixel value equal background value
	else if (pixel_control == pixel_control_OFF)
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d145      	bne.n	80014c0 <oled_Draw_Pixel+0x148>
	{
		//	GDDRAM buffer -> oled display	1:on	0:off(background)
		if (oled.clear_GDDRAM_Use_0_1_Flag == 0)
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11c      	bne.n	8001476 <oled_Draw_Pixel+0xfe>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] &=  ~(0x01 << (py%8));
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4603      	mov	r3, r0
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4413      	add	r3, r2
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <oled_Draw_Pixel+0x160>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4013      	ands	r3, r2
 8001464:	b259      	sxtb	r1, r3
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	4603      	mov	r3, r0
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	4413      	add	r3, r2
 800146e:	b2c9      	uxtb	r1, r1
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <oled_Draw_Pixel+0x160>)
 8001472:	54d1      	strb	r1, [r2, r3]
 8001474:	e020      	b.n	80014b8 <oled_Draw_Pixel+0x140>
		}
		//	GDDRAM buffer -> oled display	0:on	1:off(background)
		else if (oled.clear_GDDRAM_Use_0_1_Flag == 1)
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d11a      	bne.n	80014b4 <oled_Draw_Pixel+0x13c>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] |=  (0x01 << (py%8));
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	b2d8      	uxtb	r0, r3
 8001486:	4603      	mov	r3, r0
 8001488:	01db      	lsls	r3, r3, #7
 800148a:	4413      	add	r3, r2
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <oled_Draw_Pixel+0x160>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	b25a      	sxtb	r2, r3
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b259      	sxtb	r1, r3
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	4603      	mov	r3, r0
 80014a8:	01db      	lsls	r3, r3, #7
 80014aa:	4413      	add	r3, r2
 80014ac:	b2c9      	uxtb	r1, r1
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <oled_Draw_Pixel+0x160>)
 80014b0:	54d1      	strb	r1, [r2, r3]
 80014b2:	e001      	b.n	80014b8 <oled_Draw_Pixel+0x140>
		}
		else {
			return 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e006      	b.n	80014c6 <oled_Draw_Pixel+0x14e>
		}
		// set buffer updata flag value
		oled.bufferUpdateFlag = 1;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <oled_Draw_Pixel+0x15c>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <oled_Draw_Pixel+0x14c>
	}
	else
	{
		return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <oled_Draw_Pixel+0x14e>
	}

	return 0;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	200000a8 	.word	0x200000a8

080014dc <oled_Draw_Character>:
 * @param	ch:	[in] character to be displayed
 * @param	fontX: [in] using font
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Draw_Character(uint8_t px, uint8_t py, unsigned char ch, oledFont_t fontX)
{
 80014dc:	b082      	sub	sp, #8
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	460b      	mov	r3, r1
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	4613      	mov	r3, r2
 80014f0:	717b      	strb	r3, [r7, #5]
	if (px < 0 || px >= oled_H_Pix || py < 0 || py >= oled_V_Pix)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db02      	blt.n	8001500 <oled_Draw_Character+0x24>
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	2b3f      	cmp	r3, #63	; 0x3f
 80014fe:	d901      	bls.n	8001504 <oled_Draw_Character+0x28>
		return 1;
 8001500:	2301      	movs	r3, #1
 8001502:	e0dc      	b.n	80016be <oled_Draw_Character+0x1e2>
//			py = 0;
//			px = px + fontX.font_Width;
		}

	// write character to GDDRAMBuffer
	uint8_t i, startPx = px, startPy = py;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	74bb      	strb	r3, [r7, #18]
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	747b      	strb	r3, [r7, #17]
	uint8_t chVal = ch - ' ';
 800150c:	797b      	ldrb	r3, [r7, #5]
 800150e:	3b20      	subs	r3, #32
 8001510:	743b      	strb	r3, [r7, #16]
	uint8_t * ptrFont = malloc(sizeof(uint8_t) * fontX.font_Width * fontX.font_Height / 8);
 8001512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001516:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	4618      	mov	r0, r3
 8001522:	f004 fbbb 	bl	8005c9c <malloc>
 8001526:	4603      	mov	r3, r0
 8001528:	60fb      	str	r3, [r7, #12]
	memcpy(ptrFont, &(fontX.font_Array[chVal * (fontX.font_Width * fontX.font_Height / 8)]), (fontX.font_Width * fontX.font_Height / 8));
 800152a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152c:	7c39      	ldrb	r1, [r7, #16]
 800152e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001532:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001536:	fb00 f303 	mul.w	r3, r0, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	da00      	bge.n	8001540 <oled_Draw_Character+0x64>
 800153e:	3307      	adds	r3, #7
 8001540:	10db      	asrs	r3, r3, #3
 8001542:	fb03 f301 	mul.w	r3, r3, r1
 8001546:	18d1      	adds	r1, r2, r3
 8001548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800154c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	da00      	bge.n	800155a <oled_Draw_Character+0x7e>
 8001558:	3307      	adds	r3, #7
 800155a:	10db      	asrs	r3, r3, #3
 800155c:	461a      	mov	r2, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f004 fbac 	bl	8005cbc <memcpy>
	for (i = 0; i < (fontX.font_Height / 8); i++)	// scan font char height pixel -> n Byte
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
 8001568:	e04a      	b.n	8001600 <oled_Draw_Character+0x124>
	{
		px = startPx;
 800156a:	7cbb      	ldrb	r3, [r7, #18]
 800156c:	71fb      	strb	r3, [r7, #7]

		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 800156e:	2300      	movs	r3, #0
 8001570:	75bb      	strb	r3, [r7, #22]
 8001572:	e03d      	b.n	80015f0 <oled_Draw_Character+0x114>
		{
			py = startPy + i * 8;
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	7c7b      	ldrb	r3, [r7, #17]
 800157c:	4413      	add	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]

			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]
 8001584:	e02b      	b.n	80015de <oled_Draw_Character+0x102>
			{
				if (((*(ptrFont + i * fontX.font_Width + j)) & (0x01 << k)) == (0x01 << k))
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	461a      	mov	r2, r3
 8001592:	7dbb      	ldrb	r3, [r7, #22]
 8001594:	4413      	add	r3, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	7d7b      	ldrb	r3, [r7, #21]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	ea01 0203 	and.w	r2, r1, r3
 80015aa:	7d7b      	ldrb	r3, [r7, #21]
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d108      	bne.n	80015c8 <oled_Draw_Character+0xec>
				{
					oled_Draw_Pixel(px, py++, pixel_control_ON);
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	71ba      	strb	r2, [r7, #6]
 80015bc:	79f8      	ldrb	r0, [r7, #7]
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fed9 	bl	8001378 <oled_Draw_Pixel>
 80015c6:	e007      	b.n	80015d8 <oled_Draw_Character+0xfc>
				}
				else {
					oled_Draw_Pixel(px, py++, pixel_control_OFF);
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	71ba      	strb	r2, [r7, #6]
 80015ce:	79f8      	ldrb	r0, [r7, #7]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fed0 	bl	8001378 <oled_Draw_Pixel>
			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 80015d8:	7d7b      	ldrb	r3, [r7, #21]
 80015da:	3301      	adds	r3, #1
 80015dc:	757b      	strb	r3, [r7, #21]
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	d9d0      	bls.n	8001586 <oled_Draw_Character+0xaa>
				}
			}
			// next column
			px++;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	3301      	adds	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	3301      	adds	r3, #1
 80015ee:	75bb      	strb	r3, [r7, #22]
 80015f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015f4:	7dba      	ldrb	r2, [r7, #22]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3bc      	bcc.n	8001574 <oled_Draw_Character+0x98>
	for (i = 0; i < (fontX.font_Height / 8); i++)	// scan font char height pixel -> n Byte
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	3301      	adds	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]
 8001600:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	7dfa      	ldrb	r2, [r7, #23]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3ad      	bcc.n	800156a <oled_Draw_Character+0x8e>
		}
	}

	// less than one page section
	i = fontX.font_Height % 8;
 800160e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	75fb      	strb	r3, [r7, #23]
	if (i != 0)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d04b      	beq.n	80016b6 <oled_Draw_Character+0x1da>
	{
		px = startPx;
 800161e:	7cbb      	ldrb	r3, [r7, #18]
 8001620:	71fb      	strb	r3, [r7, #7]

		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 8001622:	2300      	movs	r3, #0
 8001624:	753b      	strb	r3, [r7, #20]
 8001626:	e041      	b.n	80016ac <oled_Draw_Character+0x1d0>
		{
			py = startPy + (fontX.font_Height / 8) * 8;
 8001628:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	7c7b      	ldrb	r3, [r7, #17]
 8001636:	4413      	add	r3, r2
 8001638:	71bb      	strb	r3, [r7, #6]

			for (uint8_t k = 0; k < i; k++)	// Split each pixel data
 800163a:	2300      	movs	r3, #0
 800163c:	74fb      	strb	r3, [r7, #19]
 800163e:	e02b      	b.n	8001698 <oled_Draw_Character+0x1bc>
			{
				if (((*(ptrFont + i * fontX.font_Width + j)) & (0x01 << k)) == (0x01 << k))
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	461a      	mov	r2, r3
 800164c:	7d3b      	ldrb	r3, [r7, #20]
 800164e:	4413      	add	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	7cfb      	ldrb	r3, [r7, #19]
 800165a:	2201      	movs	r2, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	ea01 0203 	and.w	r2, r1, r3
 8001664:	7cfb      	ldrb	r3, [r7, #19]
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	429a      	cmp	r2, r3
 800166e:	d108      	bne.n	8001682 <oled_Draw_Character+0x1a6>
				{
					oled_Draw_Pixel(px, py++, pixel_control_ON);
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	71ba      	strb	r2, [r7, #6]
 8001676:	79f8      	ldrb	r0, [r7, #7]
 8001678:	2200      	movs	r2, #0
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fe7c 	bl	8001378 <oled_Draw_Pixel>
 8001680:	e007      	b.n	8001692 <oled_Draw_Character+0x1b6>
				}
				else {
					oled_Draw_Pixel(px, py++, pixel_control_OFF);
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	71ba      	strb	r2, [r7, #6]
 8001688:	79f8      	ldrb	r0, [r7, #7]
 800168a:	2201      	movs	r2, #1
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fe73 	bl	8001378 <oled_Draw_Pixel>
			for (uint8_t k = 0; k < i; k++)	// Split each pixel data
 8001692:	7cfb      	ldrb	r3, [r7, #19]
 8001694:	3301      	adds	r3, #1
 8001696:	74fb      	strb	r3, [r7, #19]
 8001698:	7cfa      	ldrb	r2, [r7, #19]
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3cf      	bcc.n	8001640 <oled_Draw_Character+0x164>
				}
			}
			// next column
			px++;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	3301      	adds	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 80016a6:	7d3b      	ldrb	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	753b      	strb	r3, [r7, #20]
 80016ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016b0:	7d3a      	ldrb	r2, [r7, #20]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3b8      	bcc.n	8001628 <oled_Draw_Character+0x14c>
		}
	}


	free(ptrFont);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f004 faf8 	bl	8005cac <free>
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c8:	b002      	add	sp, #8
 80016ca:	4770      	bx	lr

080016cc <HAL_I2C_MemTxCpltCallback>:
/**
 *	Men write transfer complete callback
 */
#if	oled_i2c_dma
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	printf("mem tx cplt call back\r\n");
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_I2C_MemTxCpltCallback+0x28>)
 80016d6:	f004 fc37 	bl	8005f48 <puts>
	if (hi2c->Instance == oled_i2c.Instance)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_I2C_MemTxCpltCallback+0x2c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d102      	bne.n	80016ec <HAL_I2C_MemTxCpltCallback+0x20>
	{
		oled_i2c_dma_mem_write_flag = 1;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_I2C_MemTxCpltCallback+0x30>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
	}
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	08006d70 	.word	0x08006d70
 80016f8:	200004b4 	.word	0x200004b4
 80016fc:	200000a6 	.word	0x200000a6

08001700 <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == oled_i2c.Instance)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_I2C_ErrorCallback+0x24>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d102      	bne.n	800171a <HAL_I2C_ErrorCallback+0x1a>
		printf("i2c DMA error...\r\n");
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <HAL_I2C_ErrorCallback+0x28>)
 8001716:	f004 fc17 	bl	8005f48 <puts>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200004b4 	.word	0x200004b4
 8001728:	08006d88 	.word	0x08006d88

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_I2C_MspInit+0xf0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d161      	bne.n	8001862 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ba:	2303      	movs	r3, #3
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017be:	2312      	movs	r3, #18
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ca:	2304      	movs	r3, #4
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4827      	ldr	r0, [pc, #156]	; (8001874 <HAL_I2C_MspInit+0xf8>)
 80017d6:	f000 fef1 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a23      	ldr	r2, [pc, #140]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_I2C_MspInit+0xf4>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_I2C_MspInit+0x100>)
 80017fa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 80017fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001802:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001816:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001836:	4810      	ldr	r0, [pc, #64]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 8001838:	f000 fb14 	bl	8001e64 <HAL_DMA_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001842:	f7ff f96f 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_I2C_MspInit+0xfc>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2021      	movs	r0, #33	; 0x21
 8001858:	f000 facd 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800185c:	2021      	movs	r0, #33	; 0x21
 800185e:	f000 fae6 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40005800 	.word	0x40005800
 8001870:	40023800 	.word	0x40023800
 8001874:	40021400 	.word	0x40021400
 8001878:	20000508 	.word	0x20000508
 800187c:	400260b8 	.word	0x400260b8

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_UART_MspInit+0x84>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12c      	bne.n	80018fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ec:	2307      	movs	r3, #7
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0x8c>)
 80018f8:	f000 fe60 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40011000 	.word	0x40011000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 f92c 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <I2C2_EV_IRQHandler+0x10>)
 800196a:	f001 faad 	bl	8002ec8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004b4 	.word	0x200004b4

08001978 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA1_Stream7_IRQHandler+0x10>)
 800197e:	f000 fb99 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000508 	.word	0x20000508

0800198c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	4601      	mov	r1, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <_read+0x12>
	}

return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ee:	605a      	str	r2, [r3, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_isatty>:

int _isatty(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	return 1;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f004 f8f2 	bl	8005c48 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20030000 	.word	0x20030000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	200004a8 	.word	0x200004a8
 8001a98:	200005c0 	.word	0x200005c0

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001adc:	4c0b      	ldr	r4, [pc, #44]	; (8001b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd7 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f004 f8b1 	bl	8005c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7fe fd5d 	bl	80005b0 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001af8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b04:	08009970 	.word	0x08009970
  ldr r2, =_sbss
 8001b08:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b0c:	200005c0 	.word	0x200005c0

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94f 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fdf0 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f967 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92f 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000018 	.word	0x20000018
 8001bb0:	20000020 	.word	0x20000020
 8001bb4:	2000001c 	.word	0x2000001c

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000020 	.word	0x20000020
 8001bdc:	200005ac 	.word	0x200005ac

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200005ac 	.word	0x200005ac

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000020 	.word	0x20000020

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feb6 	bl	8001be0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fe9d 	bl	8001be0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 faab 	bl	80024c4 <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa62 	bl	8002458 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9f4 	bl	80023fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_DMA_IRQHandler+0x258>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a92      	ldr	r2, [pc, #584]	; (8002310 <HAL_DMA_IRQHandler+0x25c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808e 	beq.w	8002352 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8086 	beq.w	8002352 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07d      	beq.n	80023be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e078      	b.n	80023be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d030      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02b      	b.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d027      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e022      	b.n	8002352 <HAL_DMA_IRQHandler+0x29e>
 800230c:	20000018 	.word	0x20000018
 8002310:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0210 	bic.w	r2, r2, #16
 8002330:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d022      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	429a      	cmp	r2, r3
 8002388:	d307      	bcc.n	800239a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f2      	bne.n	800237e <HAL_DMA_IRQHandler+0x2ca>
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800239a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	e000      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023be:	bf00      	nop
    }
  }
}
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop

080023c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d6:	b2db      	uxtb	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d108      	bne.n	800243c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800243a:	e007      	b.n	800244c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3b10      	subs	r3, #16
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <DMA_CalcBaseAndBitshift+0x64>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d909      	bls.n	800249a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	659a      	str	r2, [r3, #88]	; 0x58
 8002498:	e007      	b.n	80024aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	aaaaaaab 	.word	0xaaaaaaab
 80024c0:	080098c0 	.word	0x080098c0

080024c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11f      	bne.n	800251e <DMA_CheckFifoParam+0x5a>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d856      	bhi.n	8002592 <DMA_CheckFifoParam+0xce>
 80024e4:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <DMA_CheckFifoParam+0x28>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	0800250f 	.word	0x0800250f
 80024f4:	080024fd 	.word	0x080024fd
 80024f8:	08002593 	.word	0x08002593
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d046      	beq.n	8002596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250c:	e043      	b.n	8002596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002516:	d140      	bne.n	800259a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251c:	e03d      	b.n	800259a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	d121      	bne.n	800256c <DMA_CheckFifoParam+0xa8>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d837      	bhi.n	800259e <DMA_CheckFifoParam+0xda>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <DMA_CheckFifoParam+0x70>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002545 	.word	0x08002545
 8002538:	0800254b 	.word	0x0800254b
 800253c:	08002545 	.word	0x08002545
 8002540:	0800255d 	.word	0x0800255d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e030      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d025      	beq.n	80025a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255a:	e022      	b.n	80025a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002564:	d11f      	bne.n	80025a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800256a:	e01c      	b.n	80025a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d903      	bls.n	800257a <DMA_CheckFifoParam+0xb6>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d003      	beq.n	8002580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002578:	e018      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      break;
 800257e:	e015      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      break;
 8002590:	e00b      	b.n	80025aa <DMA_CheckFifoParam+0xe6>
      break;
 8002592:	bf00      	nop
 8002594:	e00a      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e008      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e006      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e004      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
 80025a4:	e002      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;   
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
    }
  } 
  
  return status; 
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e177      	b.n	80028c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8166 	bne.w	80028c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	2b02      	cmp	r3, #2
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d017      	beq.n	80026ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80c0 	beq.w	80028c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_GPIO_Init+0x324>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275e:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_GPIO_Init+0x328>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d037      	beq.n	80027fa <HAL_GPIO_Init+0x23e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x330>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_GPIO_Init+0x23a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x236>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_GPIO_Init+0x338>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x232>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a54      	ldr	r2, [pc, #336]	; (80028f8 <HAL_GPIO_Init+0x33c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a53      	ldr	r2, [pc, #332]	; (80028fc <HAL_GPIO_Init+0x340>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x22a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x344>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_GPIO_Init+0x348>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x222>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x34c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x350>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027d2:	2309      	movs	r3, #9
 80027d4:	e012      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027d6:	230a      	movs	r3, #10
 80027d8:	e010      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x328>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_GPIO_Init+0x354>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x354>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_GPIO_Init+0x354>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae84 	bls.w	80025d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40022400 	.word	0x40022400
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002958:	887a      	ldrh	r2, [r7, #2]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	041a      	lsls	r2, r3, #16
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43d9      	mvns	r1, r3
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	400b      	ands	r3, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12b      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe feea 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f002 fdf4 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a81      	ldr	r2, [pc, #516]	; (8002bf0 <HAL_I2C_Init+0x274>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_I2C_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_I2C_Init+0x27c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0e7      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a78      	ldr	r2, [pc, #480]	; (8002bfc <HAL_I2C_Init+0x280>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a69      	ldr	r2, [pc, #420]	; (8002c00 <HAL_I2C_Init+0x284>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	495c      	ldr	r1, [pc, #368]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d819      	bhi.n	8002ab8 <HAL_I2C_Init+0x13c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a98:	400b      	ands	r3, r1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_I2C_Init+0x138>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	e051      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e04f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_I2C_Init+0x168>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_I2C_Init+0x18e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x196>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e022      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_I2C_Init+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6911      	ldr	r1, [r2, #16]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	000186a0 	.word	0x000186a0
 8002bf4:	001e847f 	.word	0x001e847f
 8002bf8:	003d08ff 	.word	0x003d08ff
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	460b      	mov	r3, r1
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c22:	f7fe ffdd 	bl	8001be0 <HAL_GetTick>
 8002c26:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 813a 	bne.w	8002eaa <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c36:	4b9f      	ldr	r3, [pc, #636]	; (8002eb4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	4a9e      	ldr	r2, [pc, #632]	; (8002eb8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0a1a      	lsrs	r2, r3, #8
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d116      	bne.n	8002c8a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e110      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d0db      	beq.n	8002c50 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Mem_Write_DMA+0xa2>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e102      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d007      	beq.n	8002ccc <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a6c      	ldr	r2, [pc, #432]	; (8002ebc <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002d0e:	897a      	ldrh	r2, [r7, #10]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80a9 	beq.w	8002e82 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02a      	beq.n	8002d8e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	4a60      	ldr	r2, [pc, #384]	; (8002ec0 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8002d46:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	2200      	movs	r2, #0
 8002d66:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	4619      	mov	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3310      	adds	r3, #16
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	f7ff f91f 	bl	8001fc0 <HAL_DMA_Start_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002d86:	7efb      	ldrb	r3, [r7, #27]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d166      	bne.n	8002e5a <HAL_I2C_Mem_Write_DMA+0x256>
 8002d8c:	e013      	b.n	8002db6 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07a      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002db6:	88f8      	ldrh	r0, [r7, #6]
 8002db8:	893a      	ldrh	r2, [r7, #8]
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2323      	movs	r3, #35	; 0x23
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 fb30 	bl	800442c <I2C_RequestMemoryWrite>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d022      	beq.n	8002e18 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f94a 	bl	8002070 <HAL_DMA_Abort_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	2200      	movs	r2, #0
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e049      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e54:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e028      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e014      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000018 	.word	0x20000018
 8002eb8:	14f8b589 	.word	0x14f8b589
 8002ebc:	ffff0000 	.word	0xffff0000
 8002ec0:	08004559 	.word	0x08004559
 8002ec4:	08004703 	.word	0x08004703

08002ec8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d003      	beq.n	8002f00 <HAL_I2C_EV_IRQHandler+0x38>
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	f040 80c1 	bne.w	8003082 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f20:	d003      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x62>
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_EV_IRQHandler+0x66>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x68>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f000 8132 	beq.w	800319a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x92>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	0a5b      	lsrs	r3, r3, #9
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f001 fe36 	bl	8004bbe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fcbe 	bl	80038d4 <I2C_Master_SB>
 8002f58:	e092      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_I2C_EV_IRQHandler+0xb2>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	0a5b      	lsrs	r3, r3, #9
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fd34 	bl	80039e0 <I2C_Master_ADD10>
 8002f78:	e082      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_I2C_EV_IRQHandler+0xd2>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	0a5b      	lsrs	r3, r3, #9
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fd4e 	bl	8003a34 <I2C_Master_ADDR>
 8002f98:	e072      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03b      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	f000 80f3 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	09db      	lsrs	r3, r3, #7
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00f      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f938 	bl	8003252 <I2C_MasterTransmit_TXE>
 8002fe2:	e04d      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80d6 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80cf 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003000:	7bbb      	ldrb	r3, [r7, #14]
 8003002:	2b21      	cmp	r3, #33	; 0x21
 8003004:	d103      	bne.n	800300e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f9bf 	bl	800338a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300c:	e0c7      	b.n	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	f040 80c4 	bne.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa2d 	bl	8003476 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800301c:	e0bf      	b.n	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302c:	f000 80b7 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00f      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0x194>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	0a9b      	lsrs	r3, r3, #10
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0x194>
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 faa2 	bl	800359e <I2C_MasterReceive_RXNE>
 800305a:	e011      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 809a 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8093 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb41 	bl	8003700 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307e:	e08e      	b.n	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003080:	e08d      	b.n	800319e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e007      	b.n	80030a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d012      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0a5b      	lsrs	r3, r3, #9
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00c      	beq.n	80030d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030cc:	69b9      	ldr	r1, [r7, #24]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 feff 	bl	8003ed2 <I2C_Slave_ADDR>
 80030d4:	e066      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	0a5b      	lsrs	r3, r3, #9
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 ff3a 	bl	8003f68 <I2C_Slave_STOPF>
 80030f4:	e056      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	2b21      	cmp	r3, #33	; 0x21
 80030fa:	d002      	beq.n	8003102 <HAL_I2C_EV_IRQHandler+0x23a>
 80030fc:	7bbb      	ldrb	r3, [r7, #14]
 80030fe:	2b29      	cmp	r3, #41	; 0x29
 8003100:	d125      	bne.n	800314e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00f      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0x266>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	0a9b      	lsrs	r3, r3, #10
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0x266>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fe15 	bl	8003d56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800312c:	e039      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d033      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	0a5b      	lsrs	r3, r3, #9
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d02d      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fe42 	bl	8003dd0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800314c:	e029      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00f      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x2b2>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0a9b      	lsrs	r3, r3, #10
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fe4d 	bl	8003e12 <I2C_SlaveReceive_RXNE>
 8003178:	e014      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00e      	beq.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	0a5b      	lsrs	r3, r3, #9
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fe7b 	bl	8003e8e <I2C_SlaveReceive_BTF>
 8003198:	e004      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800319a:	bf00      	nop
 800319c:	e002      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
 8003206:	4613      	mov	r3, r2
 8003208:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003268:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d150      	bne.n	800331a <I2C_MasterTransmit_TXE+0xc8>
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b21      	cmp	r3, #33	; 0x21
 800327c:	d14d      	bne.n	800331a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d01d      	beq.n	80032c0 <I2C_MasterTransmit_TXE+0x6e>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b20      	cmp	r3, #32
 8003288:	d01a      	beq.n	80032c0 <I2C_MasterTransmit_TXE+0x6e>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003290:	d016      	beq.n	80032c0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032a0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2211      	movs	r2, #17
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff76 	bl	80031aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032be:	e060      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ce:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d107      	bne.n	800330a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe f9e2 	bl	80016cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003308:	e03b      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff49 	bl	80031aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003318:	e033      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b21      	cmp	r3, #33	; 0x21
 800331e:	d005      	beq.n	800332c <I2C_MasterTransmit_TXE+0xda>
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d12d      	bne.n	8003382 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	d12a      	bne.n	8003382 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003346:	e01c      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d103      	bne.n	800335c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f88e 	bl	8003476 <I2C_MemoryTransmit_TXE_BTF>
}
 800335a:	e012      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003380:	e7ff      	b.n	8003382 <I2C_MasterTransmit_TXE+0x130>
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b21      	cmp	r3, #33	; 0x21
 80033a2:	d164      	bne.n	800346e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d012      	beq.n	80033d4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033d2:	e04c      	b.n	800346e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d01d      	beq.n	8003416 <I2C_MasterTransmit_BTF+0x8c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d01a      	beq.n	8003416 <I2C_MasterTransmit_BTF+0x8c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e6:	d016      	beq.n	8003416 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2211      	movs	r2, #17
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fecb 	bl	80031aa <HAL_I2C_MasterTxCpltCallback>
}
 8003414:	e02b      	b.n	800346e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003424:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d107      	bne.n	8003460 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe f937 	bl	80016cc <HAL_I2C_MemTxCpltCallback>
}
 800345e:	e006      	b.n	800346e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fe9e 	bl	80031aa <HAL_I2C_MasterTxCpltCallback>
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11d      	bne.n	80034ca <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10b      	bne.n	80034ae <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	b2da      	uxtb	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80034ac:	e073      	b.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	121b      	asrs	r3, r3, #8
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c8:	e065      	b.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10b      	bne.n	80034ea <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034e8:	e055      	b.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d151      	bne.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b22      	cmp	r3, #34	; 0x22
 80034f6:	d10d      	bne.n	8003514 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003506:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003512:	e040      	b.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d015      	beq.n	800354a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b21      	cmp	r3, #33	; 0x21
 8003522:	d112      	bne.n	800354a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003548:	e025      	b.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d120      	bne.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b21      	cmp	r3, #33	; 0x21
 8003558:	d11d      	bne.n	8003596 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003568:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fe f89b 	bl	80016cc <HAL_I2C_MemTxCpltCallback>
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b22      	cmp	r3, #34	; 0x22
 80035b0:	f040 80a2 	bne.w	80036f8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d921      	bls.n	8003606 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	f040 8082 	bne.w	80036f8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003604:	e078      	b.n	80036f8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	2b02      	cmp	r3, #2
 800360c:	d074      	beq.n	80036f8 <I2C_MasterReceive_RXNE+0x15a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d002      	beq.n	800361a <I2C_MasterReceive_RXNE+0x7c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d16e      	bne.n	80036f8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 fa6e 	bl	8004afc <I2C_WaitOnSTOPRequestThroughIT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d142      	bne.n	80036ac <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003644:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d10a      	bne.n	8003696 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fdcb 	bl	800322a <HAL_I2C_MemRxCpltCallback>
}
 8003694:	e030      	b.n	80036f8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2212      	movs	r2, #18
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fd8a 	bl	80031be <HAL_I2C_MasterRxCpltCallback>
}
 80036aa:	e025      	b.n	80036f8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe f804 	bl	8001700 <HAL_I2C_ErrorCallback>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b04      	cmp	r3, #4
 8003716:	d11b      	bne.n	8003750 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003726:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800374e:	e0bd      	b.n	80038cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b03      	cmp	r3, #3
 8003758:	d129      	bne.n	80037ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003768:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00a      	beq.n	8003786 <I2C_MasterReceive_BTF+0x86>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d007      	beq.n	8003786 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037ac:	e08e      	b.n	80038cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d176      	bne.n	80038a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d002      	beq.n	80037c4 <I2C_MasterReceive_BTF+0xc4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d108      	bne.n	80037d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e019      	b.n	800380a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d002      	beq.n	80037e2 <I2C_MasterReceive_BTF+0xe2>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d108      	bne.n	80037f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e00a      	b.n	800380a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d007      	beq.n	800380a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003864:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d10a      	bne.n	8003890 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fcce 	bl	800322a <HAL_I2C_MemRxCpltCallback>
}
 800388e:	e01d      	b.n	80038cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2212      	movs	r2, #18
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fc8d 	bl	80031be <HAL_I2C_MasterRxCpltCallback>
}
 80038a4:	e012      	b.n	80038cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d117      	bne.n	8003918 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003900:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003902:	e067      	b.n	80039d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]
}
 8003916:	e05d      	b.n	80039d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003920:	d133      	bne.n	800398a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b21      	cmp	r3, #33	; 0x21
 800392c:	d109      	bne.n	8003942 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800393e:	611a      	str	r2, [r3, #16]
 8003940:	e008      	b.n	8003954 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <I2C_Master_SB+0x92>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	2b00      	cmp	r3, #0
 800396c:	d032      	beq.n	80039d4 <I2C_Master_SB+0x100>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02d      	beq.n	80039d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003986:	605a      	str	r2, [r3, #4]
}
 8003988:	e024      	b.n	80039d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	b29b      	uxth	r3, r3
 8003998:	11db      	asrs	r3, r3, #7
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0306 	and.w	r3, r3, #6
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f063 030f 	orn	r3, r3, #15
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	611a      	str	r2, [r3, #16]
}
 80039ae:	e011      	b.n	80039d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10d      	bne.n	80039d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	b29b      	uxth	r3, r3
 80039be:	11db      	asrs	r3, r3, #7
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f063 030e 	orn	r3, r3, #14
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <I2C_Master_ADD10+0x26>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <I2C_Master_ADD10+0x48>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a26:	605a      	str	r2, [r3, #4]
  }
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b091      	sub	sp, #68	; 0x44
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	f040 8169 	bne.w	8003d32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <I2C_Master_ADDR+0x54>
 8003a68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d10b      	bne.n	8003a88 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	e160      	b.n	8003d4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <I2C_Master_ADDR+0x98>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a98:	d118      	bne.n	8003acc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8003aca:	e13e      	b.n	8003d4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d113      	bne.n	8003afe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e115      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 808a 	bne.w	8003c1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b10:	d137      	bne.n	8003b82 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	d113      	bne.n	8003b5a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	e0e7      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e0d3      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d02e      	beq.n	8003be6 <I2C_Master_ADDR+0x1b2>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d02b      	beq.n	8003be6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d102      	bne.n	8003b9a <I2C_Master_ADDR+0x166>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d125      	bne.n	8003be6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00e      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d00b      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d008      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e007      	b.n	8003bce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	e0a1      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e085      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d14d      	bne.n	8003cc4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d016      	beq.n	8003c5c <I2C_Master_ADDR+0x228>
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d013      	beq.n	8003c5c <I2C_Master_ADDR+0x228>
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d010      	beq.n	8003c5c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e007      	b.n	8003c6c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c6a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d117      	bne.n	8003cac <I2C_Master_ADDR+0x278>
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c82:	d00b      	beq.n	8003c9c <I2C_Master_ADDR+0x268>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d008      	beq.n	8003c9c <I2C_Master_ADDR+0x268>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d005      	beq.n	8003c9c <I2C_Master_ADDR+0x268>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d002      	beq.n	8003c9c <I2C_Master_ADDR+0x268>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d107      	bne.n	8003cac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003caa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	e032      	b.n	8003d2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce2:	d117      	bne.n	8003d14 <I2C_Master_ADDR+0x2e0>
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cea:	d00b      	beq.n	8003d04 <I2C_Master_ADDR+0x2d0>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d008      	beq.n	8003d04 <I2C_Master_ADDR+0x2d0>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d005      	beq.n	8003d04 <I2C_Master_ADDR+0x2d0>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d002      	beq.n	8003d04 <I2C_Master_ADDR+0x2d0>
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d107      	bne.n	8003d14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d30:	e00b      	b.n	8003d4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	e7ff      	b.n	8003d4a <I2C_Master_ADDR+0x316>
 8003d4a:	bf00      	nop
 8003d4c:	3744      	adds	r7, #68	; 0x44
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02b      	beq.n	8003dc8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d114      	bne.n	8003dc8 <I2C_SlaveTransmit_TXE+0x72>
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b29      	cmp	r3, #41	; 0x29
 8003da2:	d111      	bne.n	8003dc8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2228      	movs	r2, #40	; 0x28
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fa05 	bl	80031d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02c      	beq.n	8003e86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d114      	bne.n	8003e86 <I2C_SlaveReceive_RXNE+0x74>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e60:	d111      	bne.n	8003e86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2222      	movs	r2, #34	; 0x22
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2228      	movs	r2, #40	; 0x28
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff f9b0 	bl	80031e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eec:	2b28      	cmp	r3, #40	; 0x28
 8003eee:	d127      	bne.n	8003f40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	09db      	lsrs	r3, r3, #7
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	81bb      	strh	r3, [r7, #12]
 8003f22:	e002      	b.n	8003f2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f32:	89ba      	ldrh	r2, [r7, #12]
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f95e 	bl	80031fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f3e:	e00e      	b.n	8003f5e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d172      	bne.n	80040ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	d002      	beq.n	8003fd2 <I2C_Slave_STOPF+0x6a>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd0:	d135      	bne.n	800403e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0204 	orr.w	r2, r3, #4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f9dc 	bl	80023c8 <HAL_DMA_GetState>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d049      	beq.n	80040aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	4a69      	ldr	r2, [pc, #420]	; (80041c0 <I2C_Slave_STOPF+0x258>)
 800401c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe f824 	bl	8002070 <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03d      	beq.n	80040aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800403c:	e035      	b.n	80040aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe f9a6 	bl	80023c8 <HAL_DMA_GetState>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d014      	beq.n	80040ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	4a4e      	ldr	r2, [pc, #312]	; (80041c0 <I2C_Slave_STOPF+0x258>)
 8004088:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd ffee 	bl	8002070 <HAL_DMA_Abort_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040a4:	4610      	mov	r0, r2
 80040a6:	4798      	blx	r3
 80040a8:	e000      	b.n	80040ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03e      	beq.n	8004134 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d112      	bne.n	80040ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d112      	bne.n	800411e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f843 	bl	80041c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004142:	e039      	b.n	80041b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b2a      	cmp	r3, #42	; 0x2a
 8004148:	d109      	bne.n	800415e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff f844 	bl	80031e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b28      	cmp	r3, #40	; 0x28
 8004168:	d111      	bne.n	800418e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <I2C_Slave_STOPF+0x25c>)
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff f845 	bl	8003216 <HAL_I2C_ListenCpltCallback>
}
 800418c:	e014      	b.n	80041b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	2b22      	cmp	r3, #34	; 0x22
 8004194:	d002      	beq.n	800419c <I2C_Slave_STOPF+0x234>
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b22      	cmp	r3, #34	; 0x22
 800419a:	d10d      	bne.n	80041b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff f817 	bl	80031e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	0800477d 	.word	0x0800477d
 80041c4:	ffff0000 	.word	0xffff0000

080041c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d002      	beq.n	80041ec <I2C_ITError+0x24>
 80041e6:	7bbb      	ldrb	r3, [r7, #14]
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d10a      	bne.n	8004202 <I2C_ITError+0x3a>
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b22      	cmp	r3, #34	; 0x22
 80041f0:	d107      	bne.n	8004202 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004208:	2b28      	cmp	r3, #40	; 0x28
 800420a:	d107      	bne.n	800421c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2228      	movs	r2, #40	; 0x28
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800421a:	e015      	b.n	8004248 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422a:	d00a      	beq.n	8004242 <I2C_ITError+0x7a>
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b60      	cmp	r3, #96	; 0x60
 8004230:	d007      	beq.n	8004242 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d162      	bne.n	800431e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004266:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d020      	beq.n	80042b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	4a6a      	ldr	r2, [pc, #424]	; (8004424 <I2C_ITError+0x25c>)
 800427c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd fef4 	bl	8002070 <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8089 	beq.w	80043a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042b2:	4610      	mov	r0, r2
 80042b4:	4798      	blx	r3
 80042b6:	e074      	b.n	80043a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	4a59      	ldr	r2, [pc, #356]	; (8004424 <I2C_ITError+0x25c>)
 80042be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fed3 	bl	8002070 <HAL_DMA_Abort_IT>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d068      	beq.n	80043a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d10b      	bne.n	80042f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004318:	4610      	mov	r0, r2
 800431a:	4798      	blx	r3
 800431c:	e041      	b.n	80043a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b60      	cmp	r3, #96	; 0x60
 8004328:	d125      	bne.n	8004376 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d10b      	bne.n	800435e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe ff65 	bl	800323e <HAL_I2C_AbortCpltCallback>
 8004374:	e015      	b.n	80043a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d10b      	bne.n	800439c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fd f9af 	bl	8001700 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d113      	bne.n	800441c <I2C_ITError+0x254>
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b28      	cmp	r3, #40	; 0x28
 80043f8:	d110      	bne.n	800441c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <I2C_ITError+0x260>)
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe fefd 	bl	8003216 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	0800477d 	.word	0x0800477d
 8004428:	ffff0000 	.word	0xffff0000

0800442c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fa32 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d103      	bne.n	8004486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	492d      	ldr	r1, [pc, #180]	; (8004554 <I2C_RequestMemoryWrite+0x128>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fa6a 	bl	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e04c      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fad4 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02b      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e021      	b.n	8004548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 faae 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e005      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004574:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800458a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004598:	2200      	movs	r2, #0
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80045b2:	2b21      	cmp	r3, #33	; 0x21
 80045b4:	d007      	beq.n	80045c6 <I2C_DMAXferCplt+0x6e>
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80045bc:	2b22      	cmp	r3, #34	; 0x22
 80045be:	d131      	bne.n	8004624 <I2C_DMAXferCplt+0xcc>
 80045c0:	7cbb      	ldrb	r3, [r7, #18]
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d12e      	bne.n	8004624 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b29      	cmp	r3, #41	; 0x29
 80045e0:	d10a      	bne.n	80045f8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2221      	movs	r2, #33	; 0x21
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2228      	movs	r2, #40	; 0x28
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045f0:	6978      	ldr	r0, [r7, #20]
 80045f2:	f7fe fdee 	bl	80031d2 <HAL_I2C_SlaveTxCpltCallback>
 80045f6:	e00c      	b.n	8004612 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b2a      	cmp	r3, #42	; 0x2a
 80045fc:	d109      	bne.n	8004612 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2222      	movs	r2, #34	; 0x22
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2228      	movs	r2, #40	; 0x28
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800460c:	6978      	ldr	r0, [r7, #20]
 800460e:	f7fe fdea 	bl	80031e6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004620:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004622:	e06a      	b.n	80046fa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d064      	beq.n	80046fa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004648:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004658:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004660:	d009      	beq.n	8004676 <I2C_DMAXferCplt+0x11e>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d006      	beq.n	8004676 <I2C_DMAXferCplt+0x11e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800466e:	d002      	beq.n	8004676 <I2C_DMAXferCplt+0x11e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d107      	bne.n	8004686 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004694:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80046b4:	6978      	ldr	r0, [r7, #20]
 80046b6:	f7fd f823 	bl	8001700 <HAL_I2C_ErrorCallback>
}
 80046ba:	e01e      	b.n	80046fa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d10a      	bne.n	80046e6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7fe fda3 	bl	800322a <HAL_I2C_MemRxCpltCallback>
}
 80046e4:	e009      	b.n	80046fa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2212      	movs	r2, #18
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7fe fd62 	bl	80031be <HAL_I2C_MasterRxCpltCallback>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	2200      	movs	r2, #0
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	2200      	movs	r2, #0
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fd fe57 	bl	80023e4 <HAL_DMA_GetError>
 8004736:	4603      	mov	r3, r0
 8004738:	2b02      	cmp	r3, #2
 800473a:	d01b      	beq.n	8004774 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0210 	orr.w	r2, r3, #16
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7fc ffc6 	bl	8001700 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004796:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <I2C_DMAAbort+0x148>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	4a4a      	ldr	r2, [pc, #296]	; (80048c8 <I2C_DMAAbort+0x14c>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a1a      	lsrs	r2, r3, #8
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00da      	lsls	r2, r3, #3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047c2:	e00a      	b.n	80047da <I2C_DMAAbort+0x5e>
    }
    count--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d8:	d0ea      	beq.n	80047b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	2200      	movs	r2, #0
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	2200      	movs	r2, #0
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	2200      	movs	r2, #0
 800481e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2200      	movs	r2, #0
 800482e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d10e      	bne.n	800486a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f7fe fceb 	bl	800323e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004868:	e027      	b.n	80048ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004870:	2b28      	cmp	r3, #40	; 0x28
 8004872:	d117      	bne.n	80048a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2228      	movs	r2, #40	; 0x28
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048a2:	e007      	b.n	80048b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f7fc ff23 	bl	8001700 <HAL_I2C_ErrorCallback>
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000018 	.word	0x20000018
 80048c8:	14f8b589 	.word	0x14f8b589

080048cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048dc:	e025      	b.n	800492a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d021      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	f7fd f97b 	bl	8001be0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0220 	orr.w	r2, r3, #32
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e023      	b.n	8004972 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10d      	bne.n	8004950 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	e00c      	b.n	800496a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	43da      	mvns	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d0b6      	beq.n	80048de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004988:	e051      	b.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d123      	bne.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e046      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d021      	beq.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fd f8f9 	bl	8001be0 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d116      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e020      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e00b      	b.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d18d      	bne.n	800498a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a84:	e02d      	b.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f86a 	bl	8004b60 <I2C_IsAcknowledgeFailed>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02d      	b.n	8004af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d021      	beq.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9e:	f7fd f89f 	bl	8001be0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d302      	bcc.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e007      	b.n	8004af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	2b80      	cmp	r3, #128	; 0x80
 8004aee:	d1ca      	bne.n	8004a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	0a1a      	lsrs	r2, r3, #8
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e008      	b.n	8004b4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b48:	d0e9      	beq.n	8004b1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000018 	.word	0x20000018
 8004b5c:	14f8b589 	.word	0x14f8b589

08004b60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d11b      	bne.n	8004bb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0204 	orr.w	r2, r3, #4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bce:	d103      	bne.n	8004bd8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bd6:	e007      	b.n	8004be8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004be0:	d102      	bne.n	8004be8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2208      	movs	r2, #8
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d129      	bne.n	8004c5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2224      	movs	r2, #36	; 0x24
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0210 	bic.w	r2, r2, #16
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d12a      	bne.n	8004cdc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2224      	movs	r2, #36	; 0x24
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	f023 030f 	bic.w	r3, r3, #15
 8004cac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	89fa      	ldrh	r2, [r7, #14]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d12:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d18:	f7fc ff62 	bl	8001be0 <HAL_GetTick>
 8004d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d1e:	e009      	b.n	8004d34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d20:	f7fc ff5e 	bl	8001be0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d2e:	d901      	bls.n	8004d34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e01f      	b.n	8004d74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d1ee      	bne.n	8004d20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d42:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d48:	f7fc ff4a 	bl	8001be0 <HAL_GetTick>
 8004d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d4e:	e009      	b.n	8004d64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d50:	f7fc ff46 	bl	8001be0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5e:	d901      	bls.n	8004d64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e007      	b.n	8004d74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d70:	d1ee      	bne.n	8004d50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	420e0040 	.word	0x420e0040
 8004d84:	40007000 	.word	0x40007000
 8004d88:	420e0044 	.word	0x420e0044

08004d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e264      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d075      	beq.n	8004e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004daa:	4ba3      	ldr	r3, [pc, #652]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d00c      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db6:	4ba0      	ldr	r3, [pc, #640]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d112      	bne.n	8004de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc2:	4b9d      	ldr	r3, [pc, #628]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	4b99      	ldr	r3, [pc, #612]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d05b      	beq.n	8004e94 <HAL_RCC_OscConfig+0x108>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d157      	bne.n	8004e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e23f      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x74>
 8004df2:	4b91      	ldr	r3, [pc, #580]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a90      	ldr	r2, [pc, #576]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e01d      	b.n	8004e3c <HAL_RCC_OscConfig+0xb0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x98>
 8004e0a:	4b8b      	ldr	r3, [pc, #556]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a8a      	ldr	r2, [pc, #552]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a87      	ldr	r2, [pc, #540]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e00b      	b.n	8004e3c <HAL_RCC_OscConfig+0xb0>
 8004e24:	4b84      	ldr	r3, [pc, #528]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a83      	ldr	r2, [pc, #524]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	4b81      	ldr	r3, [pc, #516]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a80      	ldr	r2, [pc, #512]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d013      	beq.n	8004e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7fc fecc 	bl	8001be0 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7fc fec8 	bl	8001be0 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	; 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e204      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0xc0>
 8004e6a:	e014      	b.n	8004e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fc feb8 	bl	8001be0 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fc feb4 	bl	8001be0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	; 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e1f0      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e86:	4b6c      	ldr	r3, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0xe8>
 8004e92:	e000      	b.n	8004e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d063      	beq.n	8004f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ea2:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eae:	4b62      	ldr	r3, [pc, #392]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d116      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_RCC_OscConfig+0x152>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e1c4      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ede:	4b56      	ldr	r3, [pc, #344]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4952      	ldr	r1, [pc, #328]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef2:	e03a      	b.n	8004f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004efc:	4b4f      	ldr	r3, [pc, #316]	; (800503c <HAL_RCC_OscConfig+0x2b0>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fc fe6d 	bl	8001be0 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0a:	f7fc fe69 	bl	8001be0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e1a5      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1c:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4940      	ldr	r1, [pc, #256]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]
 8004f3c:	e015      	b.n	8004f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_OscConfig+0x2b0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fe4c 	bl	8001be0 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fe48 	bl	8001be0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e184      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d030      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_OscConfig+0x2b4>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fc fe2c 	bl	8001be0 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8c:	f7fc fe28 	bl	8001be0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e164      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9e:	4b26      	ldr	r3, [pc, #152]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x200>
 8004faa:	e015      	b.n	8004fd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_OscConfig+0x2b4>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb2:	f7fc fe15 	bl	8001be0 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fc fe11 	bl	8001be0 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e14d      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80a0 	beq.w	8005126 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_OscConfig+0x2b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d121      	bne.n	8005066 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <HAL_RCC_OscConfig+0x2b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_RCC_OscConfig+0x2b8>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fc fdd7 	bl	8001be0 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e011      	b.n	800505a <HAL_RCC_OscConfig+0x2ce>
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	42470000 	.word	0x42470000
 8005040:	42470e80 	.word	0x42470e80
 8005044:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005048:	f7fc fdca 	bl	8001be0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e106      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505a:	4b85      	ldr	r3, [pc, #532]	; (8005270 <HAL_RCC_OscConfig+0x4e4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d106      	bne.n	800507c <HAL_RCC_OscConfig+0x2f0>
 800506e:	4b81      	ldr	r3, [pc, #516]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	4a80      	ldr	r2, [pc, #512]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	; 0x70
 800507a:	e01c      	b.n	80050b6 <HAL_RCC_OscConfig+0x32a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b05      	cmp	r3, #5
 8005082:	d10c      	bne.n	800509e <HAL_RCC_OscConfig+0x312>
 8005084:	4b7b      	ldr	r3, [pc, #492]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a7a      	ldr	r2, [pc, #488]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	4b78      	ldr	r3, [pc, #480]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a77      	ldr	r2, [pc, #476]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
 800509c:	e00b      	b.n	80050b6 <HAL_RCC_OscConfig+0x32a>
 800509e:	4b75      	ldr	r3, [pc, #468]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	4a74      	ldr	r2, [pc, #464]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6713      	str	r3, [r2, #112]	; 0x70
 80050aa:	4b72      	ldr	r3, [pc, #456]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a71      	ldr	r2, [pc, #452]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d015      	beq.n	80050ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fc fd8f 	bl	8001be0 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fc fd8b 	bl	8001be0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0c5      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	4b65      	ldr	r3, [pc, #404]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ee      	beq.n	80050c6 <HAL_RCC_OscConfig+0x33a>
 80050e8:	e014      	b.n	8005114 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ea:	f7fc fd79 	bl	8001be0 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fc fd75 	bl	8001be0 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0af      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005108:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ee      	bne.n	80050f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511a:	4b56      	ldr	r3, [pc, #344]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	4a55      	ldr	r2, [pc, #340]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 809b 	beq.w	8005266 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005130:	4b50      	ldr	r3, [pc, #320]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b08      	cmp	r3, #8
 800513a:	d05c      	beq.n	80051f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d141      	bne.n	80051c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005144:	4b4c      	ldr	r3, [pc, #304]	; (8005278 <HAL_RCC_OscConfig+0x4ec>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fc fd49 	bl	8001be0 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005152:	f7fc fd45 	bl	8001be0 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e081      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	019b      	lsls	r3, r3, #6
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	4937      	ldr	r1, [pc, #220]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <HAL_RCC_OscConfig+0x4ec>)
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fc fd1e 	bl	8001be0 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fc fd1a 	bl	8001be0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e056      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x41c>
 80051c6:	e04e      	b.n	8005266 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fc fd07 	bl	8001be0 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fc fd03 	bl	8001be0 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e03f      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e8:	4b22      	ldr	r3, [pc, #136]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCC_OscConfig+0x44a>
 80051f4:	e037      	b.n	8005266 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e032      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_RCC_OscConfig+0x4e8>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d028      	beq.n	8005262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d121      	bne.n	8005262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d11a      	bne.n	8005262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005232:	4013      	ands	r3, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005238:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523a:	4293      	cmp	r3, r2
 800523c:	d111      	bne.n	8005262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	3b01      	subs	r3, #1
 800524c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d001      	beq.n	8005266 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40007000 	.word	0x40007000
 8005274:	40023800 	.word	0x40023800
 8005278:	42470060 	.word	0x42470060

0800527c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cc      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b68      	ldr	r3, [pc, #416]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d90c      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b65      	ldr	r3, [pc, #404]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0b8      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d0:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a58      	ldr	r2, [pc, #352]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e8:	4b53      	ldr	r3, [pc, #332]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a52      	ldr	r2, [pc, #328]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	494d      	ldr	r1, [pc, #308]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d044      	beq.n	800539c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d119      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e07f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d003      	beq.n	800533a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	2b03      	cmp	r3, #3
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e06f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534a:	4b3b      	ldr	r3, [pc, #236]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e067      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800535a:	4b37      	ldr	r3, [pc, #220]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4934      	ldr	r1, [pc, #208]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800536c:	f7fc fc38 	bl	8001be0 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fc fc34 	bl	8001be0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e04f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 020c 	and.w	r2, r3, #12
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d1eb      	bne.n	8005374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d20c      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e032      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4916      	ldr	r1, [pc, #88]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	490e      	ldr	r1, [pc, #56]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005402:	f000 f821 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	490a      	ldr	r1, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	5ccb      	ldrb	r3, [r1, r3]
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fc fb98 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023c00 	.word	0x40023c00
 8005438:	40023800 	.word	0x40023800
 800543c:	080098a8 	.word	0x080098a8
 8005440:	20000018 	.word	0x20000018
 8005444:	2000001c 	.word	0x2000001c

08005448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800544e:	2100      	movs	r1, #0
 8005450:	6079      	str	r1, [r7, #4]
 8005452:	2100      	movs	r1, #0
 8005454:	60f9      	str	r1, [r7, #12]
 8005456:	2100      	movs	r1, #0
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800545a:	2100      	movs	r1, #0
 800545c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800545e:	4952      	ldr	r1, [pc, #328]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005460:	6889      	ldr	r1, [r1, #8]
 8005462:	f001 010c 	and.w	r1, r1, #12
 8005466:	2908      	cmp	r1, #8
 8005468:	d00d      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x3e>
 800546a:	2908      	cmp	r1, #8
 800546c:	f200 8094 	bhi.w	8005598 <HAL_RCC_GetSysClockFreq+0x150>
 8005470:	2900      	cmp	r1, #0
 8005472:	d002      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x32>
 8005474:	2904      	cmp	r1, #4
 8005476:	d003      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x38>
 8005478:	e08e      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800547a:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <HAL_RCC_GetSysClockFreq+0x164>)
 800547c:	60bb      	str	r3, [r7, #8]
       break;
 800547e:	e08e      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005480:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005482:	60bb      	str	r3, [r7, #8]
      break;
 8005484:	e08b      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005486:	4948      	ldr	r1, [pc, #288]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005488:	6849      	ldr	r1, [r1, #4]
 800548a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800548e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005490:	4945      	ldr	r1, [pc, #276]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005492:	6849      	ldr	r1, [r1, #4]
 8005494:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005498:	2900      	cmp	r1, #0
 800549a:	d024      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549c:	4942      	ldr	r1, [pc, #264]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800549e:	6849      	ldr	r1, [r1, #4]
 80054a0:	0989      	lsrs	r1, r1, #6
 80054a2:	4608      	mov	r0, r1
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80054ac:	f04f 0500 	mov.w	r5, #0
 80054b0:	ea00 0204 	and.w	r2, r0, r4
 80054b4:	ea01 0305 	and.w	r3, r1, r5
 80054b8:	493d      	ldr	r1, [pc, #244]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80054ba:	fb01 f003 	mul.w	r0, r1, r3
 80054be:	2100      	movs	r1, #0
 80054c0:	fb01 f102 	mul.w	r1, r1, r2
 80054c4:	1844      	adds	r4, r0, r1
 80054c6:	493a      	ldr	r1, [pc, #232]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80054c8:	fba2 0101 	umull	r0, r1, r2, r1
 80054cc:	1863      	adds	r3, r4, r1
 80054ce:	4619      	mov	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	f7fa feda 	bl	8000290 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e04a      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	461a      	mov	r2, r3
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	ea02 0400 	and.w	r4, r2, r0
 80054fe:	ea03 0501 	and.w	r5, r3, r1
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	014b      	lsls	r3, r1, #5
 8005510:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005514:	0142      	lsls	r2, r0, #5
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	1b00      	subs	r0, r0, r4
 800551c:	eb61 0105 	sbc.w	r1, r1, r5
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	018b      	lsls	r3, r1, #6
 800552a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800552e:	0182      	lsls	r2, r0, #6
 8005530:	1a12      	subs	r2, r2, r0
 8005532:	eb63 0301 	sbc.w	r3, r3, r1
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	00d9      	lsls	r1, r3, #3
 8005540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005544:	00d0      	lsls	r0, r2, #3
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	1912      	adds	r2, r2, r4
 800554c:	eb45 0303 	adc.w	r3, r5, r3
 8005550:	f04f 0000 	mov.w	r0, #0
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	0299      	lsls	r1, r3, #10
 800555a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800555e:	0290      	lsls	r0, r2, #10
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	f7fa fe8e 	bl	8000290 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4613      	mov	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	3301      	adds	r3, #1
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	60bb      	str	r3, [r7, #8]
      break;
 8005596:	e002      	b.n	800559e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <HAL_RCC_GetSysClockFreq+0x164>)
 800559a:	60bb      	str	r3, [r7, #8]
      break;
 800559c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800559e:	68bb      	ldr	r3, [r7, #8]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bdb0      	pop	{r4, r5, r7, pc}
 80055a8:	40023800 	.word	0x40023800
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	017d7840 	.word	0x017d7840

080055b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000018 	.word	0x20000018

080055cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d0:	f7ff fff0 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0a9b      	lsrs	r3, r3, #10
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4903      	ldr	r1, [pc, #12]	; (80055f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40023800 	.word	0x40023800
 80055f0:	080098b8 	.word	0x080098b8

080055f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055f8:	f7ff ffdc 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	0b5b      	lsrs	r3, r3, #13
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4903      	ldr	r1, [pc, #12]	; (8005618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40023800 	.word	0x40023800
 8005618:	080098b8 	.word	0x080098b8

0800561c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e03f      	b.n	80056ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc f91c 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800565e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f929 	bl	80058b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b08a      	sub	sp, #40	; 0x28
 80056ba:	af02      	add	r7, sp, #8
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d17c      	bne.n	80057d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_UART_Transmit+0x2c>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e075      	b.n	80057d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_UART_Transmit+0x3e>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e06e      	b.n	80057d2 <HAL_UART_Transmit+0x11c>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2221      	movs	r2, #33	; 0x21
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570a:	f7fc fa69 	bl	8001be0 <HAL_GetTick>
 800570e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	88fa      	ldrh	r2, [r7, #6]
 800571a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d108      	bne.n	8005738 <HAL_UART_Transmit+0x82>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e003      	b.n	8005740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005748:	e02a      	b.n	80057a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f840 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e036      	b.n	80057d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3302      	adds	r3, #2
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e007      	b.n	8005792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1cf      	bne.n	800574a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2140      	movs	r1, #64	; 0x40
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f810 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e000      	b.n	80057d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b090      	sub	sp, #64	; 0x40
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ea:	e050      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d04c      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0x30>
 80057fa:	f7fc f9f1 	bl	8001be0 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005806:	429a      	cmp	r2, r3
 8005808:	d241      	bcs.n	800588e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800582a:	637a      	str	r2, [r7, #52]	; 0x34
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800585e:	623a      	str	r2, [r7, #32]
 8005860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	61bb      	str	r3, [r7, #24]
   return(result);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d09f      	beq.n	80057ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3740      	adds	r7, #64	; 0x40
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b09f      	sub	sp, #124	; 0x7c
 80058be:	af00      	add	r7, sp, #0
 80058c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ce:	68d9      	ldr	r1, [r3, #12]
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	ea40 0301 	orr.w	r3, r0, r1
 80058d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058fc:	f021 010c 	bic.w	r1, r1, #12
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005906:	430b      	orrs	r3, r1
 8005908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	6999      	ldr	r1, [r3, #24]
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	ea40 0301 	orr.w	r3, r0, r1
 8005920:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4bc5      	ldr	r3, [pc, #788]	; (8005c3c <UART_SetConfig+0x384>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d004      	beq.n	8005936 <UART_SetConfig+0x7e>
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4bc3      	ldr	r3, [pc, #780]	; (8005c40 <UART_SetConfig+0x388>)
 8005932:	429a      	cmp	r2, r3
 8005934:	d103      	bne.n	800593e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005936:	f7ff fe5d 	bl	80055f4 <HAL_RCC_GetPCLK2Freq>
 800593a:	6778      	str	r0, [r7, #116]	; 0x74
 800593c:	e002      	b.n	8005944 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800593e:	f7ff fe45 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 8005942:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594c:	f040 80b6 	bne.w	8005abc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005952:	461c      	mov	r4, r3
 8005954:	f04f 0500 	mov.w	r5, #0
 8005958:	4622      	mov	r2, r4
 800595a:	462b      	mov	r3, r5
 800595c:	1891      	adds	r1, r2, r2
 800595e:	6439      	str	r1, [r7, #64]	; 0x40
 8005960:	415b      	adcs	r3, r3
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
 8005964:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005968:	1912      	adds	r2, r2, r4
 800596a:	eb45 0303 	adc.w	r3, r5, r3
 800596e:	f04f 0000 	mov.w	r0, #0
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	00d9      	lsls	r1, r3, #3
 8005978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800597c:	00d0      	lsls	r0, r2, #3
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	1911      	adds	r1, r2, r4
 8005984:	6639      	str	r1, [r7, #96]	; 0x60
 8005986:	416b      	adcs	r3, r5
 8005988:	667b      	str	r3, [r7, #100]	; 0x64
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	461a      	mov	r2, r3
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	1891      	adds	r1, r2, r2
 8005996:	63b9      	str	r1, [r7, #56]	; 0x38
 8005998:	415b      	adcs	r3, r3
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059a4:	f7fa fc74 	bl	8000290 <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4ba5      	ldr	r3, [pc, #660]	; (8005c44 <UART_SetConfig+0x38c>)
 80059ae:	fba3 2302 	umull	r2, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	011e      	lsls	r6, r3, #4
 80059b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b8:	461c      	mov	r4, r3
 80059ba:	f04f 0500 	mov.w	r5, #0
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	1891      	adds	r1, r2, r2
 80059c4:	6339      	str	r1, [r7, #48]	; 0x30
 80059c6:	415b      	adcs	r3, r3
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059ce:	1912      	adds	r2, r2, r4
 80059d0:	eb45 0303 	adc.w	r3, r5, r3
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	00d9      	lsls	r1, r3, #3
 80059de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059e2:	00d0      	lsls	r0, r2, #3
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	1911      	adds	r1, r2, r4
 80059ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80059ec:	416b      	adcs	r3, r5
 80059ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	1891      	adds	r1, r2, r2
 80059fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80059fe:	415b      	adcs	r3, r3
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a0a:	f7fa fc41 	bl	8000290 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <UART_SetConfig+0x38c>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	; 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a87      	ldr	r2, [pc, #540]	; (8005c44 <UART_SetConfig+0x38c>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a34:	441e      	add	r6, r3
 8005a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f04f 0100 	mov.w	r1, #0
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	1894      	adds	r4, r2, r2
 8005a44:	623c      	str	r4, [r7, #32]
 8005a46:	415b      	adcs	r3, r3
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a4e:	1812      	adds	r2, r2, r0
 8005a50:	eb41 0303 	adc.w	r3, r1, r3
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	f04f 0500 	mov.w	r5, #0
 8005a5c:	00dd      	lsls	r5, r3, #3
 8005a5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a62:	00d4      	lsls	r4, r2, #3
 8005a64:	4622      	mov	r2, r4
 8005a66:	462b      	mov	r3, r5
 8005a68:	1814      	adds	r4, r2, r0
 8005a6a:	653c      	str	r4, [r7, #80]	; 0x50
 8005a6c:	414b      	adcs	r3, r1
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	61b9      	str	r1, [r7, #24]
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a8a:	f7fa fc01 	bl	8000290 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b6c      	ldr	r3, [pc, #432]	; (8005c44 <UART_SetConfig+0x38c>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a67      	ldr	r2, [pc, #412]	; (8005c44 <UART_SetConfig+0x38c>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4432      	add	r2, r6
 8005ab8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aba:	e0b9      	b.n	8005c30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005abe:	461c      	mov	r4, r3
 8005ac0:	f04f 0500 	mov.w	r5, #0
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	1891      	adds	r1, r2, r2
 8005aca:	6139      	str	r1, [r7, #16]
 8005acc:	415b      	adcs	r3, r3
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ad4:	1912      	adds	r2, r2, r4
 8005ad6:	eb45 0303 	adc.w	r3, r5, r3
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	00d9      	lsls	r1, r3, #3
 8005ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae8:	00d0      	lsls	r0, r2, #3
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	eb12 0804 	adds.w	r8, r2, r4
 8005af2:	eb43 0905 	adc.w	r9, r3, r5
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b0e:	0082      	lsls	r2, r0, #2
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	f7fa fbbc 	bl	8000290 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <UART_SetConfig+0x38c>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011e      	lsls	r6, r3, #4
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	1894      	adds	r4, r2, r2
 8005b34:	60bc      	str	r4, [r7, #8]
 8005b36:	415b      	adcs	r3, r3
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b3e:	1812      	adds	r2, r2, r0
 8005b40:	eb41 0303 	adc.w	r3, r1, r3
 8005b44:	f04f 0400 	mov.w	r4, #0
 8005b48:	f04f 0500 	mov.w	r5, #0
 8005b4c:	00dd      	lsls	r5, r3, #3
 8005b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b52:	00d4      	lsls	r4, r2, #3
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	1814      	adds	r4, r2, r0
 8005b5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b5c:	414b      	adcs	r3, r1
 8005b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	008b      	lsls	r3, r1, #2
 8005b74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b78:	0082      	lsls	r2, r0, #2
 8005b7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b7e:	f7fa fb87 	bl	8000290 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <UART_SetConfig+0x38c>)
 8005b88:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	2164      	movs	r1, #100	; 0x64
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	3332      	adds	r3, #50	; 0x32
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <UART_SetConfig+0x38c>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba6:	441e      	add	r6, r3
 8005ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005baa:	4618      	mov	r0, r3
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	1894      	adds	r4, r2, r2
 8005bb6:	603c      	str	r4, [r7, #0]
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc0:	1812      	adds	r2, r2, r0
 8005bc2:	eb41 0303 	adc.w	r3, r1, r3
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	f04f 0500 	mov.w	r5, #0
 8005bce:	00dd      	lsls	r5, r3, #3
 8005bd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bd4:	00d4      	lsls	r4, r2, #3
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	462b      	mov	r3, r5
 8005bda:	eb12 0a00 	adds.w	sl, r2, r0
 8005bde:	eb43 0b01 	adc.w	fp, r3, r1
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	008b      	lsls	r3, r1, #2
 8005bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bfa:	0082      	lsls	r2, r0, #2
 8005bfc:	4650      	mov	r0, sl
 8005bfe:	4659      	mov	r1, fp
 8005c00:	f7fa fb46 	bl	8000290 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <UART_SetConfig+0x38c>)
 8005c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	2164      	movs	r1, #100	; 0x64
 8005c12:	fb01 f303 	mul.w	r3, r1, r3
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	3332      	adds	r3, #50	; 0x32
 8005c1c:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <UART_SetConfig+0x38c>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	f003 020f 	and.w	r2, r3, #15
 8005c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4432      	add	r2, r6
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	377c      	adds	r7, #124	; 0x7c
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40011000 	.word	0x40011000
 8005c40:	40011400 	.word	0x40011400
 8005c44:	51eb851f 	.word	0x51eb851f

08005c48 <__errno>:
 8005c48:	4b01      	ldr	r3, [pc, #4]	; (8005c50 <__errno+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000024 	.word	0x20000024

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	4d0d      	ldr	r5, [pc, #52]	; (8005c8c <__libc_init_array+0x38>)
 8005c58:	4c0d      	ldr	r4, [pc, #52]	; (8005c90 <__libc_init_array+0x3c>)
 8005c5a:	1b64      	subs	r4, r4, r5
 8005c5c:	10a4      	asrs	r4, r4, #2
 8005c5e:	2600      	movs	r6, #0
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	4d0b      	ldr	r5, [pc, #44]	; (8005c94 <__libc_init_array+0x40>)
 8005c66:	4c0c      	ldr	r4, [pc, #48]	; (8005c98 <__libc_init_array+0x44>)
 8005c68:	f001 f80a 	bl	8006c80 <_init>
 8005c6c:	1b64      	subs	r4, r4, r5
 8005c6e:	10a4      	asrs	r4, r4, #2
 8005c70:	2600      	movs	r6, #0
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	08009968 	.word	0x08009968
 8005c90:	08009968 	.word	0x08009968
 8005c94:	08009968 	.word	0x08009968
 8005c98:	0800996c 	.word	0x0800996c

08005c9c <malloc>:
 8005c9c:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <malloc+0xc>)
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	f000 b871 	b.w	8005d88 <_malloc_r>
 8005ca6:	bf00      	nop
 8005ca8:	20000024 	.word	0x20000024

08005cac <free>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <free+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f000 b819 	b.w	8005ce8 <_free_r>
 8005cb6:	bf00      	nop
 8005cb8:	20000024 	.word	0x20000024

08005cbc <memcpy>:
 8005cbc:	440a      	add	r2, r1
 8005cbe:	4291      	cmp	r1, r2
 8005cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cc4:	d100      	bne.n	8005cc8 <memcpy+0xc>
 8005cc6:	4770      	bx	lr
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd2:	4291      	cmp	r1, r2
 8005cd4:	d1f9      	bne.n	8005cca <memcpy+0xe>
 8005cd6:	bd10      	pop	{r4, pc}

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <_free_r>:
 8005ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d048      	beq.n	8005d80 <_free_r+0x98>
 8005cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf2:	9001      	str	r0, [sp, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8005cfa:	bfb8      	it	lt
 8005cfc:	18e4      	addlt	r4, r4, r3
 8005cfe:	f000 fc19 	bl	8006534 <__malloc_lock>
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <_free_r+0x9c>)
 8005d04:	9801      	ldr	r0, [sp, #4]
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	4615      	mov	r5, r2
 8005d0a:	b933      	cbnz	r3, 8005d1a <_free_r+0x32>
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	6014      	str	r4, [r2, #0]
 8005d10:	b003      	add	sp, #12
 8005d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d16:	f000 bc13 	b.w	8006540 <__malloc_unlock>
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d90b      	bls.n	8005d36 <_free_r+0x4e>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1862      	adds	r2, r4, r1
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf04      	itt	eq
 8005d26:	681a      	ldreq	r2, [r3, #0]
 8005d28:	685b      	ldreq	r3, [r3, #4]
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	bf04      	itt	eq
 8005d2e:	1852      	addeq	r2, r2, r1
 8005d30:	6022      	streq	r2, [r4, #0]
 8005d32:	602c      	str	r4, [r5, #0]
 8005d34:	e7ec      	b.n	8005d10 <_free_r+0x28>
 8005d36:	461a      	mov	r2, r3
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b10b      	cbz	r3, 8005d40 <_free_r+0x58>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d9fa      	bls.n	8005d36 <_free_r+0x4e>
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	1855      	adds	r5, r2, r1
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d10b      	bne.n	8005d60 <_free_r+0x78>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	4421      	add	r1, r4
 8005d4c:	1854      	adds	r4, r2, r1
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	d1dd      	bne.n	8005d10 <_free_r+0x28>
 8005d54:	681c      	ldr	r4, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	4421      	add	r1, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	e7d7      	b.n	8005d10 <_free_r+0x28>
 8005d60:	d902      	bls.n	8005d68 <_free_r+0x80>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	e7d3      	b.n	8005d10 <_free_r+0x28>
 8005d68:	6825      	ldr	r5, [r4, #0]
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf04      	itt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	bf04      	itt	eq
 8005d78:	1949      	addeq	r1, r1, r5
 8005d7a:	6021      	streq	r1, [r4, #0]
 8005d7c:	6054      	str	r4, [r2, #4]
 8005d7e:	e7c7      	b.n	8005d10 <_free_r+0x28>
 8005d80:	b003      	add	sp, #12
 8005d82:	bd30      	pop	{r4, r5, pc}
 8005d84:	200004ac 	.word	0x200004ac

08005d88 <_malloc_r>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	1ccd      	adds	r5, r1, #3
 8005d8c:	f025 0503 	bic.w	r5, r5, #3
 8005d90:	3508      	adds	r5, #8
 8005d92:	2d0c      	cmp	r5, #12
 8005d94:	bf38      	it	cc
 8005d96:	250c      	movcc	r5, #12
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	db01      	blt.n	8005da2 <_malloc_r+0x1a>
 8005d9e:	42a9      	cmp	r1, r5
 8005da0:	d903      	bls.n	8005daa <_malloc_r+0x22>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	2000      	movs	r0, #0
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005daa:	f000 fbc3 	bl	8006534 <__malloc_lock>
 8005dae:	4921      	ldr	r1, [pc, #132]	; (8005e34 <_malloc_r+0xac>)
 8005db0:	680a      	ldr	r2, [r1, #0]
 8005db2:	4614      	mov	r4, r2
 8005db4:	b99c      	cbnz	r4, 8005dde <_malloc_r+0x56>
 8005db6:	4f20      	ldr	r7, [pc, #128]	; (8005e38 <_malloc_r+0xb0>)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b923      	cbnz	r3, 8005dc6 <_malloc_r+0x3e>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f8ca 	bl	8005f58 <_sbrk_r>
 8005dc4:	6038      	str	r0, [r7, #0]
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 f8c5 	bl	8005f58 <_sbrk_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d123      	bne.n	8005e1a <_malloc_r+0x92>
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 fbb2 	bl	8006540 <__malloc_unlock>
 8005ddc:	e7e3      	b.n	8005da6 <_malloc_r+0x1e>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	1b5b      	subs	r3, r3, r5
 8005de2:	d417      	bmi.n	8005e14 <_malloc_r+0x8c>
 8005de4:	2b0b      	cmp	r3, #11
 8005de6:	d903      	bls.n	8005df0 <_malloc_r+0x68>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	441c      	add	r4, r3
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	e004      	b.n	8005dfa <_malloc_r+0x72>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	42a2      	cmp	r2, r4
 8005df4:	bf0c      	ite	eq
 8005df6:	600b      	streq	r3, [r1, #0]
 8005df8:	6053      	strne	r3, [r2, #4]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 fba0 	bl	8006540 <__malloc_unlock>
 8005e00:	f104 000b 	add.w	r0, r4, #11
 8005e04:	1d23      	adds	r3, r4, #4
 8005e06:	f020 0007 	bic.w	r0, r0, #7
 8005e0a:	1ac2      	subs	r2, r0, r3
 8005e0c:	d0cc      	beq.n	8005da8 <_malloc_r+0x20>
 8005e0e:	1a1b      	subs	r3, r3, r0
 8005e10:	50a3      	str	r3, [r4, r2]
 8005e12:	e7c9      	b.n	8005da8 <_malloc_r+0x20>
 8005e14:	4622      	mov	r2, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7cc      	b.n	8005db4 <_malloc_r+0x2c>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d0e3      	beq.n	8005dec <_malloc_r+0x64>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f896 	bl	8005f58 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1dd      	bne.n	8005dec <_malloc_r+0x64>
 8005e30:	e7cf      	b.n	8005dd2 <_malloc_r+0x4a>
 8005e32:	bf00      	nop
 8005e34:	200004ac 	.word	0x200004ac
 8005e38:	200004b0 	.word	0x200004b0

08005e3c <iprintf>:
 8005e3c:	b40f      	push	{r0, r1, r2, r3}
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <iprintf+0x2c>)
 8005e40:	b513      	push	{r0, r1, r4, lr}
 8005e42:	681c      	ldr	r4, [r3, #0]
 8005e44:	b124      	cbz	r4, 8005e50 <iprintf+0x14>
 8005e46:	69a3      	ldr	r3, [r4, #24]
 8005e48:	b913      	cbnz	r3, 8005e50 <iprintf+0x14>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 fa6e 	bl	800632c <__sinit>
 8005e50:	ab05      	add	r3, sp, #20
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fba1 	bl	80065a0 <_vfiprintf_r>
 8005e5e:	b002      	add	sp, #8
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	b004      	add	sp, #16
 8005e66:	4770      	bx	lr
 8005e68:	20000024 	.word	0x20000024

08005e6c <_puts_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	460e      	mov	r6, r1
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <_puts_r+0x10>
 8005e74:	6983      	ldr	r3, [r0, #24]
 8005e76:	b90b      	cbnz	r3, 8005e7c <_puts_r+0x10>
 8005e78:	f000 fa58 	bl	800632c <__sinit>
 8005e7c:	69ab      	ldr	r3, [r5, #24]
 8005e7e:	68ac      	ldr	r4, [r5, #8]
 8005e80:	b913      	cbnz	r3, 8005e88 <_puts_r+0x1c>
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fa52 	bl	800632c <__sinit>
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <_puts_r+0xd0>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d120      	bne.n	8005ed0 <_puts_r+0x64>
 8005e8e:	686c      	ldr	r4, [r5, #4]
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 fae3 	bl	8006468 <__retarget_lock_acquire_recursive>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d51d      	bpl.n	8005ee4 <_puts_r+0x78>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b1db      	cbz	r3, 8005ee4 <_puts_r+0x78>
 8005eac:	3e01      	subs	r6, #1
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	bb39      	cbnz	r1, 8005f0a <_puts_r+0x9e>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da38      	bge.n	8005f30 <_puts_r+0xc4>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 f858 	bl	8005f78 <__swbuf_r>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d011      	beq.n	8005ef0 <_puts_r+0x84>
 8005ecc:	250a      	movs	r5, #10
 8005ece:	e011      	b.n	8005ef4 <_puts_r+0x88>
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <_puts_r+0xd4>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <_puts_r+0x6e>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7da      	b.n	8005e90 <_puts_r+0x24>
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <_puts_r+0xd8>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7d5      	b.n	8005e90 <_puts_r+0x24>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f898 	bl	800601c <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0dd      	beq.n	8005eac <_puts_r+0x40>
 8005ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef6:	07da      	lsls	r2, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_puts_r+0x9a>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_puts_r+0x9a>
 8005f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f02:	f000 fab2 	bl	800646a <__retarget_lock_release_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da04      	bge.n	8005f18 <_puts_r+0xac>
 8005f0e:	69a2      	ldr	r2, [r4, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	dc06      	bgt.n	8005f22 <_puts_r+0xb6>
 8005f14:	290a      	cmp	r1, #10
 8005f16:	d004      	beq.n	8005f22 <_puts_r+0xb6>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	7019      	strb	r1, [r3, #0]
 8005f20:	e7c5      	b.n	8005eae <_puts_r+0x42>
 8005f22:	4622      	mov	r2, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 f827 	bl	8005f78 <__swbuf_r>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d1bf      	bne.n	8005eae <_puts_r+0x42>
 8005f2e:	e7df      	b.n	8005ef0 <_puts_r+0x84>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	250a      	movs	r5, #10
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	701d      	strb	r5, [r3, #0]
 8005f3a:	e7db      	b.n	8005ef4 <_puts_r+0x88>
 8005f3c:	080098ec 	.word	0x080098ec
 8005f40:	0800990c 	.word	0x0800990c
 8005f44:	080098cc 	.word	0x080098cc

08005f48 <puts>:
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <puts+0xc>)
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f7ff bf8d 	b.w	8005e6c <_puts_r>
 8005f52:	bf00      	nop
 8005f54:	20000024 	.word	0x20000024

08005f58 <_sbrk_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d06      	ldr	r5, [pc, #24]	; (8005f74 <_sbrk_r+0x1c>)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fb fd64 	bl	8001a30 <_sbrk>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_sbrk_r+0x1a>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_sbrk_r+0x1a>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	200005bc 	.word	0x200005bc

08005f78 <__swbuf_r>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	460e      	mov	r6, r1
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	4605      	mov	r5, r0
 8005f80:	b118      	cbz	r0, 8005f8a <__swbuf_r+0x12>
 8005f82:	6983      	ldr	r3, [r0, #24]
 8005f84:	b90b      	cbnz	r3, 8005f8a <__swbuf_r+0x12>
 8005f86:	f000 f9d1 	bl	800632c <__sinit>
 8005f8a:	4b21      	ldr	r3, [pc, #132]	; (8006010 <__swbuf_r+0x98>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	d12b      	bne.n	8005fe8 <__swbuf_r+0x70>
 8005f90:	686c      	ldr	r4, [r5, #4]
 8005f92:	69a3      	ldr	r3, [r4, #24]
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	071a      	lsls	r2, r3, #28
 8005f9a:	d52f      	bpl.n	8005ffc <__swbuf_r+0x84>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	b36b      	cbz	r3, 8005ffc <__swbuf_r+0x84>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	6820      	ldr	r0, [r4, #0]
 8005fa4:	1ac0      	subs	r0, r0, r3
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	b2f6      	uxtb	r6, r6
 8005faa:	4283      	cmp	r3, r0
 8005fac:	4637      	mov	r7, r6
 8005fae:	dc04      	bgt.n	8005fba <__swbuf_r+0x42>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 f926 	bl	8006204 <_fflush_r>
 8005fb8:	bb30      	cbnz	r0, 8006008 <__swbuf_r+0x90>
 8005fba:	68a3      	ldr	r3, [r4, #8]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	6022      	str	r2, [r4, #0]
 8005fc6:	701e      	strb	r6, [r3, #0]
 8005fc8:	6963      	ldr	r3, [r4, #20]
 8005fca:	3001      	adds	r0, #1
 8005fcc:	4283      	cmp	r3, r0
 8005fce:	d004      	beq.n	8005fda <__swbuf_r+0x62>
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	07db      	lsls	r3, r3, #31
 8005fd4:	d506      	bpl.n	8005fe4 <__swbuf_r+0x6c>
 8005fd6:	2e0a      	cmp	r6, #10
 8005fd8:	d104      	bne.n	8005fe4 <__swbuf_r+0x6c>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f911 	bl	8006204 <_fflush_r>
 8005fe2:	b988      	cbnz	r0, 8006008 <__swbuf_r+0x90>
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <__swbuf_r+0x9c>)
 8005fea:	429c      	cmp	r4, r3
 8005fec:	d101      	bne.n	8005ff2 <__swbuf_r+0x7a>
 8005fee:	68ac      	ldr	r4, [r5, #8]
 8005ff0:	e7cf      	b.n	8005f92 <__swbuf_r+0x1a>
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <__swbuf_r+0xa0>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	bf08      	it	eq
 8005ff8:	68ec      	ldreq	r4, [r5, #12]
 8005ffa:	e7ca      	b.n	8005f92 <__swbuf_r+0x1a>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 f80c 	bl	800601c <__swsetup_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	d0cb      	beq.n	8005fa0 <__swbuf_r+0x28>
 8006008:	f04f 37ff 	mov.w	r7, #4294967295
 800600c:	e7ea      	b.n	8005fe4 <__swbuf_r+0x6c>
 800600e:	bf00      	nop
 8006010:	080098ec 	.word	0x080098ec
 8006014:	0800990c 	.word	0x0800990c
 8006018:	080098cc 	.word	0x080098cc

0800601c <__swsetup_r>:
 800601c:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <__swsetup_r+0xcc>)
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	b125      	cbz	r5, 8006032 <__swsetup_r+0x16>
 8006028:	69ab      	ldr	r3, [r5, #24]
 800602a:	b913      	cbnz	r3, 8006032 <__swsetup_r+0x16>
 800602c:	4628      	mov	r0, r5
 800602e:	f000 f97d 	bl	800632c <__sinit>
 8006032:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <__swsetup_r+0xd0>)
 8006034:	429c      	cmp	r4, r3
 8006036:	d10f      	bne.n	8006058 <__swsetup_r+0x3c>
 8006038:	686c      	ldr	r4, [r5, #4]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006040:	0719      	lsls	r1, r3, #28
 8006042:	d42c      	bmi.n	800609e <__swsetup_r+0x82>
 8006044:	06dd      	lsls	r5, r3, #27
 8006046:	d411      	bmi.n	800606c <__swsetup_r+0x50>
 8006048:	2309      	movs	r3, #9
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	e03e      	b.n	80060d6 <__swsetup_r+0xba>
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <__swsetup_r+0xd4>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d101      	bne.n	8006062 <__swsetup_r+0x46>
 800605e:	68ac      	ldr	r4, [r5, #8]
 8006060:	e7eb      	b.n	800603a <__swsetup_r+0x1e>
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <__swsetup_r+0xd8>)
 8006064:	429c      	cmp	r4, r3
 8006066:	bf08      	it	eq
 8006068:	68ec      	ldreq	r4, [r5, #12]
 800606a:	e7e6      	b.n	800603a <__swsetup_r+0x1e>
 800606c:	0758      	lsls	r0, r3, #29
 800606e:	d512      	bpl.n	8006096 <__swsetup_r+0x7a>
 8006070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006072:	b141      	cbz	r1, 8006086 <__swsetup_r+0x6a>
 8006074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006078:	4299      	cmp	r1, r3
 800607a:	d002      	beq.n	8006082 <__swsetup_r+0x66>
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff fe33 	bl	8005ce8 <_free_r>
 8006082:	2300      	movs	r3, #0
 8006084:	6363      	str	r3, [r4, #52]	; 0x34
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	2300      	movs	r3, #0
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	f043 0308 	orr.w	r3, r3, #8
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	b94b      	cbnz	r3, 80060b6 <__swsetup_r+0x9a>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ac:	d003      	beq.n	80060b6 <__swsetup_r+0x9a>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4630      	mov	r0, r6
 80060b2:	f000 f9ff 	bl	80064b4 <__smakebuf_r>
 80060b6:	89a0      	ldrh	r0, [r4, #12]
 80060b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060bc:	f010 0301 	ands.w	r3, r0, #1
 80060c0:	d00a      	beq.n	80060d8 <__swsetup_r+0xbc>
 80060c2:	2300      	movs	r3, #0
 80060c4:	60a3      	str	r3, [r4, #8]
 80060c6:	6963      	ldr	r3, [r4, #20]
 80060c8:	425b      	negs	r3, r3
 80060ca:	61a3      	str	r3, [r4, #24]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	b943      	cbnz	r3, 80060e2 <__swsetup_r+0xc6>
 80060d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060d4:	d1ba      	bne.n	800604c <__swsetup_r+0x30>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	0781      	lsls	r1, r0, #30
 80060da:	bf58      	it	pl
 80060dc:	6963      	ldrpl	r3, [r4, #20]
 80060de:	60a3      	str	r3, [r4, #8]
 80060e0:	e7f4      	b.n	80060cc <__swsetup_r+0xb0>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e7f7      	b.n	80060d6 <__swsetup_r+0xba>
 80060e6:	bf00      	nop
 80060e8:	20000024 	.word	0x20000024
 80060ec:	080098ec 	.word	0x080098ec
 80060f0:	0800990c 	.word	0x0800990c
 80060f4:	080098cc 	.word	0x080098cc

080060f8 <__sflush_r>:
 80060f8:	898a      	ldrh	r2, [r1, #12]
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	4605      	mov	r5, r0
 8006100:	0710      	lsls	r0, r2, #28
 8006102:	460c      	mov	r4, r1
 8006104:	d458      	bmi.n	80061b8 <__sflush_r+0xc0>
 8006106:	684b      	ldr	r3, [r1, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	dc05      	bgt.n	8006118 <__sflush_r+0x20>
 800610c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	dc02      	bgt.n	8006118 <__sflush_r+0x20>
 8006112:	2000      	movs	r0, #0
 8006114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800611a:	2e00      	cmp	r6, #0
 800611c:	d0f9      	beq.n	8006112 <__sflush_r+0x1a>
 800611e:	2300      	movs	r3, #0
 8006120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006124:	682f      	ldr	r7, [r5, #0]
 8006126:	602b      	str	r3, [r5, #0]
 8006128:	d032      	beq.n	8006190 <__sflush_r+0x98>
 800612a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	075a      	lsls	r2, r3, #29
 8006130:	d505      	bpl.n	800613e <__sflush_r+0x46>
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	1ac0      	subs	r0, r0, r3
 8006136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006138:	b10b      	cbz	r3, 800613e <__sflush_r+0x46>
 800613a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800613c:	1ac0      	subs	r0, r0, r3
 800613e:	2300      	movs	r3, #0
 8006140:	4602      	mov	r2, r0
 8006142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006144:	6a21      	ldr	r1, [r4, #32]
 8006146:	4628      	mov	r0, r5
 8006148:	47b0      	blx	r6
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	d106      	bne.n	800615e <__sflush_r+0x66>
 8006150:	6829      	ldr	r1, [r5, #0]
 8006152:	291d      	cmp	r1, #29
 8006154:	d82c      	bhi.n	80061b0 <__sflush_r+0xb8>
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <__sflush_r+0x108>)
 8006158:	40ca      	lsrs	r2, r1
 800615a:	07d6      	lsls	r6, r2, #31
 800615c:	d528      	bpl.n	80061b0 <__sflush_r+0xb8>
 800615e:	2200      	movs	r2, #0
 8006160:	6062      	str	r2, [r4, #4]
 8006162:	04d9      	lsls	r1, r3, #19
 8006164:	6922      	ldr	r2, [r4, #16]
 8006166:	6022      	str	r2, [r4, #0]
 8006168:	d504      	bpl.n	8006174 <__sflush_r+0x7c>
 800616a:	1c42      	adds	r2, r0, #1
 800616c:	d101      	bne.n	8006172 <__sflush_r+0x7a>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	b903      	cbnz	r3, 8006174 <__sflush_r+0x7c>
 8006172:	6560      	str	r0, [r4, #84]	; 0x54
 8006174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006176:	602f      	str	r7, [r5, #0]
 8006178:	2900      	cmp	r1, #0
 800617a:	d0ca      	beq.n	8006112 <__sflush_r+0x1a>
 800617c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006180:	4299      	cmp	r1, r3
 8006182:	d002      	beq.n	800618a <__sflush_r+0x92>
 8006184:	4628      	mov	r0, r5
 8006186:	f7ff fdaf 	bl	8005ce8 <_free_r>
 800618a:	2000      	movs	r0, #0
 800618c:	6360      	str	r0, [r4, #52]	; 0x34
 800618e:	e7c1      	b.n	8006114 <__sflush_r+0x1c>
 8006190:	6a21      	ldr	r1, [r4, #32]
 8006192:	2301      	movs	r3, #1
 8006194:	4628      	mov	r0, r5
 8006196:	47b0      	blx	r6
 8006198:	1c41      	adds	r1, r0, #1
 800619a:	d1c7      	bne.n	800612c <__sflush_r+0x34>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0c4      	beq.n	800612c <__sflush_r+0x34>
 80061a2:	2b1d      	cmp	r3, #29
 80061a4:	d001      	beq.n	80061aa <__sflush_r+0xb2>
 80061a6:	2b16      	cmp	r3, #22
 80061a8:	d101      	bne.n	80061ae <__sflush_r+0xb6>
 80061aa:	602f      	str	r7, [r5, #0]
 80061ac:	e7b1      	b.n	8006112 <__sflush_r+0x1a>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	e7ad      	b.n	8006114 <__sflush_r+0x1c>
 80061b8:	690f      	ldr	r7, [r1, #16]
 80061ba:	2f00      	cmp	r7, #0
 80061bc:	d0a9      	beq.n	8006112 <__sflush_r+0x1a>
 80061be:	0793      	lsls	r3, r2, #30
 80061c0:	680e      	ldr	r6, [r1, #0]
 80061c2:	bf08      	it	eq
 80061c4:	694b      	ldreq	r3, [r1, #20]
 80061c6:	600f      	str	r7, [r1, #0]
 80061c8:	bf18      	it	ne
 80061ca:	2300      	movne	r3, #0
 80061cc:	eba6 0807 	sub.w	r8, r6, r7
 80061d0:	608b      	str	r3, [r1, #8]
 80061d2:	f1b8 0f00 	cmp.w	r8, #0
 80061d6:	dd9c      	ble.n	8006112 <__sflush_r+0x1a>
 80061d8:	6a21      	ldr	r1, [r4, #32]
 80061da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061dc:	4643      	mov	r3, r8
 80061de:	463a      	mov	r2, r7
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b0      	blx	r6
 80061e4:	2800      	cmp	r0, #0
 80061e6:	dc06      	bgt.n	80061f6 <__sflush_r+0xfe>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e78e      	b.n	8006114 <__sflush_r+0x1c>
 80061f6:	4407      	add	r7, r0
 80061f8:	eba8 0800 	sub.w	r8, r8, r0
 80061fc:	e7e9      	b.n	80061d2 <__sflush_r+0xda>
 80061fe:	bf00      	nop
 8006200:	20400001 	.word	0x20400001

08006204 <_fflush_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	690b      	ldr	r3, [r1, #16]
 8006208:	4605      	mov	r5, r0
 800620a:	460c      	mov	r4, r1
 800620c:	b913      	cbnz	r3, 8006214 <_fflush_r+0x10>
 800620e:	2500      	movs	r5, #0
 8006210:	4628      	mov	r0, r5
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	b118      	cbz	r0, 800621e <_fflush_r+0x1a>
 8006216:	6983      	ldr	r3, [r0, #24]
 8006218:	b90b      	cbnz	r3, 800621e <_fflush_r+0x1a>
 800621a:	f000 f887 	bl	800632c <__sinit>
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <_fflush_r+0x6c>)
 8006220:	429c      	cmp	r4, r3
 8006222:	d11b      	bne.n	800625c <_fflush_r+0x58>
 8006224:	686c      	ldr	r4, [r5, #4]
 8006226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0ef      	beq.n	800620e <_fflush_r+0xa>
 800622e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006230:	07d0      	lsls	r0, r2, #31
 8006232:	d404      	bmi.n	800623e <_fflush_r+0x3a>
 8006234:	0599      	lsls	r1, r3, #22
 8006236:	d402      	bmi.n	800623e <_fflush_r+0x3a>
 8006238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623a:	f000 f915 	bl	8006468 <__retarget_lock_acquire_recursive>
 800623e:	4628      	mov	r0, r5
 8006240:	4621      	mov	r1, r4
 8006242:	f7ff ff59 	bl	80060f8 <__sflush_r>
 8006246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006248:	07da      	lsls	r2, r3, #31
 800624a:	4605      	mov	r5, r0
 800624c:	d4e0      	bmi.n	8006210 <_fflush_r+0xc>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	059b      	lsls	r3, r3, #22
 8006252:	d4dd      	bmi.n	8006210 <_fflush_r+0xc>
 8006254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006256:	f000 f908 	bl	800646a <__retarget_lock_release_recursive>
 800625a:	e7d9      	b.n	8006210 <_fflush_r+0xc>
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <_fflush_r+0x70>)
 800625e:	429c      	cmp	r4, r3
 8006260:	d101      	bne.n	8006266 <_fflush_r+0x62>
 8006262:	68ac      	ldr	r4, [r5, #8]
 8006264:	e7df      	b.n	8006226 <_fflush_r+0x22>
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <_fflush_r+0x74>)
 8006268:	429c      	cmp	r4, r3
 800626a:	bf08      	it	eq
 800626c:	68ec      	ldreq	r4, [r5, #12]
 800626e:	e7da      	b.n	8006226 <_fflush_r+0x22>
 8006270:	080098ec 	.word	0x080098ec
 8006274:	0800990c 	.word	0x0800990c
 8006278:	080098cc 	.word	0x080098cc

0800627c <std>:
 800627c:	2300      	movs	r3, #0
 800627e:	b510      	push	{r4, lr}
 8006280:	4604      	mov	r4, r0
 8006282:	e9c0 3300 	strd	r3, r3, [r0]
 8006286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800628a:	6083      	str	r3, [r0, #8]
 800628c:	8181      	strh	r1, [r0, #12]
 800628e:	6643      	str	r3, [r0, #100]	; 0x64
 8006290:	81c2      	strh	r2, [r0, #14]
 8006292:	6183      	str	r3, [r0, #24]
 8006294:	4619      	mov	r1, r3
 8006296:	2208      	movs	r2, #8
 8006298:	305c      	adds	r0, #92	; 0x5c
 800629a:	f7ff fd1d 	bl	8005cd8 <memset>
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <std+0x38>)
 80062a0:	6263      	str	r3, [r4, #36]	; 0x24
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <std+0x3c>)
 80062a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <std+0x40>)
 80062a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <std+0x44>)
 80062ac:	6224      	str	r4, [r4, #32]
 80062ae:	6323      	str	r3, [r4, #48]	; 0x30
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	08006b29 	.word	0x08006b29
 80062b8:	08006b4b 	.word	0x08006b4b
 80062bc:	08006b83 	.word	0x08006b83
 80062c0:	08006ba7 	.word	0x08006ba7

080062c4 <_cleanup_r>:
 80062c4:	4901      	ldr	r1, [pc, #4]	; (80062cc <_cleanup_r+0x8>)
 80062c6:	f000 b8af 	b.w	8006428 <_fwalk_reent>
 80062ca:	bf00      	nop
 80062cc:	08006205 	.word	0x08006205

080062d0 <__sfmoreglue>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	1e4a      	subs	r2, r1, #1
 80062d4:	2568      	movs	r5, #104	; 0x68
 80062d6:	4355      	muls	r5, r2
 80062d8:	460e      	mov	r6, r1
 80062da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062de:	f7ff fd53 	bl	8005d88 <_malloc_r>
 80062e2:	4604      	mov	r4, r0
 80062e4:	b140      	cbz	r0, 80062f8 <__sfmoreglue+0x28>
 80062e6:	2100      	movs	r1, #0
 80062e8:	e9c0 1600 	strd	r1, r6, [r0]
 80062ec:	300c      	adds	r0, #12
 80062ee:	60a0      	str	r0, [r4, #8]
 80062f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062f4:	f7ff fcf0 	bl	8005cd8 <memset>
 80062f8:	4620      	mov	r0, r4
 80062fa:	bd70      	pop	{r4, r5, r6, pc}

080062fc <__sfp_lock_acquire>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__sfp_lock_acquire+0x8>)
 80062fe:	f000 b8b3 	b.w	8006468 <__retarget_lock_acquire_recursive>
 8006302:	bf00      	nop
 8006304:	200005b8 	.word	0x200005b8

08006308 <__sfp_lock_release>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__sfp_lock_release+0x8>)
 800630a:	f000 b8ae 	b.w	800646a <__retarget_lock_release_recursive>
 800630e:	bf00      	nop
 8006310:	200005b8 	.word	0x200005b8

08006314 <__sinit_lock_acquire>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__sinit_lock_acquire+0x8>)
 8006316:	f000 b8a7 	b.w	8006468 <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	200005b3 	.word	0x200005b3

08006320 <__sinit_lock_release>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__sinit_lock_release+0x8>)
 8006322:	f000 b8a2 	b.w	800646a <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	200005b3 	.word	0x200005b3

0800632c <__sinit>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	f7ff fff0 	bl	8006314 <__sinit_lock_acquire>
 8006334:	69a3      	ldr	r3, [r4, #24]
 8006336:	b11b      	cbz	r3, 8006340 <__sinit+0x14>
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f7ff bff0 	b.w	8006320 <__sinit_lock_release>
 8006340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006344:	6523      	str	r3, [r4, #80]	; 0x50
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <__sinit+0x68>)
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <__sinit+0x6c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	62a2      	str	r2, [r4, #40]	; 0x28
 800634e:	42a3      	cmp	r3, r4
 8006350:	bf04      	itt	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	61a3      	streq	r3, [r4, #24]
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f820 	bl	800639c <__sfp>
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	4620      	mov	r0, r4
 8006360:	f000 f81c 	bl	800639c <__sfp>
 8006364:	60a0      	str	r0, [r4, #8]
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f818 	bl	800639c <__sfp>
 800636c:	2200      	movs	r2, #0
 800636e:	60e0      	str	r0, [r4, #12]
 8006370:	2104      	movs	r1, #4
 8006372:	6860      	ldr	r0, [r4, #4]
 8006374:	f7ff ff82 	bl	800627c <std>
 8006378:	68a0      	ldr	r0, [r4, #8]
 800637a:	2201      	movs	r2, #1
 800637c:	2109      	movs	r1, #9
 800637e:	f7ff ff7d 	bl	800627c <std>
 8006382:	68e0      	ldr	r0, [r4, #12]
 8006384:	2202      	movs	r2, #2
 8006386:	2112      	movs	r1, #18
 8006388:	f7ff ff78 	bl	800627c <std>
 800638c:	2301      	movs	r3, #1
 800638e:	61a3      	str	r3, [r4, #24]
 8006390:	e7d2      	b.n	8006338 <__sinit+0xc>
 8006392:	bf00      	nop
 8006394:	080098c8 	.word	0x080098c8
 8006398:	080062c5 	.word	0x080062c5

0800639c <__sfp>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	4607      	mov	r7, r0
 80063a0:	f7ff ffac 	bl	80062fc <__sfp_lock_acquire>
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <__sfp+0x84>)
 80063a6:	681e      	ldr	r6, [r3, #0]
 80063a8:	69b3      	ldr	r3, [r6, #24]
 80063aa:	b913      	cbnz	r3, 80063b2 <__sfp+0x16>
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff ffbd 	bl	800632c <__sinit>
 80063b2:	3648      	adds	r6, #72	; 0x48
 80063b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	d503      	bpl.n	80063c4 <__sfp+0x28>
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	b30b      	cbz	r3, 8006404 <__sfp+0x68>
 80063c0:	6836      	ldr	r6, [r6, #0]
 80063c2:	e7f7      	b.n	80063b4 <__sfp+0x18>
 80063c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063c8:	b9d5      	cbnz	r5, 8006400 <__sfp+0x64>
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <__sfp+0x88>)
 80063cc:	60e3      	str	r3, [r4, #12]
 80063ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063d2:	6665      	str	r5, [r4, #100]	; 0x64
 80063d4:	f000 f847 	bl	8006466 <__retarget_lock_init_recursive>
 80063d8:	f7ff ff96 	bl	8006308 <__sfp_lock_release>
 80063dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063e4:	6025      	str	r5, [r4, #0]
 80063e6:	61a5      	str	r5, [r4, #24]
 80063e8:	2208      	movs	r2, #8
 80063ea:	4629      	mov	r1, r5
 80063ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063f0:	f7ff fc72 	bl	8005cd8 <memset>
 80063f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063fc:	4620      	mov	r0, r4
 80063fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006400:	3468      	adds	r4, #104	; 0x68
 8006402:	e7d9      	b.n	80063b8 <__sfp+0x1c>
 8006404:	2104      	movs	r1, #4
 8006406:	4638      	mov	r0, r7
 8006408:	f7ff ff62 	bl	80062d0 <__sfmoreglue>
 800640c:	4604      	mov	r4, r0
 800640e:	6030      	str	r0, [r6, #0]
 8006410:	2800      	cmp	r0, #0
 8006412:	d1d5      	bne.n	80063c0 <__sfp+0x24>
 8006414:	f7ff ff78 	bl	8006308 <__sfp_lock_release>
 8006418:	230c      	movs	r3, #12
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	e7ee      	b.n	80063fc <__sfp+0x60>
 800641e:	bf00      	nop
 8006420:	080098c8 	.word	0x080098c8
 8006424:	ffff0001 	.word	0xffff0001

08006428 <_fwalk_reent>:
 8006428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800642c:	4606      	mov	r6, r0
 800642e:	4688      	mov	r8, r1
 8006430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006434:	2700      	movs	r7, #0
 8006436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800643a:	f1b9 0901 	subs.w	r9, r9, #1
 800643e:	d505      	bpl.n	800644c <_fwalk_reent+0x24>
 8006440:	6824      	ldr	r4, [r4, #0]
 8006442:	2c00      	cmp	r4, #0
 8006444:	d1f7      	bne.n	8006436 <_fwalk_reent+0xe>
 8006446:	4638      	mov	r0, r7
 8006448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644c:	89ab      	ldrh	r3, [r5, #12]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d907      	bls.n	8006462 <_fwalk_reent+0x3a>
 8006452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006456:	3301      	adds	r3, #1
 8006458:	d003      	beq.n	8006462 <_fwalk_reent+0x3a>
 800645a:	4629      	mov	r1, r5
 800645c:	4630      	mov	r0, r6
 800645e:	47c0      	blx	r8
 8006460:	4307      	orrs	r7, r0
 8006462:	3568      	adds	r5, #104	; 0x68
 8006464:	e7e9      	b.n	800643a <_fwalk_reent+0x12>

08006466 <__retarget_lock_init_recursive>:
 8006466:	4770      	bx	lr

08006468 <__retarget_lock_acquire_recursive>:
 8006468:	4770      	bx	lr

0800646a <__retarget_lock_release_recursive>:
 800646a:	4770      	bx	lr

0800646c <__swhatbuf_r>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	460e      	mov	r6, r1
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	2900      	cmp	r1, #0
 8006476:	b096      	sub	sp, #88	; 0x58
 8006478:	4614      	mov	r4, r2
 800647a:	461d      	mov	r5, r3
 800647c:	da07      	bge.n	800648e <__swhatbuf_r+0x22>
 800647e:	2300      	movs	r3, #0
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	89b3      	ldrh	r3, [r6, #12]
 8006484:	061a      	lsls	r2, r3, #24
 8006486:	d410      	bmi.n	80064aa <__swhatbuf_r+0x3e>
 8006488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800648c:	e00e      	b.n	80064ac <__swhatbuf_r+0x40>
 800648e:	466a      	mov	r2, sp
 8006490:	f000 fbb0 	bl	8006bf4 <_fstat_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	dbf2      	blt.n	800647e <__swhatbuf_r+0x12>
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800649e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064a2:	425a      	negs	r2, r3
 80064a4:	415a      	adcs	r2, r3
 80064a6:	602a      	str	r2, [r5, #0]
 80064a8:	e7ee      	b.n	8006488 <__swhatbuf_r+0x1c>
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	2000      	movs	r0, #0
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	b016      	add	sp, #88	; 0x58
 80064b2:	bd70      	pop	{r4, r5, r6, pc}

080064b4 <__smakebuf_r>:
 80064b4:	898b      	ldrh	r3, [r1, #12]
 80064b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064b8:	079d      	lsls	r5, r3, #30
 80064ba:	4606      	mov	r6, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	d507      	bpl.n	80064d0 <__smakebuf_r+0x1c>
 80064c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	2301      	movs	r3, #1
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	b002      	add	sp, #8
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	ab01      	add	r3, sp, #4
 80064d2:	466a      	mov	r2, sp
 80064d4:	f7ff ffca 	bl	800646c <__swhatbuf_r>
 80064d8:	9900      	ldr	r1, [sp, #0]
 80064da:	4605      	mov	r5, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fc53 	bl	8005d88 <_malloc_r>
 80064e2:	b948      	cbnz	r0, 80064f8 <__smakebuf_r+0x44>
 80064e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e8:	059a      	lsls	r2, r3, #22
 80064ea:	d4ef      	bmi.n	80064cc <__smakebuf_r+0x18>
 80064ec:	f023 0303 	bic.w	r3, r3, #3
 80064f0:	f043 0302 	orr.w	r3, r3, #2
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	e7e3      	b.n	80064c0 <__smakebuf_r+0xc>
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <__smakebuf_r+0x7c>)
 80064fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	6020      	str	r0, [r4, #0]
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	6163      	str	r3, [r4, #20]
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	6120      	str	r0, [r4, #16]
 800650e:	b15b      	cbz	r3, 8006528 <__smakebuf_r+0x74>
 8006510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006514:	4630      	mov	r0, r6
 8006516:	f000 fb7f 	bl	8006c18 <_isatty_r>
 800651a:	b128      	cbz	r0, 8006528 <__smakebuf_r+0x74>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	89a0      	ldrh	r0, [r4, #12]
 800652a:	4305      	orrs	r5, r0
 800652c:	81a5      	strh	r5, [r4, #12]
 800652e:	e7cd      	b.n	80064cc <__smakebuf_r+0x18>
 8006530:	080062c5 	.word	0x080062c5

08006534 <__malloc_lock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_lock+0x8>)
 8006536:	f7ff bf97 	b.w	8006468 <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	200005b4 	.word	0x200005b4

08006540 <__malloc_unlock>:
 8006540:	4801      	ldr	r0, [pc, #4]	; (8006548 <__malloc_unlock+0x8>)
 8006542:	f7ff bf92 	b.w	800646a <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	200005b4 	.word	0x200005b4

0800654c <__sfputc_r>:
 800654c:	6893      	ldr	r3, [r2, #8]
 800654e:	3b01      	subs	r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	b410      	push	{r4}
 8006554:	6093      	str	r3, [r2, #8]
 8006556:	da08      	bge.n	800656a <__sfputc_r+0x1e>
 8006558:	6994      	ldr	r4, [r2, #24]
 800655a:	42a3      	cmp	r3, r4
 800655c:	db01      	blt.n	8006562 <__sfputc_r+0x16>
 800655e:	290a      	cmp	r1, #10
 8006560:	d103      	bne.n	800656a <__sfputc_r+0x1e>
 8006562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006566:	f7ff bd07 	b.w	8005f78 <__swbuf_r>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	1c58      	adds	r0, r3, #1
 800656e:	6010      	str	r0, [r2, #0]
 8006570:	7019      	strb	r1, [r3, #0]
 8006572:	4608      	mov	r0, r1
 8006574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006578:	4770      	bx	lr

0800657a <__sfputs_r>:
 800657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4614      	mov	r4, r2
 8006582:	18d5      	adds	r5, r2, r3
 8006584:	42ac      	cmp	r4, r5
 8006586:	d101      	bne.n	800658c <__sfputs_r+0x12>
 8006588:	2000      	movs	r0, #0
 800658a:	e007      	b.n	800659c <__sfputs_r+0x22>
 800658c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006590:	463a      	mov	r2, r7
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ffda 	bl	800654c <__sfputc_r>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d1f3      	bne.n	8006584 <__sfputs_r+0xa>
 800659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065a0 <_vfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460d      	mov	r5, r1
 80065a6:	b09d      	sub	sp, #116	; 0x74
 80065a8:	4614      	mov	r4, r2
 80065aa:	4698      	mov	r8, r3
 80065ac:	4606      	mov	r6, r0
 80065ae:	b118      	cbz	r0, 80065b8 <_vfiprintf_r+0x18>
 80065b0:	6983      	ldr	r3, [r0, #24]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_vfiprintf_r+0x18>
 80065b4:	f7ff feba 	bl	800632c <__sinit>
 80065b8:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <_vfiprintf_r+0x240>)
 80065ba:	429d      	cmp	r5, r3
 80065bc:	d11b      	bne.n	80065f6 <_vfiprintf_r+0x56>
 80065be:	6875      	ldr	r5, [r6, #4]
 80065c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ce:	f7ff ff4b 	bl	8006468 <__retarget_lock_acquire_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d501      	bpl.n	80065dc <_vfiprintf_r+0x3c>
 80065d8:	692b      	ldr	r3, [r5, #16]
 80065da:	b9eb      	cbnz	r3, 8006618 <_vfiprintf_r+0x78>
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff fd1c 	bl	800601c <__swsetup_r>
 80065e4:	b1c0      	cbz	r0, 8006618 <_vfiprintf_r+0x78>
 80065e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e8:	07dc      	lsls	r4, r3, #31
 80065ea:	d50e      	bpl.n	800660a <_vfiprintf_r+0x6a>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b01d      	add	sp, #116	; 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	4b7b      	ldr	r3, [pc, #492]	; (80067e4 <_vfiprintf_r+0x244>)
 80065f8:	429d      	cmp	r5, r3
 80065fa:	d101      	bne.n	8006600 <_vfiprintf_r+0x60>
 80065fc:	68b5      	ldr	r5, [r6, #8]
 80065fe:	e7df      	b.n	80065c0 <_vfiprintf_r+0x20>
 8006600:	4b79      	ldr	r3, [pc, #484]	; (80067e8 <_vfiprintf_r+0x248>)
 8006602:	429d      	cmp	r5, r3
 8006604:	bf08      	it	eq
 8006606:	68f5      	ldreq	r5, [r6, #12]
 8006608:	e7da      	b.n	80065c0 <_vfiprintf_r+0x20>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	0598      	lsls	r0, r3, #22
 800660e:	d4ed      	bmi.n	80065ec <_vfiprintf_r+0x4c>
 8006610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006612:	f7ff ff2a 	bl	800646a <__retarget_lock_release_recursive>
 8006616:	e7e9      	b.n	80065ec <_vfiprintf_r+0x4c>
 8006618:	2300      	movs	r3, #0
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	2320      	movs	r3, #32
 800661e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006622:	f8cd 800c 	str.w	r8, [sp, #12]
 8006626:	2330      	movs	r3, #48	; 0x30
 8006628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067ec <_vfiprintf_r+0x24c>
 800662c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006630:	f04f 0901 	mov.w	r9, #1
 8006634:	4623      	mov	r3, r4
 8006636:	469a      	mov	sl, r3
 8006638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663c:	b10a      	cbz	r2, 8006642 <_vfiprintf_r+0xa2>
 800663e:	2a25      	cmp	r2, #37	; 0x25
 8006640:	d1f9      	bne.n	8006636 <_vfiprintf_r+0x96>
 8006642:	ebba 0b04 	subs.w	fp, sl, r4
 8006646:	d00b      	beq.n	8006660 <_vfiprintf_r+0xc0>
 8006648:	465b      	mov	r3, fp
 800664a:	4622      	mov	r2, r4
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff93 	bl	800657a <__sfputs_r>
 8006654:	3001      	adds	r0, #1
 8006656:	f000 80aa 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665c:	445a      	add	r2, fp
 800665e:	9209      	str	r2, [sp, #36]	; 0x24
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a2 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800666a:	2300      	movs	r3, #0
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006674:	f10a 0a01 	add.w	sl, sl, #1
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006680:	931a      	str	r3, [sp, #104]	; 0x68
 8006682:	4654      	mov	r4, sl
 8006684:	2205      	movs	r2, #5
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	4858      	ldr	r0, [pc, #352]	; (80067ec <_vfiprintf_r+0x24c>)
 800668c:	f7f9 fdb0 	bl	80001f0 <memchr>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	b9d8      	cbnz	r0, 80066cc <_vfiprintf_r+0x12c>
 8006694:	06d1      	lsls	r1, r2, #27
 8006696:	bf44      	itt	mi
 8006698:	2320      	movmi	r3, #32
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669e:	0713      	lsls	r3, r2, #28
 80066a0:	bf44      	itt	mi
 80066a2:	232b      	movmi	r3, #43	; 0x2b
 80066a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d015      	beq.n	80066dc <_vfiprintf_r+0x13c>
 80066b0:	9a07      	ldr	r2, [sp, #28]
 80066b2:	4654      	mov	r4, sl
 80066b4:	2000      	movs	r0, #0
 80066b6:	f04f 0c0a 	mov.w	ip, #10
 80066ba:	4621      	mov	r1, r4
 80066bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c0:	3b30      	subs	r3, #48	; 0x30
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d94e      	bls.n	8006764 <_vfiprintf_r+0x1c4>
 80066c6:	b1b0      	cbz	r0, 80066f6 <_vfiprintf_r+0x156>
 80066c8:	9207      	str	r2, [sp, #28]
 80066ca:	e014      	b.n	80066f6 <_vfiprintf_r+0x156>
 80066cc:	eba0 0308 	sub.w	r3, r0, r8
 80066d0:	fa09 f303 	lsl.w	r3, r9, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	46a2      	mov	sl, r4
 80066da:	e7d2      	b.n	8006682 <_vfiprintf_r+0xe2>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d19      	adds	r1, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9103      	str	r1, [sp, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbb      	ittet	lt
 80066e8:	425b      	neglt	r3, r3
 80066ea:	f042 0202 	orrlt.w	r2, r2, #2
 80066ee:	9307      	strge	r3, [sp, #28]
 80066f0:	9307      	strlt	r3, [sp, #28]
 80066f2:	bfb8      	it	lt
 80066f4:	9204      	strlt	r2, [sp, #16]
 80066f6:	7823      	ldrb	r3, [r4, #0]
 80066f8:	2b2e      	cmp	r3, #46	; 0x2e
 80066fa:	d10c      	bne.n	8006716 <_vfiprintf_r+0x176>
 80066fc:	7863      	ldrb	r3, [r4, #1]
 80066fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006700:	d135      	bne.n	800676e <_vfiprintf_r+0x1ce>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9203      	str	r2, [sp, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006712:	3402      	adds	r4, #2
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067fc <_vfiprintf_r+0x25c>
 800671a:	7821      	ldrb	r1, [r4, #0]
 800671c:	2203      	movs	r2, #3
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 fd66 	bl	80001f0 <memchr>
 8006724:	b140      	cbz	r0, 8006738 <_vfiprintf_r+0x198>
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	eba0 000a 	sub.w	r0, r0, sl
 800672c:	fa03 f000 	lsl.w	r0, r3, r0
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	4303      	orrs	r3, r0
 8006734:	3401      	adds	r4, #1
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	482c      	ldr	r0, [pc, #176]	; (80067f0 <_vfiprintf_r+0x250>)
 800673e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006742:	2206      	movs	r2, #6
 8006744:	f7f9 fd54 	bl	80001f0 <memchr>
 8006748:	2800      	cmp	r0, #0
 800674a:	d03f      	beq.n	80067cc <_vfiprintf_r+0x22c>
 800674c:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <_vfiprintf_r+0x254>)
 800674e:	bb1b      	cbnz	r3, 8006798 <_vfiprintf_r+0x1f8>
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	3307      	adds	r3, #7
 8006754:	f023 0307 	bic.w	r3, r3, #7
 8006758:	3308      	adds	r3, #8
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	443b      	add	r3, r7
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	e767      	b.n	8006634 <_vfiprintf_r+0x94>
 8006764:	fb0c 3202 	mla	r2, ip, r2, r3
 8006768:	460c      	mov	r4, r1
 800676a:	2001      	movs	r0, #1
 800676c:	e7a5      	b.n	80066ba <_vfiprintf_r+0x11a>
 800676e:	2300      	movs	r3, #0
 8006770:	3401      	adds	r4, #1
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	4619      	mov	r1, r3
 8006776:	f04f 0c0a 	mov.w	ip, #10
 800677a:	4620      	mov	r0, r4
 800677c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006780:	3a30      	subs	r2, #48	; 0x30
 8006782:	2a09      	cmp	r2, #9
 8006784:	d903      	bls.n	800678e <_vfiprintf_r+0x1ee>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c5      	beq.n	8006716 <_vfiprintf_r+0x176>
 800678a:	9105      	str	r1, [sp, #20]
 800678c:	e7c3      	b.n	8006716 <_vfiprintf_r+0x176>
 800678e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006792:	4604      	mov	r4, r0
 8006794:	2301      	movs	r3, #1
 8006796:	e7f0      	b.n	800677a <_vfiprintf_r+0x1da>
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	462a      	mov	r2, r5
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <_vfiprintf_r+0x258>)
 80067a0:	a904      	add	r1, sp, #16
 80067a2:	4630      	mov	r0, r6
 80067a4:	f3af 8000 	nop.w
 80067a8:	4607      	mov	r7, r0
 80067aa:	1c78      	adds	r0, r7, #1
 80067ac:	d1d6      	bne.n	800675c <_vfiprintf_r+0x1bc>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b0:	07d9      	lsls	r1, r3, #31
 80067b2:	d405      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067b4:	89ab      	ldrh	r3, [r5, #12]
 80067b6:	059a      	lsls	r2, r3, #22
 80067b8:	d402      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067bc:	f7ff fe55 	bl	800646a <__retarget_lock_release_recursive>
 80067c0:	89ab      	ldrh	r3, [r5, #12]
 80067c2:	065b      	lsls	r3, r3, #25
 80067c4:	f53f af12 	bmi.w	80065ec <_vfiprintf_r+0x4c>
 80067c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ca:	e711      	b.n	80065f0 <_vfiprintf_r+0x50>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <_vfiprintf_r+0x258>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4630      	mov	r0, r6
 80067d8:	f000 f880 	bl	80068dc <_printf_i>
 80067dc:	e7e4      	b.n	80067a8 <_vfiprintf_r+0x208>
 80067de:	bf00      	nop
 80067e0:	080098ec 	.word	0x080098ec
 80067e4:	0800990c 	.word	0x0800990c
 80067e8:	080098cc 	.word	0x080098cc
 80067ec:	0800992c 	.word	0x0800992c
 80067f0:	08009936 	.word	0x08009936
 80067f4:	00000000 	.word	0x00000000
 80067f8:	0800657b 	.word	0x0800657b
 80067fc:	08009932 	.word	0x08009932

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4699      	mov	r9, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006810:	4293      	cmp	r3, r2
 8006812:	bfb8      	it	lt
 8006814:	4613      	movlt	r3, r2
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800681c:	4607      	mov	r7, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc26      	bgt.n	8006896 <_printf_common+0x96>
 8006848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800684c:	1e13      	subs	r3, r2, #0
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d42b      	bmi.n	80068b0 <_printf_common+0xb0>
 8006858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800685c:	4649      	mov	r1, r9
 800685e:	4638      	mov	r0, r7
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d01e      	beq.n	80068a4 <_printf_common+0xa4>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	68e5      	ldr	r5, [r4, #12]
 800686a:	6832      	ldr	r2, [r6, #0]
 800686c:	f003 0306 	and.w	r3, r3, #6
 8006870:	2b04      	cmp	r3, #4
 8006872:	bf08      	it	eq
 8006874:	1aad      	subeq	r5, r5, r2
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	6922      	ldr	r2, [r4, #16]
 800687a:	bf0c      	ite	eq
 800687c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006880:	2500      	movne	r5, #0
 8006882:	4293      	cmp	r3, r2
 8006884:	bfc4      	itt	gt
 8006886:	1a9b      	subgt	r3, r3, r2
 8006888:	18ed      	addgt	r5, r5, r3
 800688a:	2600      	movs	r6, #0
 800688c:	341a      	adds	r4, #26
 800688e:	42b5      	cmp	r5, r6
 8006890:	d11a      	bne.n	80068c8 <_printf_common+0xc8>
 8006892:	2000      	movs	r0, #0
 8006894:	e008      	b.n	80068a8 <_printf_common+0xa8>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4649      	mov	r1, r9
 800689c:	4638      	mov	r0, r7
 800689e:	47c0      	blx	r8
 80068a0:	3001      	adds	r0, #1
 80068a2:	d103      	bne.n	80068ac <_printf_common+0xac>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ac:	3501      	adds	r5, #1
 80068ae:	e7c6      	b.n	800683e <_printf_common+0x3e>
 80068b0:	18e1      	adds	r1, r4, r3
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	2030      	movs	r0, #48	; 0x30
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ba:	4422      	add	r2, r4
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068c4:	3302      	adds	r3, #2
 80068c6:	e7c7      	b.n	8006858 <_printf_common+0x58>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4622      	mov	r2, r4
 80068cc:	4649      	mov	r1, r9
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d0e6      	beq.n	80068a4 <_printf_common+0xa4>
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7d9      	b.n	800688e <_printf_common+0x8e>
	...

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	460c      	mov	r4, r1
 80068e2:	4691      	mov	r9, r2
 80068e4:	7e27      	ldrb	r7, [r4, #24]
 80068e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068e8:	2f78      	cmp	r7, #120	; 0x78
 80068ea:	4680      	mov	r8, r0
 80068ec:	469a      	mov	sl, r3
 80068ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	; 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d8 	beq.w	8006aae <_printf_i+0x1d2>
 80068fe:	2f58      	cmp	r7, #88	; 0x58
 8006900:	f000 80a3 	beq.w	8006a4a <_printf_i+0x16e>
 8006904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a001      	add	r0, pc, #4	; (adr r0, 800691c <_printf_i+0x40>)
 8006918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a95 	.word	0x08006a95
 800694c:	080069b9 	.word	0x080069b9
 8006950:	08006a77 	.word	0x08006a77
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006ab7 	.word	0x08006ab7
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a7f 	.word	0x08006a7f
 8006974:	680b      	ldr	r3, [r1, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	600a      	str	r2, [r1, #0]
 800697c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e0a3      	b.n	8006ad0 <_printf_i+0x1f4>
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	6808      	ldr	r0, [r1, #0]
 800698c:	062e      	lsls	r6, r5, #24
 800698e:	f100 0304 	add.w	r3, r0, #4
 8006992:	d50a      	bpl.n	80069aa <_printf_i+0xce>
 8006994:	6805      	ldr	r5, [r0, #0]
 8006996:	600b      	str	r3, [r1, #0]
 8006998:	2d00      	cmp	r5, #0
 800699a:	da03      	bge.n	80069a4 <_printf_i+0xc8>
 800699c:	232d      	movs	r3, #45	; 0x2d
 800699e:	426d      	negs	r5, r5
 80069a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a4:	485e      	ldr	r0, [pc, #376]	; (8006b20 <_printf_i+0x244>)
 80069a6:	230a      	movs	r3, #10
 80069a8:	e019      	b.n	80069de <_printf_i+0x102>
 80069aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069ae:	6805      	ldr	r5, [r0, #0]
 80069b0:	600b      	str	r3, [r1, #0]
 80069b2:	bf18      	it	ne
 80069b4:	b22d      	sxthne	r5, r5
 80069b6:	e7ef      	b.n	8006998 <_printf_i+0xbc>
 80069b8:	680b      	ldr	r3, [r1, #0]
 80069ba:	6825      	ldr	r5, [r4, #0]
 80069bc:	1d18      	adds	r0, r3, #4
 80069be:	6008      	str	r0, [r1, #0]
 80069c0:	0628      	lsls	r0, r5, #24
 80069c2:	d501      	bpl.n	80069c8 <_printf_i+0xec>
 80069c4:	681d      	ldr	r5, [r3, #0]
 80069c6:	e002      	b.n	80069ce <_printf_i+0xf2>
 80069c8:	0669      	lsls	r1, r5, #25
 80069ca:	d5fb      	bpl.n	80069c4 <_printf_i+0xe8>
 80069cc:	881d      	ldrh	r5, [r3, #0]
 80069ce:	4854      	ldr	r0, [pc, #336]	; (8006b20 <_printf_i+0x244>)
 80069d0:	2f6f      	cmp	r7, #111	; 0x6f
 80069d2:	bf0c      	ite	eq
 80069d4:	2308      	moveq	r3, #8
 80069d6:	230a      	movne	r3, #10
 80069d8:	2100      	movs	r1, #0
 80069da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069de:	6866      	ldr	r6, [r4, #4]
 80069e0:	60a6      	str	r6, [r4, #8]
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	bfa2      	ittt	ge
 80069e6:	6821      	ldrge	r1, [r4, #0]
 80069e8:	f021 0104 	bicge.w	r1, r1, #4
 80069ec:	6021      	strge	r1, [r4, #0]
 80069ee:	b90d      	cbnz	r5, 80069f4 <_printf_i+0x118>
 80069f0:	2e00      	cmp	r6, #0
 80069f2:	d04d      	beq.n	8006a90 <_printf_i+0x1b4>
 80069f4:	4616      	mov	r6, r2
 80069f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069fa:	fb03 5711 	mls	r7, r3, r1, r5
 80069fe:	5dc7      	ldrb	r7, [r0, r7]
 8006a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a04:	462f      	mov	r7, r5
 8006a06:	42bb      	cmp	r3, r7
 8006a08:	460d      	mov	r5, r1
 8006a0a:	d9f4      	bls.n	80069f6 <_printf_i+0x11a>
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d10b      	bne.n	8006a28 <_printf_i+0x14c>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07df      	lsls	r7, r3, #31
 8006a14:	d508      	bpl.n	8006a28 <_printf_i+0x14c>
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	bfde      	ittt	le
 8006a1e:	2330      	movle	r3, #48	; 0x30
 8006a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a28:	1b92      	subs	r2, r2, r6
 8006a2a:	6122      	str	r2, [r4, #16]
 8006a2c:	f8cd a000 	str.w	sl, [sp]
 8006a30:	464b      	mov	r3, r9
 8006a32:	aa03      	add	r2, sp, #12
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fee2 	bl	8006800 <_printf_common>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d14c      	bne.n	8006ada <_printf_i+0x1fe>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	b004      	add	sp, #16
 8006a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4a:	4835      	ldr	r0, [pc, #212]	; (8006b20 <_printf_i+0x244>)
 8006a4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	680e      	ldr	r6, [r1, #0]
 8006a54:	061f      	lsls	r7, r3, #24
 8006a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a5a:	600e      	str	r6, [r1, #0]
 8006a5c:	d514      	bpl.n	8006a88 <_printf_i+0x1ac>
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	bf44      	itt	mi
 8006a62:	f043 0320 	orrmi.w	r3, r3, #32
 8006a66:	6023      	strmi	r3, [r4, #0]
 8006a68:	b91d      	cbnz	r5, 8006a72 <_printf_i+0x196>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f023 0320 	bic.w	r3, r3, #32
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	2310      	movs	r3, #16
 8006a74:	e7b0      	b.n	80069d8 <_printf_i+0xfc>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f043 0320 	orr.w	r3, r3, #32
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	2378      	movs	r3, #120	; 0x78
 8006a80:	4828      	ldr	r0, [pc, #160]	; (8006b24 <_printf_i+0x248>)
 8006a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a86:	e7e3      	b.n	8006a50 <_printf_i+0x174>
 8006a88:	065e      	lsls	r6, r3, #25
 8006a8a:	bf48      	it	mi
 8006a8c:	b2ad      	uxthmi	r5, r5
 8006a8e:	e7e6      	b.n	8006a5e <_printf_i+0x182>
 8006a90:	4616      	mov	r6, r2
 8006a92:	e7bb      	b.n	8006a0c <_printf_i+0x130>
 8006a94:	680b      	ldr	r3, [r1, #0]
 8006a96:	6826      	ldr	r6, [r4, #0]
 8006a98:	6960      	ldr	r0, [r4, #20]
 8006a9a:	1d1d      	adds	r5, r3, #4
 8006a9c:	600d      	str	r5, [r1, #0]
 8006a9e:	0635      	lsls	r5, r6, #24
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	d501      	bpl.n	8006aa8 <_printf_i+0x1cc>
 8006aa4:	6018      	str	r0, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <_printf_i+0x1d2>
 8006aa8:	0671      	lsls	r1, r6, #25
 8006aaa:	d5fb      	bpl.n	8006aa4 <_printf_i+0x1c8>
 8006aac:	8018      	strh	r0, [r3, #0]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	4616      	mov	r6, r2
 8006ab4:	e7ba      	b.n	8006a2c <_printf_i+0x150>
 8006ab6:	680b      	ldr	r3, [r1, #0]
 8006ab8:	1d1a      	adds	r2, r3, #4
 8006aba:	600a      	str	r2, [r1, #0]
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	6862      	ldr	r2, [r4, #4]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7f9 fb94 	bl	80001f0 <memchr>
 8006ac8:	b108      	cbz	r0, 8006ace <_printf_i+0x1f2>
 8006aca:	1b80      	subs	r0, r0, r6
 8006acc:	6060      	str	r0, [r4, #4]
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	6123      	str	r3, [r4, #16]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad8:	e7a8      	b.n	8006a2c <_printf_i+0x150>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	4632      	mov	r2, r6
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	47d0      	blx	sl
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d0ab      	beq.n	8006a40 <_printf_i+0x164>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	079b      	lsls	r3, r3, #30
 8006aec:	d413      	bmi.n	8006b16 <_printf_i+0x23a>
 8006aee:	68e0      	ldr	r0, [r4, #12]
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	4298      	cmp	r0, r3
 8006af4:	bfb8      	it	lt
 8006af6:	4618      	movlt	r0, r3
 8006af8:	e7a4      	b.n	8006a44 <_printf_i+0x168>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4632      	mov	r2, r6
 8006afe:	4649      	mov	r1, r9
 8006b00:	4640      	mov	r0, r8
 8006b02:	47d0      	blx	sl
 8006b04:	3001      	adds	r0, #1
 8006b06:	d09b      	beq.n	8006a40 <_printf_i+0x164>
 8006b08:	3501      	adds	r5, #1
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	9903      	ldr	r1, [sp, #12]
 8006b0e:	1a5b      	subs	r3, r3, r1
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dcf2      	bgt.n	8006afa <_printf_i+0x21e>
 8006b14:	e7eb      	b.n	8006aee <_printf_i+0x212>
 8006b16:	2500      	movs	r5, #0
 8006b18:	f104 0619 	add.w	r6, r4, #25
 8006b1c:	e7f5      	b.n	8006b0a <_printf_i+0x22e>
 8006b1e:	bf00      	nop
 8006b20:	0800993d 	.word	0x0800993d
 8006b24:	0800994e 	.word	0x0800994e

08006b28 <__sread>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b30:	f000 f894 	bl	8006c5c <_read_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	bfab      	itete	ge
 8006b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b3c:	181b      	addge	r3, r3, r0
 8006b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b42:	bfac      	ite	ge
 8006b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b46:	81a3      	strhlt	r3, [r4, #12]
 8006b48:	bd10      	pop	{r4, pc}

08006b4a <__swrite>:
 8006b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	461f      	mov	r7, r3
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	05db      	lsls	r3, r3, #23
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4616      	mov	r6, r2
 8006b5a:	d505      	bpl.n	8006b68 <__swrite+0x1e>
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2302      	movs	r3, #2
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f868 	bl	8006c38 <_lseek_r>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	f000 b817 	b.w	8006bb0 <_write_r>

08006b82 <__sseek>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8a:	f000 f855 	bl	8006c38 <_lseek_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	bf15      	itete	ne
 8006b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b9e:	81a3      	strheq	r3, [r4, #12]
 8006ba0:	bf18      	it	ne
 8006ba2:	81a3      	strhne	r3, [r4, #12]
 8006ba4:	bd10      	pop	{r4, pc}

08006ba6 <__sclose>:
 8006ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006baa:	f000 b813 	b.w	8006bd4 <_close_r>
	...

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_write_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7f9 fce2 	bl	8000588 <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	200005bc 	.word	0x200005bc

08006bd4 <_close_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d06      	ldr	r5, [pc, #24]	; (8006bf0 <_close_r+0x1c>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7fa fef1 	bl	80019c6 <_close>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_close_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_close_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	200005bc 	.word	0x200005bc

08006bf4 <_fstat_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4d07      	ldr	r5, [pc, #28]	; (8006c14 <_fstat_r+0x20>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f7fa feec 	bl	80019de <_fstat>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d102      	bne.n	8006c10 <_fstat_r+0x1c>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	b103      	cbz	r3, 8006c10 <_fstat_r+0x1c>
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
 8006c12:	bf00      	nop
 8006c14:	200005bc 	.word	0x200005bc

08006c18 <_isatty_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	; (8006c34 <_isatty_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fa feeb 	bl	80019fe <_isatty>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_isatty_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_isatty_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200005bc 	.word	0x200005bc

08006c38 <_lseek_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d07      	ldr	r5, [pc, #28]	; (8006c58 <_lseek_r+0x20>)
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	4608      	mov	r0, r1
 8006c40:	4611      	mov	r1, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fa fee4 	bl	8001a14 <_lseek>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_lseek_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_lseek_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200005bc 	.word	0x200005bc

08006c5c <_read_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	; (8006c7c <_read_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fa fe8e 	bl	800198c <_read>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_read_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_read_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200005bc 	.word	0x200005bc

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
