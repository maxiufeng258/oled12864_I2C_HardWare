
oled12864_I2C_hardWare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000548  20000548  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f598  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002035  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024500  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfa6  00000000  00000000  00057120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d66ee  00000000  00000000  000650c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b7b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003580  00000000  00000000  0013b808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004520 	.word	0x08004520

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004520 	.word	0x08004520

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <_write+0x24>)
 800059e:	f002 fcf8 	bl	8002f92 <HAL_UART_Transmit>
	return len;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200004f0 	.word	0x200004f0

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fe7c 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f846 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f91e 	bl	80007fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f8f2 	bl	80007a8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80005c4:	f000 f8b0 	bl	8000728 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  oled_i2c_Init();
 80005c8:	f000 fbb8 	bl	8000d3c <oled_i2c_Init>

  HAL_Delay(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f000 fee0 	bl	8001394 <HAL_Delay>
  oled_Set_Contrast(0x7F);
 80005d4:	207f      	movs	r0, #127	; 0x7f
 80005d6:	f000 fa3f 	bl	8000a58 <oled_Set_Contrast>
  oled_Set_Display_Normal_Inverse(display_invers);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fa7f 	bl	8000ade <oled_Set_Display_Normal_Inverse>

  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 fed6 	bl	8001394 <HAL_Delay>
  oled_Set_Contrast(0xFF);
 80005e8:	20ff      	movs	r0, #255	; 0xff
 80005ea:	f000 fa35 	bl	8000a58 <oled_Set_Contrast>
  oled_Set_Display_Normal_Inverse(display_normal);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fa75 	bl	8000ade <oled_Set_Display_Normal_Inverse>


  HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f000 fecc 	bl	8001394 <HAL_Delay>
  oled_Set_Display_ON_OFF(display_off);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fa8e 	bl	8000b1e <oled_Set_Display_ON_OFF>
  HAL_Delay(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 fec5 	bl	8001394 <HAL_Delay>
  oled_Set_Display_ON_OFF(display_on);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fa87 	bl	8000b1e <oled_Set_Display_ON_OFF>

  I2C_Device_Scan();
 8000610:	f000 f9d8 	bl	80009c4 <I2C_Device_Scan>



  printf("oled 12864 I2C code...\r\n");
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0x90>)
 8000616:	f003 f83d 	bl	8003694 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800061a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0x94>)
 8000620:	f001 f987 	bl	8001932 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 feb5 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800062a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0x94>)
 8000630:	f001 f97f 	bl	8001932 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8000634:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000638:	f000 feac 	bl	8001394 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 800063c:	e7ed      	b.n	800061a <main+0x6a>
 800063e:	bf00      	nop
 8000640:	08004538 	.word	0x08004538
 8000644:	40021c00 	.word	0x40021c00

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 ff8e 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <SystemClock_Config+0xd8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <SystemClock_Config+0xd8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xd8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xdc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <SystemClock_Config+0xdc>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006b8:	230f      	movs	r3, #15
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006bc:	23d8      	movs	r3, #216	; 0xd8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ff9f 	bl	8002610 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f904 	bl	80008e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f001 ff48 	bl	8002570 <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006e6:	f000 f8fd 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f9f9 	bl	8002b00 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000714:	f000 f8e6 	bl	80008e4 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C2_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C2_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C2_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C2_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C2_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C2_Init+0x74>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_I2C2_Init+0x74>)
 8000766:	f001 f8ff 	bl	8001968 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f8b8 	bl	80008e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C2_Init+0x74>)
 8000778:	f001 fe7f 	bl	800247a <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 f8af 	bl	80008e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C2_Init+0x74>)
 800078a:	f001 feb2 	bl	80024f2 <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f8a6 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000049c 	.word	0x2000049c
 80007a0:	40005800 	.word	0x40005800
 80007a4:	00061a80 	.word	0x00061a80

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART1_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f002 fb8a 	bl	8002ef8 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f87b 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200004f0 	.word	0x200004f0
 80007f8:	40011000 	.word	0x40011000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <MX_GPIO_Init+0xdc>)
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xdc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_GPIO_Init+0xdc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xdc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000888:	4814      	ldr	r0, [pc, #80]	; (80008dc <MX_GPIO_Init+0xe0>)
 800088a:	f001 f839 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 800088e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_GPIO_Init+0xe0>)
 80008a8:	f000 fe7e 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	2304      	movs	r3, #4
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_GPIO_Init+0xe4>)
 80008ca:	f000 fe6d 	bl	80015a8 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021c00 	.word	0x40021c00
 80008e0:	40020400 	.word	0x40020400

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <oled_Write_CMD>:
 * @brief write indicate command to oled Register
 * @param cmd: [in] input command
 * @retval status 0:write cmd ok    1:write cmd error
 */
static uint8_t oled_Write_CMD(uint8_t cmd)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_sta;
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd, oled_timeOut);
 80008fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	2178      	movs	r1, #120	; 0x78
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <oled_Write_CMD+0x3c>)
 8000910:	f001 f96e 	bl	8001bf0 <HAL_I2C_Mem_Write>
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]
	if (hal_sta == HAL_OK)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <oled_Write_CMD+0x32>
		return 0;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <oled_Write_CMD+0x34>
	return 1;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000049c 	.word	0x2000049c

08000930 <oled_Write_Data>:
 * @param data[]: [in] input data array
 * @param len:	[in] input data array length
 * @retval status 0:write data ok    1:write data error
 */
static uint8_t oled_Write_Data(uint8_t data[], uint16_t len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af04      	add	r7, sp, #16
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef hal_sta;
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len, oled_timeOut);
 800093c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2301      	movs	r3, #1
 800094c:	2240      	movs	r2, #64	; 0x40
 800094e:	2178      	movs	r1, #120	; 0x78
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <oled_Write_Data+0x40>)
 8000952:	f001 f94d 	bl	8001bf0 <HAL_I2C_Mem_Write>
 8000956:	4603      	mov	r3, r0
 8000958:	73fb      	strb	r3, [r7, #15]
	if (hal_sta == HAL_OK)
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <oled_Write_Data+0x34>
		return 0;
 8000960:	2300      	movs	r3, #0
 8000962:	e000      	b.n	8000966 <oled_Write_Data+0x36>
	return 1;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000049c 	.word	0x2000049c

08000974 <oled_Filling>:

/**
 * @brief use indicate color(on/off) to filling oled all pixels
 */
static void oled_Filling(oled_color_t color)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00d      	b.n	80009a0 <oled_Filling+0x2c>
	{
		oled_display_buff[i] = (color == oled_color_Black)? (0x00): (0x0F);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <oled_Filling+0x1a>
 800098a:	2100      	movs	r1, #0
 800098c:	e000      	b.n	8000990 <oled_Filling+0x1c>
 800098e:	210f      	movs	r1, #15
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <oled_Filling+0x48>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a6:	d3ed      	bcc.n	8000984 <oled_Filling+0x10>
	}

	bufferUpdateFlag = 1;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <oled_Filling+0x4c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000090 	.word	0x20000090
 80009c0:	2000008c 	.word	0x2000008c

080009c4 <I2C_Device_Scan>:

/**
 * @brief scan all online I2C devices
 */
void I2C_Device_Scan(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint8_t num = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef sta = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	717b      	strb	r3, [r7, #5]
	printf("Scan online I2C devices, Addresses are not shifted to the left\r\n");
 80009d2:	481c      	ldr	r0, [pc, #112]	; (8000a44 <I2C_Device_Scan+0x80>)
 80009d4:	f002 fe5e 	bl	8003694 <puts>
	uint32_t startTick = HAL_GetTick();
 80009d8:	f000 fcd0 	bl	800137c <HAL_GetTick>
 80009dc:	6038      	str	r0, [r7, #0]
	for (uint8_t i = 1; i < 128; ++i) {
 80009de:	2301      	movs	r3, #1
 80009e0:	71bb      	strb	r3, [r7, #6]
 80009e2:	e01b      	b.n	8000a1c <I2C_Device_Scan+0x58>
		sta = HAL_I2C_IsDeviceReady(&oled_i2c, (i<<1), 2, 100);
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	b299      	uxth	r1, r3
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2202      	movs	r2, #2
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <I2C_Device_Scan+0x84>)
 80009f2:	f001 f9f7 	bl	8001de4 <HAL_I2C_IsDeviceReady>
 80009f6:	4603      	mov	r3, r0
 80009f8:	717b      	strb	r3, [r7, #5]
		if (sta != HAL_OK)
 80009fa:	797b      	ldrb	r3, [r7, #5]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d109      	bne.n	8000a14 <I2C_Device_Scan+0x50>
			continue;
		else
		{
			printf("  i2c device %d : 0X%0X\r\n", num++, i);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	71fa      	strb	r2, [r7, #7]
 8000a06:	4619      	mov	r1, r3
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <I2C_Device_Scan+0x88>)
 8000a0e:	f002 fdbb 	bl	8003588 <iprintf>
 8000a12:	e000      	b.n	8000a16 <I2C_Device_Scan+0x52>
			continue;
 8000a14:	bf00      	nop
	for (uint8_t i = 1; i < 128; ++i) {
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	71bb      	strb	r3, [r7, #6]
 8000a1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dadf      	bge.n	80009e4 <I2C_Device_Scan+0x20>
		}
	}
	printf("total time is : %ld ms\r\n", HAL_GetTick() - startTick);
 8000a24:	f000 fcaa 	bl	800137c <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <I2C_Device_Scan+0x8c>)
 8000a32:	f002 fda9 	bl	8003588 <iprintf>
	printf("------------------------- Scan over --------------------------\r\n");
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <I2C_Device_Scan+0x90>)
 8000a38:	f002 fe2c 	bl	8003694 <puts>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08004550 	.word	0x08004550
 8000a48:	2000049c 	.word	0x2000049c
 8000a4c:	08004590 	.word	0x08004590
 8000a50:	080045ac 	.word	0x080045ac
 8000a54:	080045c8 	.word	0x080045c8

08000a58 <oled_Set_Contrast>:
 * 		[oled_cmd_display_contrast_1(0x81)  +  ContrastVal(default value = 0x7F)]
 * @param ContrastVal: [in] contrast value between 0 t0 255
 * @retval status 0:write command ok    1:write command error
 */
uint8_t oled_Set_Contrast(uint8_t ContrastVal)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
	res = oled_Write_CMD(oled_cmd_display_contrast_1);			// Set Contrast first cmd Byte
 8000a66:	2081      	movs	r0, #129	; 0x81
 8000a68:	f7ff ff42 	bl	80008f0 <oled_Write_CMD>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <oled_Set_Contrast+0x22>
		return 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00c      	b.n	8000a94 <oled_Set_Contrast+0x3c>
	oled_Write_CMD(ContrastVal) ? (res = 1) : (res = 0);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff37 	bl	80008f0 <oled_Write_CMD>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <oled_Set_Contrast+0x36>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <oled_Set_Contrast+0x3a>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
	return res;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <oled_Set_Display_Follow_RAM_Or_No>:
 * @brief set oled display following GDDRAM or ignore GDDRAM and Show fixed content(Entire Display ON)
 * @param RAM_Output: [in]	follow	ignore
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Follow_RAM_Or_No(RAM_Output_t RAM_Output)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]

	switch (RAM_Output) {
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <oled_Set_Display_Follow_RAM_Or_No+0x1a>
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d006      	beq.n	8000ac2 <oled_Set_Display_Follow_RAM_Or_No+0x26>
 8000ab4:	e00b      	b.n	8000ace <oled_Set_Display_Follow_RAM_Or_No+0x32>
		case RAM_output_follow:
			res = oled_Write_CMD(oled_cmd_display_following);
 8000ab6:	20a4      	movs	r0, #164	; 0xa4
 8000ab8:	f7ff ff1a 	bl	80008f0 <oled_Write_CMD>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
			break;
 8000ac0:	e008      	b.n	8000ad4 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		case RAM_output_ignore:
			res = oled_Write_CMD(oled_cmd_display_ignore);
 8000ac2:	20a5      	movs	r0, #165	; 0xa5
 8000ac4:	f7ff ff14 	bl	80008f0 <oled_Write_CMD>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
			break;
 8000acc:	e002      	b.n	8000ad4 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		default:
			res = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
			break;
 8000ad2:	bf00      	nop
	}
	return res;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <oled_Set_Display_Normal_Inverse>:
 * @brief oled display normal(on-1,off-0) or inverse(on-0,off-1)
 * @param display_Way_t: [in]  display_normal	display_invers
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_Normal_Inverse(display_Way_t display_Way)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]
	switch (display_Way) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <oled_Set_Display_Normal_Inverse+0x1a>
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d006      	beq.n	8000b04 <oled_Set_Display_Normal_Inverse+0x26>
 8000af6:	e00b      	b.n	8000b10 <oled_Set_Display_Normal_Inverse+0x32>
		case display_normal:
			res = oled_Write_CMD(oled_cmd_display_normal);
 8000af8:	20a6      	movs	r0, #166	; 0xa6
 8000afa:	f7ff fef9 	bl	80008f0 <oled_Write_CMD>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]
			break;
 8000b02:	e007      	b.n	8000b14 <oled_Set_Display_Normal_Inverse+0x36>
		case display_invers:
			res = oled_Write_CMD(oled_cmd_display_inverse);
 8000b04:	20a7      	movs	r0, #167	; 0xa7
 8000b06:	f7ff fef3 	bl	80008f0 <oled_Write_CMD>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
			break;
 8000b0e:	e001      	b.n	8000b14 <oled_Set_Display_Normal_Inverse+0x36>
		default:
			return 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <oled_Set_Display_Normal_Inverse+0x38>
	}
	return res;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <oled_Set_Display_ON_OFF>:
 * @brief oled display On / Off(sleep)
 * @param display_Switch_t: [in]  display_on	display_off
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_ON_OFF(display_Switch_t	display_Switch)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	switch (display_Switch) {
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <oled_Set_Display_ON_OFF+0x1a>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d006      	beq.n	8000b44 <oled_Set_Display_ON_OFF+0x26>
 8000b36:	e00b      	b.n	8000b50 <oled_Set_Display_ON_OFF+0x32>
		case display_on:
			res = oled_Write_CMD(oled_cmd_display_on);
 8000b38:	20af      	movs	r0, #175	; 0xaf
 8000b3a:	f7ff fed9 	bl	80008f0 <oled_Write_CMD>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
			break;
 8000b42:	e007      	b.n	8000b54 <oled_Set_Display_ON_OFF+0x36>
		case display_off:
			res = oled_Write_CMD(oled_cmd_display_off);
 8000b44:	20ae      	movs	r0, #174	; 0xae
 8000b46:	f7ff fed3 	bl	80008f0 <oled_Write_CMD>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
			break;
 8000b4e:	e001      	b.n	8000b54 <oled_Set_Display_ON_OFF+0x36>
		default:
			return 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <oled_Set_Display_ON_OFF+0x38>
	}
	return res;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <oled_Set_Column_Start_Addr_PageMode>:
 * @NOTE	** This command is only for page addressing mode
 * 				The column address will be incremented by each data access.
 * @param columnVal: [in] 0~(oled_H_Pix-1)
 */
uint8_t oled_Set_Column_Start_Addr_PageMode(uint8_t columnVal)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
	if (columnVal < 0 || columnVal >= oled_H_Pix)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da01      	bge.n	8000b78 <oled_Set_Column_Start_Addr_PageMode+0x1a>
		return 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e022      	b.n	8000bbe <oled_Set_Column_Start_Addr_PageMode+0x60>
	// cmd Set the lower start column address of pointer by command 00h~0Fh.
	uint8_t lowerAddr  = ((columnVal >> 0) & 0x0F) | oled_cmd_set_l_col_start_addr_0;
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	73bb      	strb	r3, [r7, #14]
	// cmd Set the upper start column address of pointer by command 10h~1Fh.
	uint8_t higherAddr = ((columnVal >> 4) & 0x0F) | oled_cmd_set_h_col_start_addr_0;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	737b      	strb	r3, [r7, #13]

	// lower nibble of 8bit column address
	res = oled_Write_CMD(lowerAddr);
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff feac 	bl	80008f0 <oled_Write_CMD>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <oled_Set_Column_Start_Addr_PageMode+0x48>
		return 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00b      	b.n	8000bbe <oled_Set_Column_Start_Addr_PageMode+0x60>
	// higher nibble of 8bit column address
	res = oled_Write_CMD(higherAddr);
 8000ba6:	7b7b      	ldrb	r3, [r7, #13]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fea1 	bl	80008f0 <oled_Write_CMD>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <oled_Set_Column_Start_Addr_PageMode+0x5e>
		return 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <oled_Set_Column_Start_Addr_PageMode+0x60>

	return res;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <oled_Set_Memory_Addr_Mode>:
 * 		       11b,Invalid
 * @param addr_Mode: [in] Memory Addressing Mode
 * @retval status 0:ok	1/2:error
 */
uint8_t oled_Set_Memory_Addr_Mode(addr_Mode_t	addr_Mode)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]

	// cmd Set Memory Addressing Mode (20h)
	res = oled_Write_CMD(oled_cmd_set_memory_addr_mode_1);
 8000bd4:	2020      	movs	r0, #32
 8000bd6:	f7ff fe8b 	bl	80008f0 <oled_Write_CMD>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <oled_Set_Memory_Addr_Mode+0x22>
		return 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e01f      	b.n	8000c28 <oled_Set_Memory_Addr_Mode+0x62>
	switch (addr_Mode) {
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d012      	beq.n	8000c14 <oled_Set_Memory_Addr_Mode+0x4e>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	dc16      	bgt.n	8000c20 <oled_Set_Memory_Addr_Mode+0x5a>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <oled_Set_Memory_Addr_Mode+0x36>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d006      	beq.n	8000c08 <oled_Set_Memory_Addr_Mode+0x42>
 8000bfa:	e011      	b.n	8000c20 <oled_Set_Memory_Addr_Mode+0x5a>
		case addr_mode_Horizontal:
			res = oled_Write_CMD((uint8_t)addr_mode_Horizontal);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fe77 	bl	80008f0 <oled_Write_CMD>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]
			break;
 8000c06:	e00e      	b.n	8000c26 <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Vertical:
			res = oled_Write_CMD((uint8_t)addr_mode_Vertical);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fe71 	bl	80008f0 <oled_Write_CMD>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]
			break;
 8000c12:	e008      	b.n	8000c26 <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Page:
			res = oled_Write_CMD((uint8_t)addr_mode_Page);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff fe6b 	bl	80008f0 <oled_Write_CMD>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73fb      	strb	r3, [r7, #15]
			break;
 8000c1e:	e002      	b.n	8000c26 <oled_Set_Memory_Addr_Mode+0x60>
		default:
			res = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
			break;
 8000c24:	bf00      	nop
	}

	return res;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <oled_Set_Page_Start_Addr_PageMode>:
 * @NOTE	** This command is only for page addressing mode	0 ~ (oled_V_Pix/8)-1
 * @param pageVal: [in] page start addr value
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Page_Start_Addr_PageMode(uint8_t pageVal)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]

	if (pageVal < 0 || pageVal >= (oled_V_Pix/8))
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	d901      	bls.n	8000c48 <oled_Set_Page_Start_Addr_PageMode+0x18>
		return 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e00f      	b.n	8000c68 <oled_Set_Page_Start_Addr_PageMode+0x38>

	// cmd Set the page start address of the target display location by command B0h to B7h.
	uint8_t pageStartAddr = (pageVal & 0b00000111) | oled_cmd_set_page_start_addr_0;
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(pageStartAddr);
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe47 	bl	80008f0 <oled_Write_CMD>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]

	return res;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <oled_Set_Display_Start_Line>:
 * @brief Set display RAM display start line register from 0-63 using X5X3X2X1X0
 * @param startLineVal: [in] Set Display Start Line  0 ~ oled_V_Pix-1
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Start_Line(uint8_t startLineVal)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
	if (startLineVal < 0 || startLineVal >= oled_V_Pix)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b3f      	cmp	r3, #63	; 0x3f
 8000c82:	d901      	bls.n	8000c88 <oled_Set_Display_Start_Line+0x18>
		return 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00f      	b.n	8000ca8 <oled_Set_Display_Start_Line+0x38>

	uint8_t startLine = (startLineVal & 0b00011111) | oled_cmd_set_display_start_line;
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	f003 031f 	and.w	r3, r3, #31
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(startLine);
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe27 	bl	80008f0 <oled_Write_CMD>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]

	return res;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <oled_Set_Segment_Map>:
 * 								A1h,X[0]=1b: column address 127 is mapped to SEG0
 * @param	segment_Map_t:	[in] keep default or remap
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Segment_Map(segment_Map_t segment_Map)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]

	uint8_t segmentMap = (segment_Map & 0x01) | oled_cmd_set_segment_remap_n;
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(segmentMap);
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe0c 	bl	80008f0 <oled_Write_CMD>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]

	return res;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <oled_Set_MUX_Ratio>:
 * 			from 16MUX to 64MUX, RESET= 111111b (i.e. 63d, 64MUX) A[5:0] from 0 to 14 are invalid entry
 * @param	MUX_Ratio	from 16 to 64
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_MUX_Ratio(uint8_t MUX_Ratio)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
	MUX_Ratio -= 1;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
	if (MUX_Ratio < 15 || MUX_Ratio >= 64)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b0e      	cmp	r3, #14
 8000cfe:	d902      	bls.n	8000d06 <oled_Set_MUX_Ratio+0x20>
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b3f      	cmp	r3, #63	; 0x3f
 8000d04:	d901      	bls.n	8000d0a <oled_Set_MUX_Ratio+0x24>
		return 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e014      	b.n	8000d34 <oled_Set_MUX_Ratio+0x4e>
	res = oled_Write_CMD(oled_cmd_set_multiplex_ratio_1);
 8000d0a:	20a8      	movs	r0, #168	; 0xa8
 8000d0c:	f7ff fdf0 	bl	80008f0 <oled_Write_CMD>
 8000d10:	4603      	mov	r3, r0
 8000d12:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <oled_Set_MUX_Ratio+0x38>
		return 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00a      	b.n	8000d34 <oled_Set_MUX_Ratio+0x4e>

	uint8_t muxRatio = (MUX_Ratio & 0b00111111);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d24:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(muxRatio);
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fde1 	bl	80008f0 <oled_Write_CMD>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
	return res;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <oled_i2c_Init>:
/**
  * @brief oled 12864 init
  * @retval status 0:init ok    1:init error
  */
uint8_t oled_i2c_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000d42:	2064      	movs	r0, #100	; 0x64
 8000d44:	f000 fb26 	bl	8001394 <HAL_Delay>
	int status = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]

	// Init LCD
	status += oled_Set_Display_ON_OFF(display_off);   				// Display off
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fee6 	bl	8000b1e <oled_Set_Display_ON_OFF>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	607b      	str	r3, [r7, #4]

	status += oled_Set_Memory_Addr_Mode(addr_mode_Page);			// Set Memory Addressing Mode
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff ff32 	bl	8000bc6 <oled_Set_Memory_Addr_Mode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	607b      	str	r3, [r7, #4]

	status += oled_Set_Page_Start_Addr_PageMode(0x00);				// Set Page Start Address for Page Addressing Mode,0-7
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ff5f 	bl	8000c30 <oled_Set_Page_Start_Addr_PageMode>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_com_scan_dir_decrease);   // Set COM Output Scan Direction
 8000d7c:	20c8      	movs	r0, #200	; 0xc8
 8000d7e:	f7ff fdb7 	bl	80008f0 <oled_Write_CMD>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	607b      	str	r3, [r7, #4]

	status += oled_Set_Column_Start_Addr_PageMode(0x00);			// Set column start address[page mode]
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fee6 	bl	8000b5e <oled_Set_Column_Start_Addr_PageMode>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]

	status += oled_Set_Display_Start_Line(0x00);					// Set start line address
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ff67 	bl	8000c70 <oled_Set_Display_Start_Line>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	607b      	str	r3, [r7, #4]

	status += oled_Set_Contrast(0x00);								// set contrast control register 0x00-0xFF
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fe53 	bl	8000a58 <oled_Set_Contrast>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	607b      	str	r3, [r7, #4]

	status += oled_Set_Segment_Map(segment_default_mapping);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff ff77 	bl	8000cb0 <oled_Set_Segment_Map>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	607b      	str	r3, [r7, #4]

	status += oled_Set_Display_Normal_Inverse(display_normal);		// Set normal display
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fe86 	bl	8000ade <oled_Set_Display_Normal_Inverse>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	607b      	str	r3, [r7, #4]

	status += oled_Set_MUX_Ratio(oled_V_Pix);						// Set multiplex ratio(1 to 64)
 8000ddc:	2040      	movs	r0, #64	; 0x40
 8000dde:	f7ff ff82 	bl	8000ce6 <oled_Set_MUX_Ratio>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	607b      	str	r3, [r7, #4]

	status += oled_Set_Display_Follow_RAM_Or_No(RAM_output_follow); // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fe55 	bl	8000a9c <oled_Set_Display_Follow_RAM_Or_No>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_display_offset_1);   		// Set display offset
 8000dfc:	20d3      	movs	r0, #211	; 0xd3
 8000dfe:	f7ff fd77 	bl	80008f0 <oled_Write_CMD>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
	status += oled_Write_CMD(0x00);   								// No offset
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fd6f 	bl	80008f0 <oled_Write_CMD>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_clk_div_1);   			// Set display clock divide ratio/oscillator frequency
 8000e1c:	20d5      	movs	r0, #213	; 0xd5
 8000e1e:	f7ff fd67 	bl	80008f0 <oled_Write_CMD>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
	status += oled_Write_CMD(0xF0);   								// Set divide ratio
 8000e2c:	20f0      	movs	r0, #240	; 0xf0
 8000e2e:	f7ff fd5f 	bl	80008f0 <oled_Write_CMD>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_pre_charge_period_1);   	// Set pre-charge period
 8000e3c:	20d9      	movs	r0, #217	; 0xd9
 8000e3e:	f7ff fd57 	bl	80008f0 <oled_Write_CMD>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
	status += oled_Write_CMD(0x22);
 8000e4c:	2022      	movs	r0, #34	; 0x22
 8000e4e:	f7ff fd4f 	bl	80008f0 <oled_Write_CMD>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_com_pins_1);   			// Set com pins hardware configuration
 8000e5c:	20da      	movs	r0, #218	; 0xda
 8000e5e:	f7ff fd47 	bl	80008f0 <oled_Write_CMD>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	607b      	str	r3, [r7, #4]
#ifdef oled_com_lr_remap
	status += oled_Write_CMD(0x32);   								// Enable COM left/right remap
#else
	status += oled_Write_CMD(0x12);   								// Do not use COM left/right remap
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f7ff fd3f 	bl	80008f0 <oled_Write_CMD>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	607b      	str	r3, [r7, #4]
#endif // SSD1306_COM_LR_REMAP

	status += oled_Write_CMD(oled_cmd_set_Vcomh_deselect_level_1);  // Set vcomh
 8000e7c:	20db      	movs	r0, #219	; 0xdb
 8000e7e:	f7ff fd37 	bl	80008f0 <oled_Write_CMD>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
	status += oled_Write_CMD(0x20);   								// 0x20,0.77xVcc
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	f7ff fd2f 	bl	80008f0 <oled_Write_CMD>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	607b      	str	r3, [r7, #4]

	status += oled_Write_CMD(oled_cmd_set_charge_pump_1);   		// Set DC-DC enable
 8000e9c:	208d      	movs	r0, #141	; 0x8d
 8000e9e:	f7ff fd27 	bl	80008f0 <oled_Write_CMD>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
	status += oled_Write_CMD(0x14);   								// bit2 = 1, Enable charge pump during display on
 8000eac:	2014      	movs	r0, #20
 8000eae:	f7ff fd1f 	bl	80008f0 <oled_Write_CMD>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	607b      	str	r3, [r7, #4]

	status += oled_Set_Display_ON_OFF(display_on);					// Turn on SSD1306 panel
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fe2e 	bl	8000b1e <oled_Set_Display_ON_OFF>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	607b      	str	r3, [r7, #4]

	if (status != 0)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <oled_i2c_Init+0x19a>
		return 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e005      	b.n	8000ee2 <oled_i2c_Init+0x1a6>

	oled_Filling(oled_color_White);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fd4c 	bl	8000974 <oled_Filling>
	oled_Update_Screen();
 8000edc:	f000 f806 	bl	8000eec <oled_Update_Screen>

	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <oled_Update_Screen>:
/**
 * @brief write oled_cmd_display_contrast_1 into oled GDDRAM
 * @retval status 0:write ok	1:write error
 */
uint8_t oled_Update_Screen(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	if (bufferUpdateFlag == 0)
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <oled_Update_Screen+0x70>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <oled_Update_Screen+0x12>
		return 0;	// don't need updata screen
 8000efa:	2300      	movs	r3, #0
 8000efc:	e029      	b.n	8000f52 <oled_Update_Screen+0x66>

	uint8_t res = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	71bb      	strb	r3, [r7, #6]
 8000f06:	e01d      	b.n	8000f44 <oled_Update_Screen+0x58>
        oled_Write_CMD(oled_cmd_set_page_start_addr_0 + i);	// page value need Increase manually.
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	3b50      	subs	r3, #80	; 0x50
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fcee 	bl	80008f0 <oled_Write_CMD>
        oled_Write_CMD(oled_cmd_set_l_col_start_addr_0);	// column value automatic increase
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fceb 	bl	80008f0 <oled_Write_CMD>
        oled_Write_CMD(oled_cmd_set_h_col_start_addr_0);
 8000f1a:	2010      	movs	r0, #16
 8000f1c:	f7ff fce8 	bl	80008f0 <oled_Write_CMD>

        res = oled_Write_Data(&oled_display_buff[oled_H_Pix * i], sizeof(oled_display_buff)/8);
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	01db      	lsls	r3, r3, #7
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <oled_Update_Screen+0x74>)
 8000f26:	4413      	add	r3, r2
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fd00 	bl	8000930 <oled_Write_Data>
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
        if (res != 0)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <oled_Update_Screen+0x52>
        {
        	return 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e009      	b.n	8000f52 <oled_Update_Screen+0x66>
    for (uint8_t i = 0; i < 8; i++) {
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	3301      	adds	r3, #1
 8000f42:	71bb      	strb	r3, [r7, #6]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	d9de      	bls.n	8000f08 <oled_Update_Screen+0x1c>
        }
    }


    bufferUpdateFlag = 0;
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <oled_Update_Screen+0x70>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    return res;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	20000090 	.word	0x20000090

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_I2C_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_I2C_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_I2C_MspInit+0x88>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_I2C_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001002:	2304      	movs	r3, #4
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_I2C_MspInit+0x8c>)
 800100e:	f000 facb 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_I2C_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_I2C_MspInit+0x88>)
 800101c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_I2C_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005800 	.word	0x40005800
 800103c:	40023800 	.word	0x40023800
 8001040:	40021400 	.word	0x40021400

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_UART_MspInit+0x84>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12c      	bne.n	80010c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_MspInit+0x88>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0x88>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800109e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	2307      	movs	r3, #7
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_MspInit+0x8c>)
 80010bc:	f000 fa74 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f918 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00a      	b.n	8001150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113a:	f3af 8000 	nop.w
 800113e:	4601      	mov	r1, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf0      	blt.n	800113a <_read+0x12>
	}

return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_isatty>:

int _isatty(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f002 f992 	bl	8003524 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20030000 	.word	0x20030000
 800122c:	00000400 	.word	0x00000400
 8001230:	20000490 	.word	0x20000490
 8001234:	20000548 	.word	0x20000548

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f002 f951 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff f98f 	bl	80005b0 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001294:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a0:	080046c8 	.word	0x080046c8
  ldr r2, =_sbss
 80012a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a8:	20000548 	.word	0x20000548

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f931 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe3e 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93b 	bl	800158e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f911 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20000534 	.word	0x20000534

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000534 	.word	0x20000534

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff47 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff5c 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb0 	bl	80014fc <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e177      	b.n	80018b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8166 	bne.w	80018ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80c0 	beq.w	80018ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a65      	ldr	r2, [pc, #404]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d037      	beq.n	80017e6 <HAL_GPIO_Init+0x23e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_GPIO_Init+0x330>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d031      	beq.n	80017e2 <HAL_GPIO_Init+0x23a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x236>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a55      	ldr	r2, [pc, #340]	; (80018e0 <HAL_GPIO_Init+0x338>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x232>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x33c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x22e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a53      	ldr	r2, [pc, #332]	; (80018e8 <HAL_GPIO_Init+0x340>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x22a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x344>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x348>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_GPIO_Init+0x34c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_Init+0x350>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x21a>
 80017be:	2309      	movs	r3, #9
 80017c0:	e012      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017c2:	230a      	movs	r3, #10
 80017c4:	e010      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e00e      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e00c      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017ce:	2306      	movs	r3, #6
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x240>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x328>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182a:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_GPIO_Init+0x354>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001854:	4a29      	ldr	r2, [pc, #164]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x354>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x354>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_GPIO_Init+0x354>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f ae84 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40022400 	.word	0x40022400
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	041a      	lsls	r2, r3, #16
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43d9      	mvns	r1, r3
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	400b      	ands	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e12b      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fb10 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019cc:	f001 fa6c 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a81      	ldr	r2, [pc, #516]	; (8001bdc <HAL_I2C_Init+0x274>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d807      	bhi.n	80019ec <HAL_I2C_Init+0x84>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a80      	ldr	r2, [pc, #512]	; (8001be0 <HAL_I2C_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e006      	b.n	80019fa <HAL_I2C_Init+0x92>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a7d      	ldr	r2, [pc, #500]	; (8001be4 <HAL_I2C_Init+0x27c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0e7      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a78      	ldr	r2, [pc, #480]	; (8001be8 <HAL_I2C_Init+0x280>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_I2C_Init+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d802      	bhi.n	8001a3c <HAL_I2C_Init+0xd4>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	e009      	b.n	8001a50 <HAL_I2C_Init+0xe8>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	4a69      	ldr	r2, [pc, #420]	; (8001bec <HAL_I2C_Init+0x284>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	495c      	ldr	r1, [pc, #368]	; (8001bdc <HAL_I2C_Init+0x274>)
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d819      	bhi.n	8001aa4 <HAL_I2C_Init+0x13c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e59      	subs	r1, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a84:	400b      	ands	r3, r1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_I2C_Init+0x138>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e59      	subs	r1, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	e051      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e04f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <HAL_I2C_Init+0x168>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e012      	b.n	8001af6 <HAL_I2C_Init+0x18e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x196>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e022      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10e      	bne.n	8001b24 <HAL_I2C_Init+0x1bc>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e58      	subs	r0, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6859      	ldr	r1, [r3, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	440b      	add	r3, r1
 8001b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b22:	e00f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	0099      	lsls	r1, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6911      	ldr	r1, [r2, #16]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	001e847f 	.word	0x001e847f
 8001be4:	003d08ff 	.word	0x003d08ff
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	10624dd3 	.word	0x10624dd3

08001bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0a:	f7ff fbb7 	bl	800137c <HAL_GetTick>
 8001c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 80d9 	bne.w	8001dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	496d      	ldr	r1, [pc, #436]	; (8001ddc <HAL_I2C_Mem_Write+0x1ec>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fa9f 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0cc      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Mem_Write+0x56>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0c5      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_I2C_Mem_Write+0x1f0>)
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f9be 	bl	8002040 <I2C_RequestMemoryWrite>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d052      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e081      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fb20 	bl	8002318 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_I2C_Mem_Write+0x180>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1aa      	bne.n	8001cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fb0c 	bl	800239a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e016      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff fac2 	bl	800137c <HAL_GetTick>
 8001df8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	f040 8111 	bne.w	800202e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2319      	movs	r3, #25
 8001e12:	2201      	movs	r2, #1
 8001e14:	4988      	ldr	r1, [pc, #544]	; (8002038 <HAL_I2C_IsDeviceReady+0x254>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f9a8 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	e104      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_IsDeviceReady+0x50>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0fd      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d007      	beq.n	8001e5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2224      	movs	r2, #36	; 0x24
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a70      	ldr	r2, [pc, #448]	; (800203c <HAL_I2C_IsDeviceReady+0x258>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f966 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb4:	d103      	bne.n	8001ebe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0b6      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ed0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fa53 	bl	800137c <HAL_GetTick>
 8001ed6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	bf0c      	ite	eq
 8001efe:	2301      	moveq	r3, #1
 8001f00:	2300      	movne	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f06:	e025      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f08:	f7ff fa38 	bl	800137c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <HAL_I2C_IsDeviceReady+0x13a>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	22a0      	movs	r2, #160	; 0xa0
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f5e:	d005      	beq.n	8001f6c <HAL_I2C_IsDeviceReady+0x188>
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_I2C_IsDeviceReady+0x188>
 8001f66:	7dbb      	ldrb	r3, [r7, #22]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0cd      	beq.n	8001f08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d129      	bne.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2319      	movs	r3, #25
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4921      	ldr	r1, [pc, #132]	; (8002038 <HAL_I2C_IsDeviceReady+0x254>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f8da 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e036      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e02c      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	490f      	ldr	r1, [pc, #60]	; (8002038 <HAL_I2C_IsDeviceReady+0x254>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8b6 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e012      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	3301      	adds	r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	f4ff af32 	bcc.w	8001e7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	00100002 	.word	0x00100002
 800203c:	ffff0000 	.word	0xffff0000

08002040 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	817b      	strh	r3, [r7, #10]
 8002052:	460b      	mov	r3, r1
 8002054:	813b      	strh	r3, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2200      	movs	r2, #0
 8002072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f878 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00d      	beq.n	800209e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d103      	bne.n	800209a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e05f      	b.n	800215e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	492d      	ldr	r1, [pc, #180]	; (8002168 <I2C_RequestMemoryWrite+0x128>)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8b0 	bl	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e04c      	b.n	800215e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	6a39      	ldr	r1, [r7, #32]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f91a 	bl	8002318 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d107      	bne.n	8002102 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e02b      	b.n	800215e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800210c:	893b      	ldrh	r3, [r7, #8]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	e021      	b.n	800215c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002118:	893b      	ldrh	r3, [r7, #8]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b29b      	uxth	r3, r3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8f4 	bl	8002318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e005      	b.n	800215e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002152:	893b      	ldrh	r3, [r7, #8]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	00010002 	.word	0x00010002

0800216c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217c:	e025      	b.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d021      	beq.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7ff f8f9 	bl	800137c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d116      	bne.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e023      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10d      	bne.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4013      	ands	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	e00c      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d0b6      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002228:	e051      	b.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d123      	bne.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e046      	b.n	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d021      	beq.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7ff f877 	bl	800137c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d116      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f043 0220 	orr.w	r2, r3, #32
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e020      	b.n	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10c      	bne.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e00b      	b.n	800230a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4013      	ands	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d18d      	bne.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002324:	e02d      	b.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f878 	bl	800241c <I2C_IsAcknowledgeFailed>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e02d      	b.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d021      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7ff f81d 	bl	800137c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d116      	bne.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0220 	orr.w	r2, r3, #32
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d1ca      	bne.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a6:	e02d      	b.n	8002404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f837 	bl	800241c <I2C_IsAcknowledgeFailed>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e02d      	b.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d021      	beq.n	8002404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c0:	f7fe ffdc 	bl	800137c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e007      	b.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d1ca      	bne.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002432:	d11b      	bne.n	800246c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800243c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0204 	orr.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	d129      	bne.n	80024e4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0210 	bic.w	r2, r2, #16
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d12a      	bne.n	8002562 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800252c:	89fb      	ldrh	r3, [r7, #14]
 800252e:	f023 030f 	bic.w	r3, r3, #15
 8002532:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b29a      	uxth	r2, r3
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	4313      	orrs	r3, r2
 800253c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	89fa      	ldrh	r2, [r7, #14]
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_PWREx_EnableOverDrive+0x90>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <HAL_PWREx_EnableOverDrive+0x90>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_PWREx_EnableOverDrive+0x90>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_PWREx_EnableOverDrive+0x94>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259c:	f7fe feee 	bl	800137c <HAL_GetTick>
 80025a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025a2:	e009      	b.n	80025b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025a4:	f7fe feea 	bl	800137c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b2:	d901      	bls.n	80025b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e01f      	b.n	80025f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_PWREx_EnableOverDrive+0x98>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d1ee      	bne.n	80025a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025cc:	f7fe fed6 	bl	800137c <HAL_GetTick>
 80025d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025d2:	e009      	b.n	80025e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025d4:	f7fe fed2 	bl	800137c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e2:	d901      	bls.n	80025e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e007      	b.n	80025f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_PWREx_EnableOverDrive+0x98>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f4:	d1ee      	bne.n	80025d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	420e0040 	.word	0x420e0040
 8002608:	40007000 	.word	0x40007000
 800260c:	420e0044 	.word	0x420e0044

08002610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e264      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	4ba3      	ldr	r3, [pc, #652]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d00c      	beq.n	8002654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4ba0      	ldr	r3, [pc, #640]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	2b08      	cmp	r3, #8
 8002644:	d112      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b9d      	ldr	r3, [pc, #628]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b99      	ldr	r3, [pc, #612]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e23f      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x74>
 8002676:	4b91      	ldr	r3, [pc, #580]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a90      	ldr	r2, [pc, #576]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8a      	ldr	r2, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a87      	ldr	r2, [pc, #540]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 80026a8:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a80      	ldr	r2, [pc, #512]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fe58 	bl	800137c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fe54 	bl	800137c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e204      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe44 	bl	800137c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fe40 	bl	800137c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1f0      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11c      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1c4      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4952      	ldr	r1, [pc, #328]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e03a      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x2b0>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fdf9 	bl	800137c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fdf5 	bl	800137c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1a5      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4940      	ldr	r1, [pc, #256]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x2b0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fdd8 	bl	800137c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe fdd4 	bl	800137c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e184      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d030      	beq.n	800285c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_RCC_OscConfig+0x2b4>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fdb8 	bl	800137c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe fdb4 	bl	800137c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e164      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
 800282e:	e015      	b.n	800285c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x2b4>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fda1 	bl	800137c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe fd9d 	bl	800137c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e14d      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a0 	beq.w	80029aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0x2ac>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x2b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_RCC_OscConfig+0x2b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_RCC_OscConfig+0x2b8>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fd63 	bl	800137c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e011      	b.n	80028de <HAL_RCC_OscConfig+0x2ce>
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470000 	.word	0x42470000
 80028c4:	42470e80 	.word	0x42470e80
 80028c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fd56 	bl	800137c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e106      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b85      	ldr	r3, [pc, #532]	; (8002af4 <HAL_RCC_OscConfig+0x4e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x2f0>
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	e01c      	b.n	800293a <HAL_RCC_OscConfig+0x32a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x312>
 8002908:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	4b78      	ldr	r3, [pc, #480]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a77      	ldr	r2, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x32a>
 8002922:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	4a74      	ldr	r2, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6713      	str	r3, [r2, #112]	; 0x70
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a71      	ldr	r2, [pc, #452]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d015      	beq.n	800296e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fd1b 	bl	800137c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fd17 	bl	800137c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0c5      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ee      	beq.n	800294a <HAL_RCC_OscConfig+0x33a>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7fe fd05 	bl	800137c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fd01 	bl	800137c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0af      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 809b 	beq.w	8002aea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d05c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d141      	bne.n	8002a4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fcd5 	bl	800137c <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fcd1 	bl	800137c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e081      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	019b      	lsls	r3, r3, #6
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	061b      	lsls	r3, r3, #24
 8002a18:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_RCC_OscConfig+0x4ec>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fcaa 	bl	800137c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fca6 	bl	800137c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e056      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x41c>
 8002a4a:	e04e      	b.n	8002aea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x4ec>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe fc93 	bl	800137c <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fc8f 	bl	800137c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e03f      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x44a>
 8002a78:	e037      	b.n	8002aea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e032      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_RCC_OscConfig+0x4e8>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d028      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d121      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d11a      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002abc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40007000 	.word	0x40007000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470060 	.word	0x42470060

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fbc4 	bl	800137c <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe fbc0 	bl	800137c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fb24 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08004608 	.word	0x08004608
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce4:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d00d      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	f200 80bd 	bhi.w	8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x34>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfe:	e0b7      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d02:	60bb      	str	r3, [r7, #8]
       break;
 8002d04:	e0b7      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d08:	60bb      	str	r3, [r7, #8]
      break;
 8002d0a:	e0b4      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d0c:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d16:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04d      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	ea02 0800 	and.w	r8, r2, r0
 8002d3a:	ea03 0901 	and.w	r9, r3, r1
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d50:	0142      	lsls	r2, r0, #5
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	ebb0 0008 	subs.w	r0, r0, r8
 8002d5a:	eb61 0109 	sbc.w	r1, r1, r9
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	018b      	lsls	r3, r1, #6
 8002d68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d6c:	0182      	lsls	r2, r0, #6
 8002d6e:	1a12      	subs	r2, r2, r0
 8002d70:	eb63 0301 	sbc.w	r3, r3, r1
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	00d9      	lsls	r1, r3, #3
 8002d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d82:	00d0      	lsls	r0, r2, #3
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	eb12 0208 	adds.w	r2, r2, r8
 8002d8c:	eb43 0309 	adc.w	r3, r3, r9
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0259      	lsls	r1, r3, #9
 8002d9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d9e:	0250      	lsls	r0, r2, #9
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f7fd fa6e 	bl	8000290 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e04a      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	ea02 0400 	and.w	r4, r2, r0
 8002dd6:	ea03 0501 	and.w	r5, r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	014b      	lsls	r3, r1, #5
 8002de8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dec:	0142      	lsls	r2, r0, #5
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	1b00      	subs	r0, r0, r4
 8002df4:	eb61 0105 	sbc.w	r1, r1, r5
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	018b      	lsls	r3, r1, #6
 8002e02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e06:	0182      	lsls	r2, r0, #6
 8002e08:	1a12      	subs	r2, r2, r0
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	00d9      	lsls	r1, r3, #3
 8002e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e1c:	00d0      	lsls	r0, r2, #3
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	1912      	adds	r2, r2, r4
 8002e24:	eb45 0303 	adc.w	r3, r5, r3
 8002e28:	f04f 0000 	mov.w	r0, #0
 8002e2c:	f04f 0100 	mov.w	r1, #0
 8002e30:	0299      	lsls	r1, r3, #10
 8002e32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e36:	0290      	lsls	r0, r2, #10
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	f7fd fa22 	bl	8000290 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e72:	60bb      	str	r3, [r7, #8]
      break;
 8002e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e76:	68bb      	ldr	r3, [r7, #8]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000000 	.word	0x20000000

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0a9b      	lsrs	r3, r3, #10
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08004618 	.word	0x08004618

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed4:	f7ff ffdc 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0b5b      	lsrs	r3, r3, #13
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08004618 	.word	0x08004618

08002ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e03f      	b.n	8002f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe f890 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f929 	bl	8003194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
 8002f96:	af02      	add	r7, sp, #8
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d17c      	bne.n	80030ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_Transmit+0x2c>
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e075      	b.n	80030ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Transmit+0x3e>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e06e      	b.n	80030ae <HAL_UART_Transmit+0x11c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2221      	movs	r2, #33	; 0x21
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe6:	f7fe f9c9 	bl	800137c <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003000:	d108      	bne.n	8003014 <HAL_UART_Transmit+0x82>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e003      	b.n	800301c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003024:	e02a      	b.n	800307c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f840 	bl	80030b6 <UART_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e036      	b.n	80030ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	3302      	adds	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	e007      	b.n	800306e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	3301      	adds	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1cf      	bne.n	8003026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2140      	movs	r1, #64	; 0x40
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f810 	bl	80030b6 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e006      	b.n	80030ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b090      	sub	sp, #64	; 0x40
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	e050      	b.n	800316a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d04c      	beq.n	800316a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d6:	f7fe f951 	bl	800137c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d241      	bcs.n	800316a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003106:	637a      	str	r2, [r7, #52]	; 0x34
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3314      	adds	r3, #20
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	613b      	str	r3, [r7, #16]
   return(result);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313a:	623a      	str	r2, [r7, #32]
 800313c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	61bb      	str	r3, [r7, #24]
   return(result);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00f      	b.n	800318a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	429a      	cmp	r2, r3
 8003186:	d09f      	beq.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3740      	adds	r7, #64	; 0x40
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	b09f      	sub	sp, #124	; 0x7c
 800319a:	af00      	add	r7, sp, #0
 800319c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	68d9      	ldr	r1, [r3, #12]
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	ea40 0301 	orr.w	r3, r0, r1
 80031b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	431a      	orrs	r2, r3
 80031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031d8:	f021 010c 	bic.w	r1, r1, #12
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	6999      	ldr	r1, [r3, #24]
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	ea40 0301 	orr.w	r3, r0, r1
 80031fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4bc5      	ldr	r3, [pc, #788]	; (8003518 <UART_SetConfig+0x384>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d004      	beq.n	8003212 <UART_SetConfig+0x7e>
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4bc3      	ldr	r3, [pc, #780]	; (800351c <UART_SetConfig+0x388>)
 800320e:	429a      	cmp	r2, r3
 8003210:	d103      	bne.n	800321a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003212:	f7ff fe5d 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003216:	6778      	str	r0, [r7, #116]	; 0x74
 8003218:	e002      	b.n	8003220 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7ff fe45 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 800321e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	f040 80b6 	bne.w	8003398 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	461c      	mov	r4, r3
 8003230:	f04f 0500 	mov.w	r5, #0
 8003234:	4622      	mov	r2, r4
 8003236:	462b      	mov	r3, r5
 8003238:	1891      	adds	r1, r2, r2
 800323a:	6439      	str	r1, [r7, #64]	; 0x40
 800323c:	415b      	adcs	r3, r3
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
 8003240:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003244:	1912      	adds	r2, r2, r4
 8003246:	eb45 0303 	adc.w	r3, r5, r3
 800324a:	f04f 0000 	mov.w	r0, #0
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	00d9      	lsls	r1, r3, #3
 8003254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003258:	00d0      	lsls	r0, r2, #3
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	1911      	adds	r1, r2, r4
 8003260:	6639      	str	r1, [r7, #96]	; 0x60
 8003262:	416b      	adcs	r3, r5
 8003264:	667b      	str	r3, [r7, #100]	; 0x64
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	461a      	mov	r2, r3
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	1891      	adds	r1, r2, r2
 8003272:	63b9      	str	r1, [r7, #56]	; 0x38
 8003274:	415b      	adcs	r3, r3
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800327c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003280:	f7fd f806 	bl	8000290 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4ba5      	ldr	r3, [pc, #660]	; (8003520 <UART_SetConfig+0x38c>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	011e      	lsls	r6, r3, #4
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	461c      	mov	r4, r3
 8003296:	f04f 0500 	mov.w	r5, #0
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	6339      	str	r1, [r7, #48]	; 0x30
 80032a2:	415b      	adcs	r3, r3
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032aa:	1912      	adds	r2, r2, r4
 80032ac:	eb45 0303 	adc.w	r3, r5, r3
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	00d9      	lsls	r1, r3, #3
 80032ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032be:	00d0      	lsls	r0, r2, #3
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	1911      	adds	r1, r2, r4
 80032c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80032c8:	416b      	adcs	r3, r5
 80032ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	1891      	adds	r1, r2, r2
 80032d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80032da:	415b      	adcs	r3, r3
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032e6:	f7fc ffd3 	bl	8000290 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <UART_SetConfig+0x38c>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	3332      	adds	r3, #50	; 0x32
 8003302:	4a87      	ldr	r2, [pc, #540]	; (8003520 <UART_SetConfig+0x38c>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003310:	441e      	add	r6, r3
 8003312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003314:	4618      	mov	r0, r3
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	1894      	adds	r4, r2, r2
 8003320:	623c      	str	r4, [r7, #32]
 8003322:	415b      	adcs	r3, r3
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332a:	1812      	adds	r2, r2, r0
 800332c:	eb41 0303 	adc.w	r3, r1, r3
 8003330:	f04f 0400 	mov.w	r4, #0
 8003334:	f04f 0500 	mov.w	r5, #0
 8003338:	00dd      	lsls	r5, r3, #3
 800333a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800333e:	00d4      	lsls	r4, r2, #3
 8003340:	4622      	mov	r2, r4
 8003342:	462b      	mov	r3, r5
 8003344:	1814      	adds	r4, r2, r0
 8003346:	653c      	str	r4, [r7, #80]	; 0x50
 8003348:	414b      	adcs	r3, r1
 800334a:	657b      	str	r3, [r7, #84]	; 0x54
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	461a      	mov	r2, r3
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	1891      	adds	r1, r2, r2
 8003358:	61b9      	str	r1, [r7, #24]
 800335a:	415b      	adcs	r3, r3
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003362:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003366:	f7fc ff93 	bl	8000290 <__aeabi_uldivmod>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <UART_SetConfig+0x38c>)
 8003370:	fba3 1302 	umull	r1, r3, r3, r2
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	2164      	movs	r1, #100	; 0x64
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	3332      	adds	r3, #50	; 0x32
 8003382:	4a67      	ldr	r2, [pc, #412]	; (8003520 <UART_SetConfig+0x38c>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	f003 0207 	and.w	r2, r3, #7
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4432      	add	r2, r6
 8003394:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003396:	e0b9      	b.n	800350c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339a:	461c      	mov	r4, r3
 800339c:	f04f 0500 	mov.w	r5, #0
 80033a0:	4622      	mov	r2, r4
 80033a2:	462b      	mov	r3, r5
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	415b      	adcs	r3, r3
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033b0:	1912      	adds	r2, r2, r4
 80033b2:	eb45 0303 	adc.w	r3, r5, r3
 80033b6:	f04f 0000 	mov.w	r0, #0
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	00d9      	lsls	r1, r3, #3
 80033c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c4:	00d0      	lsls	r0, r2, #3
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	eb12 0804 	adds.w	r8, r2, r4
 80033ce:	eb43 0905 	adc.w	r9, r3, r5
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	008b      	lsls	r3, r1, #2
 80033e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ea:	0082      	lsls	r2, r0, #2
 80033ec:	4640      	mov	r0, r8
 80033ee:	4649      	mov	r1, r9
 80033f0:	f7fc ff4e 	bl	8000290 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b49      	ldr	r3, [pc, #292]	; (8003520 <UART_SetConfig+0x38c>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	011e      	lsls	r6, r3, #4
 8003402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003404:	4618      	mov	r0, r3
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	1894      	adds	r4, r2, r2
 8003410:	60bc      	str	r4, [r7, #8]
 8003412:	415b      	adcs	r3, r3
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800341a:	1812      	adds	r2, r2, r0
 800341c:	eb41 0303 	adc.w	r3, r1, r3
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	f04f 0500 	mov.w	r5, #0
 8003428:	00dd      	lsls	r5, r3, #3
 800342a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800342e:	00d4      	lsls	r4, r2, #3
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	1814      	adds	r4, r2, r0
 8003436:	64bc      	str	r4, [r7, #72]	; 0x48
 8003438:	414b      	adcs	r3, r1
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	008b      	lsls	r3, r1, #2
 8003450:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003454:	0082      	lsls	r2, r0, #2
 8003456:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800345a:	f7fc ff19 	bl	8000290 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <UART_SetConfig+0x38c>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <UART_SetConfig+0x38c>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003482:	441e      	add	r6, r3
 8003484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003486:	4618      	mov	r0, r3
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	1894      	adds	r4, r2, r2
 8003492:	603c      	str	r4, [r7, #0]
 8003494:	415b      	adcs	r3, r3
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800349c:	1812      	adds	r2, r2, r0
 800349e:	eb41 0303 	adc.w	r3, r1, r3
 80034a2:	f04f 0400 	mov.w	r4, #0
 80034a6:	f04f 0500 	mov.w	r5, #0
 80034aa:	00dd      	lsls	r5, r3, #3
 80034ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034b0:	00d4      	lsls	r4, r2, #3
 80034b2:	4622      	mov	r2, r4
 80034b4:	462b      	mov	r3, r5
 80034b6:	eb12 0a00 	adds.w	sl, r2, r0
 80034ba:	eb43 0b01 	adc.w	fp, r3, r1
 80034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	008b      	lsls	r3, r1, #2
 80034d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034d6:	0082      	lsls	r2, r0, #2
 80034d8:	4650      	mov	r0, sl
 80034da:	4659      	mov	r1, fp
 80034dc:	f7fc fed8 	bl	8000290 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <UART_SetConfig+0x38c>)
 80034e6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2164      	movs	r1, #100	; 0x64
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	3332      	adds	r3, #50	; 0x32
 80034f8:	4a09      	ldr	r2, [pc, #36]	; (8003520 <UART_SetConfig+0x38c>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4432      	add	r2, r6
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	377c      	adds	r7, #124	; 0x7c
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003516:	bf00      	nop
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	51eb851f 	.word	0x51eb851f

08003524 <__errno>:
 8003524:	4b01      	ldr	r3, [pc, #4]	; (800352c <__errno+0x8>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	2000000c 	.word	0x2000000c

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4d0d      	ldr	r5, [pc, #52]	; (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2600      	movs	r6, #0
 800353c:	42a6      	cmp	r6, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4d0b      	ldr	r5, [pc, #44]	; (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	; (8003574 <__libc_init_array+0x44>)
 8003544:	f000 ffec 	bl	8004520 <_init>
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2600      	movs	r6, #0
 800354e:	42a6      	cmp	r6, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f855 3b04 	ldr.w	r3, [r5], #4
 8003558:	4798      	blx	r3
 800355a:	3601      	adds	r6, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003562:	4798      	blx	r3
 8003564:	3601      	adds	r6, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	080046c0 	.word	0x080046c0
 800356c:	080046c0 	.word	0x080046c0
 8003570:	080046c0 	.word	0x080046c0
 8003574:	080046c4 	.word	0x080046c4

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <iprintf>:
 8003588:	b40f      	push	{r0, r1, r2, r3}
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <iprintf+0x2c>)
 800358c:	b513      	push	{r0, r1, r4, lr}
 800358e:	681c      	ldr	r4, [r3, #0]
 8003590:	b124      	cbz	r4, 800359c <iprintf+0x14>
 8003592:	69a3      	ldr	r3, [r4, #24]
 8003594:	b913      	cbnz	r3, 800359c <iprintf+0x14>
 8003596:	4620      	mov	r0, r4
 8003598:	f000 fa5e 	bl	8003a58 <__sinit>
 800359c:	ab05      	add	r3, sp, #20
 800359e:	9a04      	ldr	r2, [sp, #16]
 80035a0:	68a1      	ldr	r1, [r4, #8]
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	4620      	mov	r0, r4
 80035a6:	f000 fc2f 	bl	8003e08 <_vfiprintf_r>
 80035aa:	b002      	add	sp, #8
 80035ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b0:	b004      	add	sp, #16
 80035b2:	4770      	bx	lr
 80035b4:	2000000c 	.word	0x2000000c

080035b8 <_puts_r>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	460e      	mov	r6, r1
 80035bc:	4605      	mov	r5, r0
 80035be:	b118      	cbz	r0, 80035c8 <_puts_r+0x10>
 80035c0:	6983      	ldr	r3, [r0, #24]
 80035c2:	b90b      	cbnz	r3, 80035c8 <_puts_r+0x10>
 80035c4:	f000 fa48 	bl	8003a58 <__sinit>
 80035c8:	69ab      	ldr	r3, [r5, #24]
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	b913      	cbnz	r3, 80035d4 <_puts_r+0x1c>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fa42 	bl	8003a58 <__sinit>
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <_puts_r+0xd0>)
 80035d6:	429c      	cmp	r4, r3
 80035d8:	d120      	bne.n	800361c <_puts_r+0x64>
 80035da:	686c      	ldr	r4, [r5, #4]
 80035dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035de:	07db      	lsls	r3, r3, #31
 80035e0:	d405      	bmi.n	80035ee <_puts_r+0x36>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	0598      	lsls	r0, r3, #22
 80035e6:	d402      	bmi.n	80035ee <_puts_r+0x36>
 80035e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ea:	f000 fad3 	bl	8003b94 <__retarget_lock_acquire_recursive>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	0719      	lsls	r1, r3, #28
 80035f2:	d51d      	bpl.n	8003630 <_puts_r+0x78>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	b1db      	cbz	r3, 8003630 <_puts_r+0x78>
 80035f8:	3e01      	subs	r6, #1
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003600:	3b01      	subs	r3, #1
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	bb39      	cbnz	r1, 8003656 <_puts_r+0x9e>
 8003606:	2b00      	cmp	r3, #0
 8003608:	da38      	bge.n	800367c <_puts_r+0xc4>
 800360a:	4622      	mov	r2, r4
 800360c:	210a      	movs	r1, #10
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f848 	bl	80036a4 <__swbuf_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d011      	beq.n	800363c <_puts_r+0x84>
 8003618:	250a      	movs	r5, #10
 800361a:	e011      	b.n	8003640 <_puts_r+0x88>
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <_puts_r+0xd4>)
 800361e:	429c      	cmp	r4, r3
 8003620:	d101      	bne.n	8003626 <_puts_r+0x6e>
 8003622:	68ac      	ldr	r4, [r5, #8]
 8003624:	e7da      	b.n	80035dc <_puts_r+0x24>
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <_puts_r+0xd8>)
 8003628:	429c      	cmp	r4, r3
 800362a:	bf08      	it	eq
 800362c:	68ec      	ldreq	r4, [r5, #12]
 800362e:	e7d5      	b.n	80035dc <_puts_r+0x24>
 8003630:	4621      	mov	r1, r4
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f888 	bl	8003748 <__swsetup_r>
 8003638:	2800      	cmp	r0, #0
 800363a:	d0dd      	beq.n	80035f8 <_puts_r+0x40>
 800363c:	f04f 35ff 	mov.w	r5, #4294967295
 8003640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003642:	07da      	lsls	r2, r3, #31
 8003644:	d405      	bmi.n	8003652 <_puts_r+0x9a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	059b      	lsls	r3, r3, #22
 800364a:	d402      	bmi.n	8003652 <_puts_r+0x9a>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f000 faa2 	bl	8003b96 <__retarget_lock_release_recursive>
 8003652:	4628      	mov	r0, r5
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	2b00      	cmp	r3, #0
 8003658:	da04      	bge.n	8003664 <_puts_r+0xac>
 800365a:	69a2      	ldr	r2, [r4, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	dc06      	bgt.n	800366e <_puts_r+0xb6>
 8003660:	290a      	cmp	r1, #10
 8003662:	d004      	beq.n	800366e <_puts_r+0xb6>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	7019      	strb	r1, [r3, #0]
 800366c:	e7c5      	b.n	80035fa <_puts_r+0x42>
 800366e:	4622      	mov	r2, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f000 f817 	bl	80036a4 <__swbuf_r>
 8003676:	3001      	adds	r0, #1
 8003678:	d1bf      	bne.n	80035fa <_puts_r+0x42>
 800367a:	e7df      	b.n	800363c <_puts_r+0x84>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	250a      	movs	r5, #10
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	701d      	strb	r5, [r3, #0]
 8003686:	e7db      	b.n	8003640 <_puts_r+0x88>
 8003688:	08004644 	.word	0x08004644
 800368c:	08004664 	.word	0x08004664
 8003690:	08004624 	.word	0x08004624

08003694 <puts>:
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <puts+0xc>)
 8003696:	4601      	mov	r1, r0
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f7ff bf8d 	b.w	80035b8 <_puts_r>
 800369e:	bf00      	nop
 80036a0:	2000000c 	.word	0x2000000c

080036a4 <__swbuf_r>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	460e      	mov	r6, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	4605      	mov	r5, r0
 80036ac:	b118      	cbz	r0, 80036b6 <__swbuf_r+0x12>
 80036ae:	6983      	ldr	r3, [r0, #24]
 80036b0:	b90b      	cbnz	r3, 80036b6 <__swbuf_r+0x12>
 80036b2:	f000 f9d1 	bl	8003a58 <__sinit>
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <__swbuf_r+0x98>)
 80036b8:	429c      	cmp	r4, r3
 80036ba:	d12b      	bne.n	8003714 <__swbuf_r+0x70>
 80036bc:	686c      	ldr	r4, [r5, #4]
 80036be:	69a3      	ldr	r3, [r4, #24]
 80036c0:	60a3      	str	r3, [r4, #8]
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	071a      	lsls	r2, r3, #28
 80036c6:	d52f      	bpl.n	8003728 <__swbuf_r+0x84>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	b36b      	cbz	r3, 8003728 <__swbuf_r+0x84>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	1ac0      	subs	r0, r0, r3
 80036d2:	6963      	ldr	r3, [r4, #20]
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	4283      	cmp	r3, r0
 80036d8:	4637      	mov	r7, r6
 80036da:	dc04      	bgt.n	80036e6 <__swbuf_r+0x42>
 80036dc:	4621      	mov	r1, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f926 	bl	8003930 <_fflush_r>
 80036e4:	bb30      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	701e      	strb	r6, [r3, #0]
 80036f4:	6963      	ldr	r3, [r4, #20]
 80036f6:	3001      	adds	r0, #1
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d004      	beq.n	8003706 <__swbuf_r+0x62>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	07db      	lsls	r3, r3, #31
 8003700:	d506      	bpl.n	8003710 <__swbuf_r+0x6c>
 8003702:	2e0a      	cmp	r6, #10
 8003704:	d104      	bne.n	8003710 <__swbuf_r+0x6c>
 8003706:	4621      	mov	r1, r4
 8003708:	4628      	mov	r0, r5
 800370a:	f000 f911 	bl	8003930 <_fflush_r>
 800370e:	b988      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 8003710:	4638      	mov	r0, r7
 8003712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <__swbuf_r+0x9c>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <__swbuf_r+0x7a>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7cf      	b.n	80036be <__swbuf_r+0x1a>
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <__swbuf_r+0xa0>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7ca      	b.n	80036be <__swbuf_r+0x1a>
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f80c 	bl	8003748 <__swsetup_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0cb      	beq.n	80036cc <__swbuf_r+0x28>
 8003734:	f04f 37ff 	mov.w	r7, #4294967295
 8003738:	e7ea      	b.n	8003710 <__swbuf_r+0x6c>
 800373a:	bf00      	nop
 800373c:	08004644 	.word	0x08004644
 8003740:	08004664 	.word	0x08004664
 8003744:	08004624 	.word	0x08004624

08003748 <__swsetup_r>:
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <__swsetup_r+0xcc>)
 800374a:	b570      	push	{r4, r5, r6, lr}
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	4606      	mov	r6, r0
 8003750:	460c      	mov	r4, r1
 8003752:	b125      	cbz	r5, 800375e <__swsetup_r+0x16>
 8003754:	69ab      	ldr	r3, [r5, #24]
 8003756:	b913      	cbnz	r3, 800375e <__swsetup_r+0x16>
 8003758:	4628      	mov	r0, r5
 800375a:	f000 f97d 	bl	8003a58 <__sinit>
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <__swsetup_r+0xd0>)
 8003760:	429c      	cmp	r4, r3
 8003762:	d10f      	bne.n	8003784 <__swsetup_r+0x3c>
 8003764:	686c      	ldr	r4, [r5, #4]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800376c:	0719      	lsls	r1, r3, #28
 800376e:	d42c      	bmi.n	80037ca <__swsetup_r+0x82>
 8003770:	06dd      	lsls	r5, r3, #27
 8003772:	d411      	bmi.n	8003798 <__swsetup_r+0x50>
 8003774:	2309      	movs	r3, #9
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	e03e      	b.n	8003802 <__swsetup_r+0xba>
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <__swsetup_r+0xd4>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d101      	bne.n	800378e <__swsetup_r+0x46>
 800378a:	68ac      	ldr	r4, [r5, #8]
 800378c:	e7eb      	b.n	8003766 <__swsetup_r+0x1e>
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <__swsetup_r+0xd8>)
 8003790:	429c      	cmp	r4, r3
 8003792:	bf08      	it	eq
 8003794:	68ec      	ldreq	r4, [r5, #12]
 8003796:	e7e6      	b.n	8003766 <__swsetup_r+0x1e>
 8003798:	0758      	lsls	r0, r3, #29
 800379a:	d512      	bpl.n	80037c2 <__swsetup_r+0x7a>
 800379c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800379e:	b141      	cbz	r1, 80037b2 <__swsetup_r+0x6a>
 80037a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d002      	beq.n	80037ae <__swsetup_r+0x66>
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 fa59 	bl	8003c60 <_free_r>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6363      	str	r3, [r4, #52]	; 0x34
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	b94b      	cbnz	r3, 80037e2 <__swsetup_r+0x9a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d003      	beq.n	80037e2 <__swsetup_r+0x9a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 f9ff 	bl	8003be0 <__smakebuf_r>
 80037e2:	89a0      	ldrh	r0, [r4, #12]
 80037e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037e8:	f010 0301 	ands.w	r3, r0, #1
 80037ec:	d00a      	beq.n	8003804 <__swsetup_r+0xbc>
 80037ee:	2300      	movs	r3, #0
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6963      	ldr	r3, [r4, #20]
 80037f4:	425b      	negs	r3, r3
 80037f6:	61a3      	str	r3, [r4, #24]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	b943      	cbnz	r3, 800380e <__swsetup_r+0xc6>
 80037fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003800:	d1ba      	bne.n	8003778 <__swsetup_r+0x30>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	0781      	lsls	r1, r0, #30
 8003806:	bf58      	it	pl
 8003808:	6963      	ldrpl	r3, [r4, #20]
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	e7f4      	b.n	80037f8 <__swsetup_r+0xb0>
 800380e:	2000      	movs	r0, #0
 8003810:	e7f7      	b.n	8003802 <__swsetup_r+0xba>
 8003812:	bf00      	nop
 8003814:	2000000c 	.word	0x2000000c
 8003818:	08004644 	.word	0x08004644
 800381c:	08004664 	.word	0x08004664
 8003820:	08004624 	.word	0x08004624

08003824 <__sflush_r>:
 8003824:	898a      	ldrh	r2, [r1, #12]
 8003826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382a:	4605      	mov	r5, r0
 800382c:	0710      	lsls	r0, r2, #28
 800382e:	460c      	mov	r4, r1
 8003830:	d458      	bmi.n	80038e4 <__sflush_r+0xc0>
 8003832:	684b      	ldr	r3, [r1, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	dc05      	bgt.n	8003844 <__sflush_r+0x20>
 8003838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	dc02      	bgt.n	8003844 <__sflush_r+0x20>
 800383e:	2000      	movs	r0, #0
 8003840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003846:	2e00      	cmp	r6, #0
 8003848:	d0f9      	beq.n	800383e <__sflush_r+0x1a>
 800384a:	2300      	movs	r3, #0
 800384c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003850:	682f      	ldr	r7, [r5, #0]
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	d032      	beq.n	80038bc <__sflush_r+0x98>
 8003856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	075a      	lsls	r2, r3, #29
 800385c:	d505      	bpl.n	800386a <__sflush_r+0x46>
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	1ac0      	subs	r0, r0, r3
 8003862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003864:	b10b      	cbz	r3, 800386a <__sflush_r+0x46>
 8003866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003868:	1ac0      	subs	r0, r0, r3
 800386a:	2300      	movs	r3, #0
 800386c:	4602      	mov	r2, r0
 800386e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003870:	6a21      	ldr	r1, [r4, #32]
 8003872:	4628      	mov	r0, r5
 8003874:	47b0      	blx	r6
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	d106      	bne.n	800388a <__sflush_r+0x66>
 800387c:	6829      	ldr	r1, [r5, #0]
 800387e:	291d      	cmp	r1, #29
 8003880:	d82c      	bhi.n	80038dc <__sflush_r+0xb8>
 8003882:	4a2a      	ldr	r2, [pc, #168]	; (800392c <__sflush_r+0x108>)
 8003884:	40ca      	lsrs	r2, r1
 8003886:	07d6      	lsls	r6, r2, #31
 8003888:	d528      	bpl.n	80038dc <__sflush_r+0xb8>
 800388a:	2200      	movs	r2, #0
 800388c:	6062      	str	r2, [r4, #4]
 800388e:	04d9      	lsls	r1, r3, #19
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	6022      	str	r2, [r4, #0]
 8003894:	d504      	bpl.n	80038a0 <__sflush_r+0x7c>
 8003896:	1c42      	adds	r2, r0, #1
 8003898:	d101      	bne.n	800389e <__sflush_r+0x7a>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	b903      	cbnz	r3, 80038a0 <__sflush_r+0x7c>
 800389e:	6560      	str	r0, [r4, #84]	; 0x54
 80038a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038a2:	602f      	str	r7, [r5, #0]
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d0ca      	beq.n	800383e <__sflush_r+0x1a>
 80038a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d002      	beq.n	80038b6 <__sflush_r+0x92>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f9d5 	bl	8003c60 <_free_r>
 80038b6:	2000      	movs	r0, #0
 80038b8:	6360      	str	r0, [r4, #52]	; 0x34
 80038ba:	e7c1      	b.n	8003840 <__sflush_r+0x1c>
 80038bc:	6a21      	ldr	r1, [r4, #32]
 80038be:	2301      	movs	r3, #1
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b0      	blx	r6
 80038c4:	1c41      	adds	r1, r0, #1
 80038c6:	d1c7      	bne.n	8003858 <__sflush_r+0x34>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0c4      	beq.n	8003858 <__sflush_r+0x34>
 80038ce:	2b1d      	cmp	r3, #29
 80038d0:	d001      	beq.n	80038d6 <__sflush_r+0xb2>
 80038d2:	2b16      	cmp	r3, #22
 80038d4:	d101      	bne.n	80038da <__sflush_r+0xb6>
 80038d6:	602f      	str	r7, [r5, #0]
 80038d8:	e7b1      	b.n	800383e <__sflush_r+0x1a>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	e7ad      	b.n	8003840 <__sflush_r+0x1c>
 80038e4:	690f      	ldr	r7, [r1, #16]
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	d0a9      	beq.n	800383e <__sflush_r+0x1a>
 80038ea:	0793      	lsls	r3, r2, #30
 80038ec:	680e      	ldr	r6, [r1, #0]
 80038ee:	bf08      	it	eq
 80038f0:	694b      	ldreq	r3, [r1, #20]
 80038f2:	600f      	str	r7, [r1, #0]
 80038f4:	bf18      	it	ne
 80038f6:	2300      	movne	r3, #0
 80038f8:	eba6 0807 	sub.w	r8, r6, r7
 80038fc:	608b      	str	r3, [r1, #8]
 80038fe:	f1b8 0f00 	cmp.w	r8, #0
 8003902:	dd9c      	ble.n	800383e <__sflush_r+0x1a>
 8003904:	6a21      	ldr	r1, [r4, #32]
 8003906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003908:	4643      	mov	r3, r8
 800390a:	463a      	mov	r2, r7
 800390c:	4628      	mov	r0, r5
 800390e:	47b0      	blx	r6
 8003910:	2800      	cmp	r0, #0
 8003912:	dc06      	bgt.n	8003922 <__sflush_r+0xfe>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	e78e      	b.n	8003840 <__sflush_r+0x1c>
 8003922:	4407      	add	r7, r0
 8003924:	eba8 0800 	sub.w	r8, r8, r0
 8003928:	e7e9      	b.n	80038fe <__sflush_r+0xda>
 800392a:	bf00      	nop
 800392c:	20400001 	.word	0x20400001

08003930 <_fflush_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	690b      	ldr	r3, [r1, #16]
 8003934:	4605      	mov	r5, r0
 8003936:	460c      	mov	r4, r1
 8003938:	b913      	cbnz	r3, 8003940 <_fflush_r+0x10>
 800393a:	2500      	movs	r5, #0
 800393c:	4628      	mov	r0, r5
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	b118      	cbz	r0, 800394a <_fflush_r+0x1a>
 8003942:	6983      	ldr	r3, [r0, #24]
 8003944:	b90b      	cbnz	r3, 800394a <_fflush_r+0x1a>
 8003946:	f000 f887 	bl	8003a58 <__sinit>
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <_fflush_r+0x6c>)
 800394c:	429c      	cmp	r4, r3
 800394e:	d11b      	bne.n	8003988 <_fflush_r+0x58>
 8003950:	686c      	ldr	r4, [r5, #4]
 8003952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ef      	beq.n	800393a <_fflush_r+0xa>
 800395a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800395c:	07d0      	lsls	r0, r2, #31
 800395e:	d404      	bmi.n	800396a <_fflush_r+0x3a>
 8003960:	0599      	lsls	r1, r3, #22
 8003962:	d402      	bmi.n	800396a <_fflush_r+0x3a>
 8003964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003966:	f000 f915 	bl	8003b94 <__retarget_lock_acquire_recursive>
 800396a:	4628      	mov	r0, r5
 800396c:	4621      	mov	r1, r4
 800396e:	f7ff ff59 	bl	8003824 <__sflush_r>
 8003972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003974:	07da      	lsls	r2, r3, #31
 8003976:	4605      	mov	r5, r0
 8003978:	d4e0      	bmi.n	800393c <_fflush_r+0xc>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	059b      	lsls	r3, r3, #22
 800397e:	d4dd      	bmi.n	800393c <_fflush_r+0xc>
 8003980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003982:	f000 f908 	bl	8003b96 <__retarget_lock_release_recursive>
 8003986:	e7d9      	b.n	800393c <_fflush_r+0xc>
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <_fflush_r+0x70>)
 800398a:	429c      	cmp	r4, r3
 800398c:	d101      	bne.n	8003992 <_fflush_r+0x62>
 800398e:	68ac      	ldr	r4, [r5, #8]
 8003990:	e7df      	b.n	8003952 <_fflush_r+0x22>
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <_fflush_r+0x74>)
 8003994:	429c      	cmp	r4, r3
 8003996:	bf08      	it	eq
 8003998:	68ec      	ldreq	r4, [r5, #12]
 800399a:	e7da      	b.n	8003952 <_fflush_r+0x22>
 800399c:	08004644 	.word	0x08004644
 80039a0:	08004664 	.word	0x08004664
 80039a4:	08004624 	.word	0x08004624

080039a8 <std>:
 80039a8:	2300      	movs	r3, #0
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4604      	mov	r4, r0
 80039ae:	e9c0 3300 	strd	r3, r3, [r0]
 80039b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039b6:	6083      	str	r3, [r0, #8]
 80039b8:	8181      	strh	r1, [r0, #12]
 80039ba:	6643      	str	r3, [r0, #100]	; 0x64
 80039bc:	81c2      	strh	r2, [r0, #14]
 80039be:	6183      	str	r3, [r0, #24]
 80039c0:	4619      	mov	r1, r3
 80039c2:	2208      	movs	r2, #8
 80039c4:	305c      	adds	r0, #92	; 0x5c
 80039c6:	f7ff fdd7 	bl	8003578 <memset>
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <std+0x38>)
 80039cc:	6263      	str	r3, [r4, #36]	; 0x24
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <std+0x3c>)
 80039d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <std+0x40>)
 80039d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x44>)
 80039d8:	6224      	str	r4, [r4, #32]
 80039da:	6323      	str	r3, [r4, #48]	; 0x30
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	bf00      	nop
 80039e0:	080043b1 	.word	0x080043b1
 80039e4:	080043d3 	.word	0x080043d3
 80039e8:	0800440b 	.word	0x0800440b
 80039ec:	0800442f 	.word	0x0800442f

080039f0 <_cleanup_r>:
 80039f0:	4901      	ldr	r1, [pc, #4]	; (80039f8 <_cleanup_r+0x8>)
 80039f2:	f000 b8af 	b.w	8003b54 <_fwalk_reent>
 80039f6:	bf00      	nop
 80039f8:	08003931 	.word	0x08003931

080039fc <__sfmoreglue>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	1e4a      	subs	r2, r1, #1
 8003a00:	2568      	movs	r5, #104	; 0x68
 8003a02:	4355      	muls	r5, r2
 8003a04:	460e      	mov	r6, r1
 8003a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a0a:	f000 f979 	bl	8003d00 <_malloc_r>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	b140      	cbz	r0, 8003a24 <__sfmoreglue+0x28>
 8003a12:	2100      	movs	r1, #0
 8003a14:	e9c0 1600 	strd	r1, r6, [r0]
 8003a18:	300c      	adds	r0, #12
 8003a1a:	60a0      	str	r0, [r4, #8]
 8003a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a20:	f7ff fdaa 	bl	8003578 <memset>
 8003a24:	4620      	mov	r0, r4
 8003a26:	bd70      	pop	{r4, r5, r6, pc}

08003a28 <__sfp_lock_acquire>:
 8003a28:	4801      	ldr	r0, [pc, #4]	; (8003a30 <__sfp_lock_acquire+0x8>)
 8003a2a:	f000 b8b3 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 8003a2e:	bf00      	nop
 8003a30:	20000540 	.word	0x20000540

08003a34 <__sfp_lock_release>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__sfp_lock_release+0x8>)
 8003a36:	f000 b8ae 	b.w	8003b96 <__retarget_lock_release_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000540 	.word	0x20000540

08003a40 <__sinit_lock_acquire>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__sinit_lock_acquire+0x8>)
 8003a42:	f000 b8a7 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	2000053b 	.word	0x2000053b

08003a4c <__sinit_lock_release>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__sinit_lock_release+0x8>)
 8003a4e:	f000 b8a2 	b.w	8003b96 <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	2000053b 	.word	0x2000053b

08003a58 <__sinit>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f7ff fff0 	bl	8003a40 <__sinit_lock_acquire>
 8003a60:	69a3      	ldr	r3, [r4, #24]
 8003a62:	b11b      	cbz	r3, 8003a6c <__sinit+0x14>
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	f7ff bff0 	b.w	8003a4c <__sinit_lock_release>
 8003a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a70:	6523      	str	r3, [r4, #80]	; 0x50
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <__sinit+0x68>)
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <__sinit+0x6c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	bf04      	itt	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	61a3      	streq	r3, [r4, #24]
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 f820 	bl	8003ac8 <__sfp>
 8003a88:	6060      	str	r0, [r4, #4]
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 f81c 	bl	8003ac8 <__sfp>
 8003a90:	60a0      	str	r0, [r4, #8]
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f818 	bl	8003ac8 <__sfp>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60e0      	str	r0, [r4, #12]
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	6860      	ldr	r0, [r4, #4]
 8003aa0:	f7ff ff82 	bl	80039a8 <std>
 8003aa4:	68a0      	ldr	r0, [r4, #8]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2109      	movs	r1, #9
 8003aaa:	f7ff ff7d 	bl	80039a8 <std>
 8003aae:	68e0      	ldr	r0, [r4, #12]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	2112      	movs	r1, #18
 8003ab4:	f7ff ff78 	bl	80039a8 <std>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61a3      	str	r3, [r4, #24]
 8003abc:	e7d2      	b.n	8003a64 <__sinit+0xc>
 8003abe:	bf00      	nop
 8003ac0:	08004620 	.word	0x08004620
 8003ac4:	080039f1 	.word	0x080039f1

08003ac8 <__sfp>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	4607      	mov	r7, r0
 8003acc:	f7ff ffac 	bl	8003a28 <__sfp_lock_acquire>
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <__sfp+0x84>)
 8003ad2:	681e      	ldr	r6, [r3, #0]
 8003ad4:	69b3      	ldr	r3, [r6, #24]
 8003ad6:	b913      	cbnz	r3, 8003ade <__sfp+0x16>
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f7ff ffbd 	bl	8003a58 <__sinit>
 8003ade:	3648      	adds	r6, #72	; 0x48
 8003ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	d503      	bpl.n	8003af0 <__sfp+0x28>
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	b30b      	cbz	r3, 8003b30 <__sfp+0x68>
 8003aec:	6836      	ldr	r6, [r6, #0]
 8003aee:	e7f7      	b.n	8003ae0 <__sfp+0x18>
 8003af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003af4:	b9d5      	cbnz	r5, 8003b2c <__sfp+0x64>
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <__sfp+0x88>)
 8003af8:	60e3      	str	r3, [r4, #12]
 8003afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003afe:	6665      	str	r5, [r4, #100]	; 0x64
 8003b00:	f000 f847 	bl	8003b92 <__retarget_lock_init_recursive>
 8003b04:	f7ff ff96 	bl	8003a34 <__sfp_lock_release>
 8003b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b10:	6025      	str	r5, [r4, #0]
 8003b12:	61a5      	str	r5, [r4, #24]
 8003b14:	2208      	movs	r2, #8
 8003b16:	4629      	mov	r1, r5
 8003b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b1c:	f7ff fd2c 	bl	8003578 <memset>
 8003b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b28:	4620      	mov	r0, r4
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2c:	3468      	adds	r4, #104	; 0x68
 8003b2e:	e7d9      	b.n	8003ae4 <__sfp+0x1c>
 8003b30:	2104      	movs	r1, #4
 8003b32:	4638      	mov	r0, r7
 8003b34:	f7ff ff62 	bl	80039fc <__sfmoreglue>
 8003b38:	4604      	mov	r4, r0
 8003b3a:	6030      	str	r0, [r6, #0]
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1d5      	bne.n	8003aec <__sfp+0x24>
 8003b40:	f7ff ff78 	bl	8003a34 <__sfp_lock_release>
 8003b44:	230c      	movs	r3, #12
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	e7ee      	b.n	8003b28 <__sfp+0x60>
 8003b4a:	bf00      	nop
 8003b4c:	08004620 	.word	0x08004620
 8003b50:	ffff0001 	.word	0xffff0001

08003b54 <_fwalk_reent>:
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b58:	4606      	mov	r6, r0
 8003b5a:	4688      	mov	r8, r1
 8003b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b60:	2700      	movs	r7, #0
 8003b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b66:	f1b9 0901 	subs.w	r9, r9, #1
 8003b6a:	d505      	bpl.n	8003b78 <_fwalk_reent+0x24>
 8003b6c:	6824      	ldr	r4, [r4, #0]
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d1f7      	bne.n	8003b62 <_fwalk_reent+0xe>
 8003b72:	4638      	mov	r0, r7
 8003b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b78:	89ab      	ldrh	r3, [r5, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d907      	bls.n	8003b8e <_fwalk_reent+0x3a>
 8003b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b82:	3301      	adds	r3, #1
 8003b84:	d003      	beq.n	8003b8e <_fwalk_reent+0x3a>
 8003b86:	4629      	mov	r1, r5
 8003b88:	4630      	mov	r0, r6
 8003b8a:	47c0      	blx	r8
 8003b8c:	4307      	orrs	r7, r0
 8003b8e:	3568      	adds	r5, #104	; 0x68
 8003b90:	e7e9      	b.n	8003b66 <_fwalk_reent+0x12>

08003b92 <__retarget_lock_init_recursive>:
 8003b92:	4770      	bx	lr

08003b94 <__retarget_lock_acquire_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <__retarget_lock_release_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <__swhatbuf_r>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	460e      	mov	r6, r1
 8003b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	b096      	sub	sp, #88	; 0x58
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	da07      	bge.n	8003bba <__swhatbuf_r+0x22>
 8003baa:	2300      	movs	r3, #0
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	89b3      	ldrh	r3, [r6, #12]
 8003bb0:	061a      	lsls	r2, r3, #24
 8003bb2:	d410      	bmi.n	8003bd6 <__swhatbuf_r+0x3e>
 8003bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb8:	e00e      	b.n	8003bd8 <__swhatbuf_r+0x40>
 8003bba:	466a      	mov	r2, sp
 8003bbc:	f000 fc5e 	bl	800447c <_fstat_r>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	dbf2      	blt.n	8003baa <__swhatbuf_r+0x12>
 8003bc4:	9a01      	ldr	r2, [sp, #4]
 8003bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bce:	425a      	negs	r2, r3
 8003bd0:	415a      	adcs	r2, r3
 8003bd2:	602a      	str	r2, [r5, #0]
 8003bd4:	e7ee      	b.n	8003bb4 <__swhatbuf_r+0x1c>
 8003bd6:	2340      	movs	r3, #64	; 0x40
 8003bd8:	2000      	movs	r0, #0
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	b016      	add	sp, #88	; 0x58
 8003bde:	bd70      	pop	{r4, r5, r6, pc}

08003be0 <__smakebuf_r>:
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003be4:	079d      	lsls	r5, r3, #30
 8003be6:	4606      	mov	r6, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	d507      	bpl.n	8003bfc <__smakebuf_r+0x1c>
 8003bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	6123      	str	r3, [r4, #16]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	6163      	str	r3, [r4, #20]
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	ab01      	add	r3, sp, #4
 8003bfe:	466a      	mov	r2, sp
 8003c00:	f7ff ffca 	bl	8003b98 <__swhatbuf_r>
 8003c04:	9900      	ldr	r1, [sp, #0]
 8003c06:	4605      	mov	r5, r0
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f000 f879 	bl	8003d00 <_malloc_r>
 8003c0e:	b948      	cbnz	r0, 8003c24 <__smakebuf_r+0x44>
 8003c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c14:	059a      	lsls	r2, r3, #22
 8003c16:	d4ef      	bmi.n	8003bf8 <__smakebuf_r+0x18>
 8003c18:	f023 0303 	bic.w	r3, r3, #3
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	e7e3      	b.n	8003bec <__smakebuf_r+0xc>
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <__smakebuf_r+0x7c>)
 8003c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	6020      	str	r0, [r4, #0]
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	9b00      	ldr	r3, [sp, #0]
 8003c34:	6163      	str	r3, [r4, #20]
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	6120      	str	r0, [r4, #16]
 8003c3a:	b15b      	cbz	r3, 8003c54 <__smakebuf_r+0x74>
 8003c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c40:	4630      	mov	r0, r6
 8003c42:	f000 fc2d 	bl	80044a0 <_isatty_r>
 8003c46:	b128      	cbz	r0, 8003c54 <__smakebuf_r+0x74>
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	89a0      	ldrh	r0, [r4, #12]
 8003c56:	4305      	orrs	r5, r0
 8003c58:	81a5      	strh	r5, [r4, #12]
 8003c5a:	e7cd      	b.n	8003bf8 <__smakebuf_r+0x18>
 8003c5c:	080039f1 	.word	0x080039f1

08003c60 <_free_r>:
 8003c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c62:	2900      	cmp	r1, #0
 8003c64:	d048      	beq.n	8003cf8 <_free_r+0x98>
 8003c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6a:	9001      	str	r0, [sp, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c72:	bfb8      	it	lt
 8003c74:	18e4      	addlt	r4, r4, r3
 8003c76:	f000 fc35 	bl	80044e4 <__malloc_lock>
 8003c7a:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <_free_r+0x9c>)
 8003c7c:	9801      	ldr	r0, [sp, #4]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	4615      	mov	r5, r2
 8003c82:	b933      	cbnz	r3, 8003c92 <_free_r+0x32>
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	6014      	str	r4, [r2, #0]
 8003c88:	b003      	add	sp, #12
 8003c8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c8e:	f000 bc2f 	b.w	80044f0 <__malloc_unlock>
 8003c92:	42a3      	cmp	r3, r4
 8003c94:	d90b      	bls.n	8003cae <_free_r+0x4e>
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	1862      	adds	r2, r4, r1
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	bf04      	itt	eq
 8003c9e:	681a      	ldreq	r2, [r3, #0]
 8003ca0:	685b      	ldreq	r3, [r3, #4]
 8003ca2:	6063      	str	r3, [r4, #4]
 8003ca4:	bf04      	itt	eq
 8003ca6:	1852      	addeq	r2, r2, r1
 8003ca8:	6022      	streq	r2, [r4, #0]
 8003caa:	602c      	str	r4, [r5, #0]
 8003cac:	e7ec      	b.n	8003c88 <_free_r+0x28>
 8003cae:	461a      	mov	r2, r3
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b10b      	cbz	r3, 8003cb8 <_free_r+0x58>
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d9fa      	bls.n	8003cae <_free_r+0x4e>
 8003cb8:	6811      	ldr	r1, [r2, #0]
 8003cba:	1855      	adds	r5, r2, r1
 8003cbc:	42a5      	cmp	r5, r4
 8003cbe:	d10b      	bne.n	8003cd8 <_free_r+0x78>
 8003cc0:	6824      	ldr	r4, [r4, #0]
 8003cc2:	4421      	add	r1, r4
 8003cc4:	1854      	adds	r4, r2, r1
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	6011      	str	r1, [r2, #0]
 8003cca:	d1dd      	bne.n	8003c88 <_free_r+0x28>
 8003ccc:	681c      	ldr	r4, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	6053      	str	r3, [r2, #4]
 8003cd2:	4421      	add	r1, r4
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	e7d7      	b.n	8003c88 <_free_r+0x28>
 8003cd8:	d902      	bls.n	8003ce0 <_free_r+0x80>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	6003      	str	r3, [r0, #0]
 8003cde:	e7d3      	b.n	8003c88 <_free_r+0x28>
 8003ce0:	6825      	ldr	r5, [r4, #0]
 8003ce2:	1961      	adds	r1, r4, r5
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	bf04      	itt	eq
 8003ce8:	6819      	ldreq	r1, [r3, #0]
 8003cea:	685b      	ldreq	r3, [r3, #4]
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	bf04      	itt	eq
 8003cf0:	1949      	addeq	r1, r1, r5
 8003cf2:	6021      	streq	r1, [r4, #0]
 8003cf4:	6054      	str	r4, [r2, #4]
 8003cf6:	e7c7      	b.n	8003c88 <_free_r+0x28>
 8003cf8:	b003      	add	sp, #12
 8003cfa:	bd30      	pop	{r4, r5, pc}
 8003cfc:	20000494 	.word	0x20000494

08003d00 <_malloc_r>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	1ccd      	adds	r5, r1, #3
 8003d04:	f025 0503 	bic.w	r5, r5, #3
 8003d08:	3508      	adds	r5, #8
 8003d0a:	2d0c      	cmp	r5, #12
 8003d0c:	bf38      	it	cc
 8003d0e:	250c      	movcc	r5, #12
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	4606      	mov	r6, r0
 8003d14:	db01      	blt.n	8003d1a <_malloc_r+0x1a>
 8003d16:	42a9      	cmp	r1, r5
 8003d18:	d903      	bls.n	8003d22 <_malloc_r+0x22>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	6033      	str	r3, [r6, #0]
 8003d1e:	2000      	movs	r0, #0
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d22:	f000 fbdf 	bl	80044e4 <__malloc_lock>
 8003d26:	4921      	ldr	r1, [pc, #132]	; (8003dac <_malloc_r+0xac>)
 8003d28:	680a      	ldr	r2, [r1, #0]
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	b99c      	cbnz	r4, 8003d56 <_malloc_r+0x56>
 8003d2e:	4f20      	ldr	r7, [pc, #128]	; (8003db0 <_malloc_r+0xb0>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b923      	cbnz	r3, 8003d3e <_malloc_r+0x3e>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4630      	mov	r0, r6
 8003d38:	f000 fb2a 	bl	8004390 <_sbrk_r>
 8003d3c:	6038      	str	r0, [r7, #0]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 fb25 	bl	8004390 <_sbrk_r>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	d123      	bne.n	8003d92 <_malloc_r+0x92>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 fbce 	bl	80044f0 <__malloc_unlock>
 8003d54:	e7e3      	b.n	8003d1e <_malloc_r+0x1e>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	1b5b      	subs	r3, r3, r5
 8003d5a:	d417      	bmi.n	8003d8c <_malloc_r+0x8c>
 8003d5c:	2b0b      	cmp	r3, #11
 8003d5e:	d903      	bls.n	8003d68 <_malloc_r+0x68>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	441c      	add	r4, r3
 8003d64:	6025      	str	r5, [r4, #0]
 8003d66:	e004      	b.n	8003d72 <_malloc_r+0x72>
 8003d68:	6863      	ldr	r3, [r4, #4]
 8003d6a:	42a2      	cmp	r2, r4
 8003d6c:	bf0c      	ite	eq
 8003d6e:	600b      	streq	r3, [r1, #0]
 8003d70:	6053      	strne	r3, [r2, #4]
 8003d72:	4630      	mov	r0, r6
 8003d74:	f000 fbbc 	bl	80044f0 <__malloc_unlock>
 8003d78:	f104 000b 	add.w	r0, r4, #11
 8003d7c:	1d23      	adds	r3, r4, #4
 8003d7e:	f020 0007 	bic.w	r0, r0, #7
 8003d82:	1ac2      	subs	r2, r0, r3
 8003d84:	d0cc      	beq.n	8003d20 <_malloc_r+0x20>
 8003d86:	1a1b      	subs	r3, r3, r0
 8003d88:	50a3      	str	r3, [r4, r2]
 8003d8a:	e7c9      	b.n	8003d20 <_malloc_r+0x20>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	6864      	ldr	r4, [r4, #4]
 8003d90:	e7cc      	b.n	8003d2c <_malloc_r+0x2c>
 8003d92:	1cc4      	adds	r4, r0, #3
 8003d94:	f024 0403 	bic.w	r4, r4, #3
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d0e3      	beq.n	8003d64 <_malloc_r+0x64>
 8003d9c:	1a21      	subs	r1, r4, r0
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f000 faf6 	bl	8004390 <_sbrk_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d1dd      	bne.n	8003d64 <_malloc_r+0x64>
 8003da8:	e7cf      	b.n	8003d4a <_malloc_r+0x4a>
 8003daa:	bf00      	nop
 8003dac:	20000494 	.word	0x20000494
 8003db0:	20000498 	.word	0x20000498

08003db4 <__sfputc_r>:
 8003db4:	6893      	ldr	r3, [r2, #8]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	b410      	push	{r4}
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	da08      	bge.n	8003dd2 <__sfputc_r+0x1e>
 8003dc0:	6994      	ldr	r4, [r2, #24]
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	db01      	blt.n	8003dca <__sfputc_r+0x16>
 8003dc6:	290a      	cmp	r1, #10
 8003dc8:	d103      	bne.n	8003dd2 <__sfputc_r+0x1e>
 8003dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dce:	f7ff bc69 	b.w	80036a4 <__swbuf_r>
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	1c58      	adds	r0, r3, #1
 8003dd6:	6010      	str	r0, [r2, #0]
 8003dd8:	7019      	strb	r1, [r3, #0]
 8003dda:	4608      	mov	r0, r1
 8003ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <__sfputs_r>:
 8003de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de4:	4606      	mov	r6, r0
 8003de6:	460f      	mov	r7, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	18d5      	adds	r5, r2, r3
 8003dec:	42ac      	cmp	r4, r5
 8003dee:	d101      	bne.n	8003df4 <__sfputs_r+0x12>
 8003df0:	2000      	movs	r0, #0
 8003df2:	e007      	b.n	8003e04 <__sfputs_r+0x22>
 8003df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df8:	463a      	mov	r2, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7ff ffda 	bl	8003db4 <__sfputc_r>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d1f3      	bne.n	8003dec <__sfputs_r+0xa>
 8003e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e08 <_vfiprintf_r>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	b09d      	sub	sp, #116	; 0x74
 8003e10:	4614      	mov	r4, r2
 8003e12:	4698      	mov	r8, r3
 8003e14:	4606      	mov	r6, r0
 8003e16:	b118      	cbz	r0, 8003e20 <_vfiprintf_r+0x18>
 8003e18:	6983      	ldr	r3, [r0, #24]
 8003e1a:	b90b      	cbnz	r3, 8003e20 <_vfiprintf_r+0x18>
 8003e1c:	f7ff fe1c 	bl	8003a58 <__sinit>
 8003e20:	4b89      	ldr	r3, [pc, #548]	; (8004048 <_vfiprintf_r+0x240>)
 8003e22:	429d      	cmp	r5, r3
 8003e24:	d11b      	bne.n	8003e5e <_vfiprintf_r+0x56>
 8003e26:	6875      	ldr	r5, [r6, #4]
 8003e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e2a:	07d9      	lsls	r1, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_vfiprintf_r+0x32>
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	059a      	lsls	r2, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_vfiprintf_r+0x32>
 8003e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e36:	f7ff fead 	bl	8003b94 <__retarget_lock_acquire_recursive>
 8003e3a:	89ab      	ldrh	r3, [r5, #12]
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	d501      	bpl.n	8003e44 <_vfiprintf_r+0x3c>
 8003e40:	692b      	ldr	r3, [r5, #16]
 8003e42:	b9eb      	cbnz	r3, 8003e80 <_vfiprintf_r+0x78>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff fc7e 	bl	8003748 <__swsetup_r>
 8003e4c:	b1c0      	cbz	r0, 8003e80 <_vfiprintf_r+0x78>
 8003e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e50:	07dc      	lsls	r4, r3, #31
 8003e52:	d50e      	bpl.n	8003e72 <_vfiprintf_r+0x6a>
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	b01d      	add	sp, #116	; 0x74
 8003e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5e:	4b7b      	ldr	r3, [pc, #492]	; (800404c <_vfiprintf_r+0x244>)
 8003e60:	429d      	cmp	r5, r3
 8003e62:	d101      	bne.n	8003e68 <_vfiprintf_r+0x60>
 8003e64:	68b5      	ldr	r5, [r6, #8]
 8003e66:	e7df      	b.n	8003e28 <_vfiprintf_r+0x20>
 8003e68:	4b79      	ldr	r3, [pc, #484]	; (8004050 <_vfiprintf_r+0x248>)
 8003e6a:	429d      	cmp	r5, r3
 8003e6c:	bf08      	it	eq
 8003e6e:	68f5      	ldreq	r5, [r6, #12]
 8003e70:	e7da      	b.n	8003e28 <_vfiprintf_r+0x20>
 8003e72:	89ab      	ldrh	r3, [r5, #12]
 8003e74:	0598      	lsls	r0, r3, #22
 8003e76:	d4ed      	bmi.n	8003e54 <_vfiprintf_r+0x4c>
 8003e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e7a:	f7ff fe8c 	bl	8003b96 <__retarget_lock_release_recursive>
 8003e7e:	e7e9      	b.n	8003e54 <_vfiprintf_r+0x4c>
 8003e80:	2300      	movs	r3, #0
 8003e82:	9309      	str	r3, [sp, #36]	; 0x24
 8003e84:	2320      	movs	r3, #32
 8003e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8e:	2330      	movs	r3, #48	; 0x30
 8003e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004054 <_vfiprintf_r+0x24c>
 8003e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e98:	f04f 0901 	mov.w	r9, #1
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	469a      	mov	sl, r3
 8003ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea4:	b10a      	cbz	r2, 8003eaa <_vfiprintf_r+0xa2>
 8003ea6:	2a25      	cmp	r2, #37	; 0x25
 8003ea8:	d1f9      	bne.n	8003e9e <_vfiprintf_r+0x96>
 8003eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8003eae:	d00b      	beq.n	8003ec8 <_vfiprintf_r+0xc0>
 8003eb0:	465b      	mov	r3, fp
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f7ff ff93 	bl	8003de2 <__sfputs_r>
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	f000 80aa 	beq.w	8004016 <_vfiprintf_r+0x20e>
 8003ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec4:	445a      	add	r2, fp
 8003ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a2 	beq.w	8004016 <_vfiprintf_r+0x20e>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003edc:	f10a 0a01 	add.w	sl, sl, #1
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	9307      	str	r3, [sp, #28]
 8003ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8003eea:	4654      	mov	r4, sl
 8003eec:	2205      	movs	r2, #5
 8003eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef2:	4858      	ldr	r0, [pc, #352]	; (8004054 <_vfiprintf_r+0x24c>)
 8003ef4:	f7fc f97c 	bl	80001f0 <memchr>
 8003ef8:	9a04      	ldr	r2, [sp, #16]
 8003efa:	b9d8      	cbnz	r0, 8003f34 <_vfiprintf_r+0x12c>
 8003efc:	06d1      	lsls	r1, r2, #27
 8003efe:	bf44      	itt	mi
 8003f00:	2320      	movmi	r3, #32
 8003f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f06:	0713      	lsls	r3, r2, #28
 8003f08:	bf44      	itt	mi
 8003f0a:	232b      	movmi	r3, #43	; 0x2b
 8003f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f10:	f89a 3000 	ldrb.w	r3, [sl]
 8003f14:	2b2a      	cmp	r3, #42	; 0x2a
 8003f16:	d015      	beq.n	8003f44 <_vfiprintf_r+0x13c>
 8003f18:	9a07      	ldr	r2, [sp, #28]
 8003f1a:	4654      	mov	r4, sl
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f04f 0c0a 	mov.w	ip, #10
 8003f22:	4621      	mov	r1, r4
 8003f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f28:	3b30      	subs	r3, #48	; 0x30
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	d94e      	bls.n	8003fcc <_vfiprintf_r+0x1c4>
 8003f2e:	b1b0      	cbz	r0, 8003f5e <_vfiprintf_r+0x156>
 8003f30:	9207      	str	r2, [sp, #28]
 8003f32:	e014      	b.n	8003f5e <_vfiprintf_r+0x156>
 8003f34:	eba0 0308 	sub.w	r3, r0, r8
 8003f38:	fa09 f303 	lsl.w	r3, r9, r3
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	46a2      	mov	sl, r4
 8003f42:	e7d2      	b.n	8003eea <_vfiprintf_r+0xe2>
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	1d19      	adds	r1, r3, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	9103      	str	r1, [sp, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bfbb      	ittet	lt
 8003f50:	425b      	neglt	r3, r3
 8003f52:	f042 0202 	orrlt.w	r2, r2, #2
 8003f56:	9307      	strge	r3, [sp, #28]
 8003f58:	9307      	strlt	r3, [sp, #28]
 8003f5a:	bfb8      	it	lt
 8003f5c:	9204      	strlt	r2, [sp, #16]
 8003f5e:	7823      	ldrb	r3, [r4, #0]
 8003f60:	2b2e      	cmp	r3, #46	; 0x2e
 8003f62:	d10c      	bne.n	8003f7e <_vfiprintf_r+0x176>
 8003f64:	7863      	ldrb	r3, [r4, #1]
 8003f66:	2b2a      	cmp	r3, #42	; 0x2a
 8003f68:	d135      	bne.n	8003fd6 <_vfiprintf_r+0x1ce>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	9203      	str	r2, [sp, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bfb8      	it	lt
 8003f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f7a:	3402      	adds	r4, #2
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004064 <_vfiprintf_r+0x25c>
 8003f82:	7821      	ldrb	r1, [r4, #0]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4650      	mov	r0, sl
 8003f88:	f7fc f932 	bl	80001f0 <memchr>
 8003f8c:	b140      	cbz	r0, 8003fa0 <_vfiprintf_r+0x198>
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	eba0 000a 	sub.w	r0, r0, sl
 8003f94:	fa03 f000 	lsl.w	r0, r3, r0
 8003f98:	9b04      	ldr	r3, [sp, #16]
 8003f9a:	4303      	orrs	r3, r0
 8003f9c:	3401      	adds	r4, #1
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa4:	482c      	ldr	r0, [pc, #176]	; (8004058 <_vfiprintf_r+0x250>)
 8003fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003faa:	2206      	movs	r2, #6
 8003fac:	f7fc f920 	bl	80001f0 <memchr>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d03f      	beq.n	8004034 <_vfiprintf_r+0x22c>
 8003fb4:	4b29      	ldr	r3, [pc, #164]	; (800405c <_vfiprintf_r+0x254>)
 8003fb6:	bb1b      	cbnz	r3, 8004000 <_vfiprintf_r+0x1f8>
 8003fb8:	9b03      	ldr	r3, [sp, #12]
 8003fba:	3307      	adds	r3, #7
 8003fbc:	f023 0307 	bic.w	r3, r3, #7
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	9303      	str	r3, [sp, #12]
 8003fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc6:	443b      	add	r3, r7
 8003fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fca:	e767      	b.n	8003e9c <_vfiprintf_r+0x94>
 8003fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	e7a5      	b.n	8003f22 <_vfiprintf_r+0x11a>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	3401      	adds	r4, #1
 8003fda:	9305      	str	r3, [sp, #20]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f04f 0c0a 	mov.w	ip, #10
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe8:	3a30      	subs	r2, #48	; 0x30
 8003fea:	2a09      	cmp	r2, #9
 8003fec:	d903      	bls.n	8003ff6 <_vfiprintf_r+0x1ee>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0c5      	beq.n	8003f7e <_vfiprintf_r+0x176>
 8003ff2:	9105      	str	r1, [sp, #20]
 8003ff4:	e7c3      	b.n	8003f7e <_vfiprintf_r+0x176>
 8003ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e7f0      	b.n	8003fe2 <_vfiprintf_r+0x1da>
 8004000:	ab03      	add	r3, sp, #12
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	462a      	mov	r2, r5
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <_vfiprintf_r+0x258>)
 8004008:	a904      	add	r1, sp, #16
 800400a:	4630      	mov	r0, r6
 800400c:	f3af 8000 	nop.w
 8004010:	4607      	mov	r7, r0
 8004012:	1c78      	adds	r0, r7, #1
 8004014:	d1d6      	bne.n	8003fc4 <_vfiprintf_r+0x1bc>
 8004016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	d405      	bmi.n	8004028 <_vfiprintf_r+0x220>
 800401c:	89ab      	ldrh	r3, [r5, #12]
 800401e:	059a      	lsls	r2, r3, #22
 8004020:	d402      	bmi.n	8004028 <_vfiprintf_r+0x220>
 8004022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004024:	f7ff fdb7 	bl	8003b96 <__retarget_lock_release_recursive>
 8004028:	89ab      	ldrh	r3, [r5, #12]
 800402a:	065b      	lsls	r3, r3, #25
 800402c:	f53f af12 	bmi.w	8003e54 <_vfiprintf_r+0x4c>
 8004030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004032:	e711      	b.n	8003e58 <_vfiprintf_r+0x50>
 8004034:	ab03      	add	r3, sp, #12
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	462a      	mov	r2, r5
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <_vfiprintf_r+0x258>)
 800403c:	a904      	add	r1, sp, #16
 800403e:	4630      	mov	r0, r6
 8004040:	f000 f880 	bl	8004144 <_printf_i>
 8004044:	e7e4      	b.n	8004010 <_vfiprintf_r+0x208>
 8004046:	bf00      	nop
 8004048:	08004644 	.word	0x08004644
 800404c:	08004664 	.word	0x08004664
 8004050:	08004624 	.word	0x08004624
 8004054:	08004684 	.word	0x08004684
 8004058:	0800468e 	.word	0x0800468e
 800405c:	00000000 	.word	0x00000000
 8004060:	08003de3 	.word	0x08003de3
 8004064:	0800468a 	.word	0x0800468a

08004068 <_printf_common>:
 8004068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	4616      	mov	r6, r2
 800406e:	4699      	mov	r9, r3
 8004070:	688a      	ldr	r2, [r1, #8]
 8004072:	690b      	ldr	r3, [r1, #16]
 8004074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004078:	4293      	cmp	r3, r2
 800407a:	bfb8      	it	lt
 800407c:	4613      	movlt	r3, r2
 800407e:	6033      	str	r3, [r6, #0]
 8004080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004084:	4607      	mov	r7, r0
 8004086:	460c      	mov	r4, r1
 8004088:	b10a      	cbz	r2, 800408e <_printf_common+0x26>
 800408a:	3301      	adds	r3, #1
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	0699      	lsls	r1, r3, #26
 8004092:	bf42      	ittt	mi
 8004094:	6833      	ldrmi	r3, [r6, #0]
 8004096:	3302      	addmi	r3, #2
 8004098:	6033      	strmi	r3, [r6, #0]
 800409a:	6825      	ldr	r5, [r4, #0]
 800409c:	f015 0506 	ands.w	r5, r5, #6
 80040a0:	d106      	bne.n	80040b0 <_printf_common+0x48>
 80040a2:	f104 0a19 	add.w	sl, r4, #25
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	6832      	ldr	r2, [r6, #0]
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	dc26      	bgt.n	80040fe <_printf_common+0x96>
 80040b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040b4:	1e13      	subs	r3, r2, #0
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	bf18      	it	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	0692      	lsls	r2, r2, #26
 80040be:	d42b      	bmi.n	8004118 <_printf_common+0xb0>
 80040c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c4:	4649      	mov	r1, r9
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c0      	blx	r8
 80040ca:	3001      	adds	r0, #1
 80040cc:	d01e      	beq.n	800410c <_printf_common+0xa4>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	68e5      	ldr	r5, [r4, #12]
 80040d2:	6832      	ldr	r2, [r6, #0]
 80040d4:	f003 0306 	and.w	r3, r3, #6
 80040d8:	2b04      	cmp	r3, #4
 80040da:	bf08      	it	eq
 80040dc:	1aad      	subeq	r5, r5, r2
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	6922      	ldr	r2, [r4, #16]
 80040e2:	bf0c      	ite	eq
 80040e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e8:	2500      	movne	r5, #0
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bfc4      	itt	gt
 80040ee:	1a9b      	subgt	r3, r3, r2
 80040f0:	18ed      	addgt	r5, r5, r3
 80040f2:	2600      	movs	r6, #0
 80040f4:	341a      	adds	r4, #26
 80040f6:	42b5      	cmp	r5, r6
 80040f8:	d11a      	bne.n	8004130 <_printf_common+0xc8>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e008      	b.n	8004110 <_printf_common+0xa8>
 80040fe:	2301      	movs	r3, #1
 8004100:	4652      	mov	r2, sl
 8004102:	4649      	mov	r1, r9
 8004104:	4638      	mov	r0, r7
 8004106:	47c0      	blx	r8
 8004108:	3001      	adds	r0, #1
 800410a:	d103      	bne.n	8004114 <_printf_common+0xac>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004114:	3501      	adds	r5, #1
 8004116:	e7c6      	b.n	80040a6 <_printf_common+0x3e>
 8004118:	18e1      	adds	r1, r4, r3
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	2030      	movs	r0, #48	; 0x30
 800411e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004122:	4422      	add	r2, r4
 8004124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412c:	3302      	adds	r3, #2
 800412e:	e7c7      	b.n	80040c0 <_printf_common+0x58>
 8004130:	2301      	movs	r3, #1
 8004132:	4622      	mov	r2, r4
 8004134:	4649      	mov	r1, r9
 8004136:	4638      	mov	r0, r7
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d0e6      	beq.n	800410c <_printf_common+0xa4>
 800413e:	3601      	adds	r6, #1
 8004140:	e7d9      	b.n	80040f6 <_printf_common+0x8e>
	...

08004144 <_printf_i>:
 8004144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	460c      	mov	r4, r1
 800414a:	4691      	mov	r9, r2
 800414c:	7e27      	ldrb	r7, [r4, #24]
 800414e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004150:	2f78      	cmp	r7, #120	; 0x78
 8004152:	4680      	mov	r8, r0
 8004154:	469a      	mov	sl, r3
 8004156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415a:	d807      	bhi.n	800416c <_printf_i+0x28>
 800415c:	2f62      	cmp	r7, #98	; 0x62
 800415e:	d80a      	bhi.n	8004176 <_printf_i+0x32>
 8004160:	2f00      	cmp	r7, #0
 8004162:	f000 80d8 	beq.w	8004316 <_printf_i+0x1d2>
 8004166:	2f58      	cmp	r7, #88	; 0x58
 8004168:	f000 80a3 	beq.w	80042b2 <_printf_i+0x16e>
 800416c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004174:	e03a      	b.n	80041ec <_printf_i+0xa8>
 8004176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800417a:	2b15      	cmp	r3, #21
 800417c:	d8f6      	bhi.n	800416c <_printf_i+0x28>
 800417e:	a001      	add	r0, pc, #4	; (adr r0, 8004184 <_printf_i+0x40>)
 8004180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041f1 	.word	0x080041f1
 800418c:	0800416d 	.word	0x0800416d
 8004190:	0800416d 	.word	0x0800416d
 8004194:	0800416d 	.word	0x0800416d
 8004198:	0800416d 	.word	0x0800416d
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	0800416d 	.word	0x0800416d
 80041a4:	0800416d 	.word	0x0800416d
 80041a8:	0800416d 	.word	0x0800416d
 80041ac:	0800416d 	.word	0x0800416d
 80041b0:	080042fd 	.word	0x080042fd
 80041b4:	08004221 	.word	0x08004221
 80041b8:	080042df 	.word	0x080042df
 80041bc:	0800416d 	.word	0x0800416d
 80041c0:	0800416d 	.word	0x0800416d
 80041c4:	0800431f 	.word	0x0800431f
 80041c8:	0800416d 	.word	0x0800416d
 80041cc:	08004221 	.word	0x08004221
 80041d0:	0800416d 	.word	0x0800416d
 80041d4:	0800416d 	.word	0x0800416d
 80041d8:	080042e7 	.word	0x080042e7
 80041dc:	680b      	ldr	r3, [r1, #0]
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	600a      	str	r2, [r1, #0]
 80041e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0a3      	b.n	8004338 <_printf_i+0x1f4>
 80041f0:	6825      	ldr	r5, [r4, #0]
 80041f2:	6808      	ldr	r0, [r1, #0]
 80041f4:	062e      	lsls	r6, r5, #24
 80041f6:	f100 0304 	add.w	r3, r0, #4
 80041fa:	d50a      	bpl.n	8004212 <_printf_i+0xce>
 80041fc:	6805      	ldr	r5, [r0, #0]
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	2d00      	cmp	r5, #0
 8004202:	da03      	bge.n	800420c <_printf_i+0xc8>
 8004204:	232d      	movs	r3, #45	; 0x2d
 8004206:	426d      	negs	r5, r5
 8004208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800420c:	485e      	ldr	r0, [pc, #376]	; (8004388 <_printf_i+0x244>)
 800420e:	230a      	movs	r3, #10
 8004210:	e019      	b.n	8004246 <_printf_i+0x102>
 8004212:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004216:	6805      	ldr	r5, [r0, #0]
 8004218:	600b      	str	r3, [r1, #0]
 800421a:	bf18      	it	ne
 800421c:	b22d      	sxthne	r5, r5
 800421e:	e7ef      	b.n	8004200 <_printf_i+0xbc>
 8004220:	680b      	ldr	r3, [r1, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	1d18      	adds	r0, r3, #4
 8004226:	6008      	str	r0, [r1, #0]
 8004228:	0628      	lsls	r0, r5, #24
 800422a:	d501      	bpl.n	8004230 <_printf_i+0xec>
 800422c:	681d      	ldr	r5, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0xf2>
 8004230:	0669      	lsls	r1, r5, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0xe8>
 8004234:	881d      	ldrh	r5, [r3, #0]
 8004236:	4854      	ldr	r0, [pc, #336]	; (8004388 <_printf_i+0x244>)
 8004238:	2f6f      	cmp	r7, #111	; 0x6f
 800423a:	bf0c      	ite	eq
 800423c:	2308      	moveq	r3, #8
 800423e:	230a      	movne	r3, #10
 8004240:	2100      	movs	r1, #0
 8004242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004246:	6866      	ldr	r6, [r4, #4]
 8004248:	60a6      	str	r6, [r4, #8]
 800424a:	2e00      	cmp	r6, #0
 800424c:	bfa2      	ittt	ge
 800424e:	6821      	ldrge	r1, [r4, #0]
 8004250:	f021 0104 	bicge.w	r1, r1, #4
 8004254:	6021      	strge	r1, [r4, #0]
 8004256:	b90d      	cbnz	r5, 800425c <_printf_i+0x118>
 8004258:	2e00      	cmp	r6, #0
 800425a:	d04d      	beq.n	80042f8 <_printf_i+0x1b4>
 800425c:	4616      	mov	r6, r2
 800425e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004262:	fb03 5711 	mls	r7, r3, r1, r5
 8004266:	5dc7      	ldrb	r7, [r0, r7]
 8004268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800426c:	462f      	mov	r7, r5
 800426e:	42bb      	cmp	r3, r7
 8004270:	460d      	mov	r5, r1
 8004272:	d9f4      	bls.n	800425e <_printf_i+0x11a>
 8004274:	2b08      	cmp	r3, #8
 8004276:	d10b      	bne.n	8004290 <_printf_i+0x14c>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	07df      	lsls	r7, r3, #31
 800427c:	d508      	bpl.n	8004290 <_printf_i+0x14c>
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	6861      	ldr	r1, [r4, #4]
 8004282:	4299      	cmp	r1, r3
 8004284:	bfde      	ittt	le
 8004286:	2330      	movle	r3, #48	; 0x30
 8004288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800428c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004290:	1b92      	subs	r2, r2, r6
 8004292:	6122      	str	r2, [r4, #16]
 8004294:	f8cd a000 	str.w	sl, [sp]
 8004298:	464b      	mov	r3, r9
 800429a:	aa03      	add	r2, sp, #12
 800429c:	4621      	mov	r1, r4
 800429e:	4640      	mov	r0, r8
 80042a0:	f7ff fee2 	bl	8004068 <_printf_common>
 80042a4:	3001      	adds	r0, #1
 80042a6:	d14c      	bne.n	8004342 <_printf_i+0x1fe>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b004      	add	sp, #16
 80042ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b2:	4835      	ldr	r0, [pc, #212]	; (8004388 <_printf_i+0x244>)
 80042b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	680e      	ldr	r6, [r1, #0]
 80042bc:	061f      	lsls	r7, r3, #24
 80042be:	f856 5b04 	ldr.w	r5, [r6], #4
 80042c2:	600e      	str	r6, [r1, #0]
 80042c4:	d514      	bpl.n	80042f0 <_printf_i+0x1ac>
 80042c6:	07d9      	lsls	r1, r3, #31
 80042c8:	bf44      	itt	mi
 80042ca:	f043 0320 	orrmi.w	r3, r3, #32
 80042ce:	6023      	strmi	r3, [r4, #0]
 80042d0:	b91d      	cbnz	r5, 80042da <_printf_i+0x196>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f023 0320 	bic.w	r3, r3, #32
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	2310      	movs	r3, #16
 80042dc:	e7b0      	b.n	8004240 <_printf_i+0xfc>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f043 0320 	orr.w	r3, r3, #32
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2378      	movs	r3, #120	; 0x78
 80042e8:	4828      	ldr	r0, [pc, #160]	; (800438c <_printf_i+0x248>)
 80042ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ee:	e7e3      	b.n	80042b8 <_printf_i+0x174>
 80042f0:	065e      	lsls	r6, r3, #25
 80042f2:	bf48      	it	mi
 80042f4:	b2ad      	uxthmi	r5, r5
 80042f6:	e7e6      	b.n	80042c6 <_printf_i+0x182>
 80042f8:	4616      	mov	r6, r2
 80042fa:	e7bb      	b.n	8004274 <_printf_i+0x130>
 80042fc:	680b      	ldr	r3, [r1, #0]
 80042fe:	6826      	ldr	r6, [r4, #0]
 8004300:	6960      	ldr	r0, [r4, #20]
 8004302:	1d1d      	adds	r5, r3, #4
 8004304:	600d      	str	r5, [r1, #0]
 8004306:	0635      	lsls	r5, r6, #24
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	d501      	bpl.n	8004310 <_printf_i+0x1cc>
 800430c:	6018      	str	r0, [r3, #0]
 800430e:	e002      	b.n	8004316 <_printf_i+0x1d2>
 8004310:	0671      	lsls	r1, r6, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0x1c8>
 8004314:	8018      	strh	r0, [r3, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	4616      	mov	r6, r2
 800431c:	e7ba      	b.n	8004294 <_printf_i+0x150>
 800431e:	680b      	ldr	r3, [r1, #0]
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	600a      	str	r2, [r1, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	2100      	movs	r1, #0
 800432a:	4630      	mov	r0, r6
 800432c:	f7fb ff60 	bl	80001f0 <memchr>
 8004330:	b108      	cbz	r0, 8004336 <_printf_i+0x1f2>
 8004332:	1b80      	subs	r0, r0, r6
 8004334:	6060      	str	r0, [r4, #4]
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	6123      	str	r3, [r4, #16]
 800433a:	2300      	movs	r3, #0
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004340:	e7a8      	b.n	8004294 <_printf_i+0x150>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	4632      	mov	r2, r6
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	47d0      	blx	sl
 800434c:	3001      	adds	r0, #1
 800434e:	d0ab      	beq.n	80042a8 <_printf_i+0x164>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	079b      	lsls	r3, r3, #30
 8004354:	d413      	bmi.n	800437e <_printf_i+0x23a>
 8004356:	68e0      	ldr	r0, [r4, #12]
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	4298      	cmp	r0, r3
 800435c:	bfb8      	it	lt
 800435e:	4618      	movlt	r0, r3
 8004360:	e7a4      	b.n	80042ac <_printf_i+0x168>
 8004362:	2301      	movs	r3, #1
 8004364:	4632      	mov	r2, r6
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	47d0      	blx	sl
 800436c:	3001      	adds	r0, #1
 800436e:	d09b      	beq.n	80042a8 <_printf_i+0x164>
 8004370:	3501      	adds	r5, #1
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	9903      	ldr	r1, [sp, #12]
 8004376:	1a5b      	subs	r3, r3, r1
 8004378:	42ab      	cmp	r3, r5
 800437a:	dcf2      	bgt.n	8004362 <_printf_i+0x21e>
 800437c:	e7eb      	b.n	8004356 <_printf_i+0x212>
 800437e:	2500      	movs	r5, #0
 8004380:	f104 0619 	add.w	r6, r4, #25
 8004384:	e7f5      	b.n	8004372 <_printf_i+0x22e>
 8004386:	bf00      	nop
 8004388:	08004695 	.word	0x08004695
 800438c:	080046a6 	.word	0x080046a6

08004390 <_sbrk_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4d06      	ldr	r5, [pc, #24]	; (80043ac <_sbrk_r+0x1c>)
 8004394:	2300      	movs	r3, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	f7fc ff16 	bl	80011cc <_sbrk>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_sbrk_r+0x1a>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_sbrk_r+0x1a>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000544 	.word	0x20000544

080043b0 <__sread>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	460c      	mov	r4, r1
 80043b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b8:	f000 f8a0 	bl	80044fc <_read_r>
 80043bc:	2800      	cmp	r0, #0
 80043be:	bfab      	itete	ge
 80043c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043c2:	89a3      	ldrhlt	r3, [r4, #12]
 80043c4:	181b      	addge	r3, r3, r0
 80043c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043ca:	bfac      	ite	ge
 80043cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ce:	81a3      	strhlt	r3, [r4, #12]
 80043d0:	bd10      	pop	{r4, pc}

080043d2 <__swrite>:
 80043d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d6:	461f      	mov	r7, r3
 80043d8:	898b      	ldrh	r3, [r1, #12]
 80043da:	05db      	lsls	r3, r3, #23
 80043dc:	4605      	mov	r5, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	4616      	mov	r6, r2
 80043e2:	d505      	bpl.n	80043f0 <__swrite+0x1e>
 80043e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e8:	2302      	movs	r3, #2
 80043ea:	2200      	movs	r2, #0
 80043ec:	f000 f868 	bl	80044c0 <_lseek_r>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	4632      	mov	r2, r6
 80043fe:	463b      	mov	r3, r7
 8004400:	4628      	mov	r0, r5
 8004402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	f000 b817 	b.w	8004438 <_write_r>

0800440a <__sseek>:
 800440a:	b510      	push	{r4, lr}
 800440c:	460c      	mov	r4, r1
 800440e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004412:	f000 f855 	bl	80044c0 <_lseek_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	bf15      	itete	ne
 800441c:	6560      	strne	r0, [r4, #84]	; 0x54
 800441e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004426:	81a3      	strheq	r3, [r4, #12]
 8004428:	bf18      	it	ne
 800442a:	81a3      	strhne	r3, [r4, #12]
 800442c:	bd10      	pop	{r4, pc}

0800442e <__sclose>:
 800442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004432:	f000 b813 	b.w	800445c <_close_r>
	...

08004438 <_write_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4d07      	ldr	r5, [pc, #28]	; (8004458 <_write_r+0x20>)
 800443c:	4604      	mov	r4, r0
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	2200      	movs	r2, #0
 8004444:	602a      	str	r2, [r5, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f7fc f89e 	bl	8000588 <_write>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_write_r+0x1e>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_write_r+0x1e>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	20000544 	.word	0x20000544

0800445c <_close_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	; (8004478 <_close_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fe7b 	bl	8001162 <_close>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_close_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_close_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000544 	.word	0x20000544

0800447c <_fstat_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4d07      	ldr	r5, [pc, #28]	; (800449c <_fstat_r+0x20>)
 8004480:	2300      	movs	r3, #0
 8004482:	4604      	mov	r4, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f7fc fe76 	bl	800117a <_fstat>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d102      	bne.n	8004498 <_fstat_r+0x1c>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	b103      	cbz	r3, 8004498 <_fstat_r+0x1c>
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	20000544 	.word	0x20000544

080044a0 <_isatty_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_isatty_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fe75 	bl	800119a <_isatty>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_isatty_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_isatty_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000544 	.word	0x20000544

080044c0 <_lseek_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d07      	ldr	r5, [pc, #28]	; (80044e0 <_lseek_r+0x20>)
 80044c4:	4604      	mov	r4, r0
 80044c6:	4608      	mov	r0, r1
 80044c8:	4611      	mov	r1, r2
 80044ca:	2200      	movs	r2, #0
 80044cc:	602a      	str	r2, [r5, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f7fc fe6e 	bl	80011b0 <_lseek>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_lseek_r+0x1e>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_lseek_r+0x1e>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20000544 	.word	0x20000544

080044e4 <__malloc_lock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__malloc_lock+0x8>)
 80044e6:	f7ff bb55 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 80044ea:	bf00      	nop
 80044ec:	2000053c 	.word	0x2000053c

080044f0 <__malloc_unlock>:
 80044f0:	4801      	ldr	r0, [pc, #4]	; (80044f8 <__malloc_unlock+0x8>)
 80044f2:	f7ff bb50 	b.w	8003b96 <__retarget_lock_release_recursive>
 80044f6:	bf00      	nop
 80044f8:	2000053c 	.word	0x2000053c

080044fc <_read_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d07      	ldr	r5, [pc, #28]	; (800451c <_read_r+0x20>)
 8004500:	4604      	mov	r4, r0
 8004502:	4608      	mov	r0, r1
 8004504:	4611      	mov	r1, r2
 8004506:	2200      	movs	r2, #0
 8004508:	602a      	str	r2, [r5, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	f7fc fe0c 	bl	8001128 <_read>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_read_r+0x1e>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	b103      	cbz	r3, 800451a <_read_r+0x1e>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	20000544 	.word	0x20000544

08004520 <_init>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr

0800452c <_fini>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	bf00      	nop
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr
