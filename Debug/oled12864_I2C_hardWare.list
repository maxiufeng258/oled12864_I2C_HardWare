
oled12864_I2C_hardWare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002050  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b924  0800b924  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b92c  0800b92c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000538  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c8  200005c8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dd3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002485  00000000  00000000  00031e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002487a  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001012a  00000000  00000000  0005a37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a58  00000000  00000000  0006a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141efc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d2c  00000000  00000000  00141f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080098bc 	.word	0x080098bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080098bc 	.word	0x080098bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	b29a      	uxth	r2, r3
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <_write+0x24>)
 8000956:	f006 ff20 	bl	800779a <HAL_UART_Transmit>
	return len;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000570 	.word	0x20000570

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f003 f943 	bl	8003bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f8f5 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f000 f9ed 	bl	8000d54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800097a:	f000 f9a1 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800097e:	f000 f9c9 	bl	8000d14 <MX_DMA_Init>
  MX_I2C2_Init();
 8000982:	f000 f95d 	bl	8000c40 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t res = oled_i2c_Init();
 8000986:	f000 fd94 	bl	80014b2 <oled_i2c_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	73fb      	strb	r3, [r7, #15]

  if (res != 0)
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d004      	beq.n	800099e <main+0x36>
	  HAL_GPIO_TogglePin(LD1_Red_GPIO_Port, LD1_Red_Pin);
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	4867      	ldr	r0, [pc, #412]	; (8000b38 <main+0x1d0>)
 800099a:	f004 f846 	bl	8004a2a <HAL_GPIO_TogglePin>
  printf("%d\r\n", res);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4866      	ldr	r0, [pc, #408]	; (8000b3c <main+0x1d4>)
 80009a4:	f007 fabc 	bl	8007f20 <iprintf>

//  HAL_Delay(100);
//  oled_Draw_Character(12, 12, '7', oled_Font_ASCII_16_32_digital7V4);
//  oled_Update_Screen();

  HAL_Delay(500);
 80009a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ac:	f003 f996 	bl	8003cdc <HAL_Delay>
  oled_Draw_Chinese_String(4, 0, oled_chinese_str_16_16_songTi, 2 , 10);
 80009b0:	4b63      	ldr	r3, [pc, #396]	; (8000b40 <main+0x1d8>)
 80009b2:	220a      	movs	r2, #10
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	2202      	movs	r2, #2
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	cb0c      	ldmia	r3, {r2, r3}
 80009bc:	2100      	movs	r1, #0
 80009be:	2004      	movs	r0, #4
 80009c0:	f002 fd32 	bl	8003428 <oled_Draw_Chinese_String>
  oled_Update_Screen();
 80009c4:	f000 fe1e 	bl	8001604 <oled_Update_Screen>

//  HAL_Delay(100);
//  oled_Draw_Chinese_String(0, 0, oled_chinese_str_24_24_songTi, 0 , 10);
//  oled_Update_Screen();

  HAL_Delay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f003 f986 	bl	8003cdc <HAL_Delay>
  oled_Draw_Chinese_String(0, 32, oled_chinese_str_24_24_songTi, 1 , 4);
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <main+0x1dc>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	cb0c      	ldmia	r3, {r2, r3}
 80009dc:	2120      	movs	r1, #32
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 fd22 	bl	8003428 <oled_Draw_Chinese_String>
  oled_Update_Screen();
 80009e4:	f000 fe0e 	bl	8001604 <oled_Update_Screen>

//  HAL_Delay(100);
  HAL_Delay(1000);
 80009e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ec:	f003 f976 	bl	8003cdc <HAL_Delay>
  oled_Fill_Screen_Color(oled_color_Black);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fe25 	bl	8001640 <oled_Fill_Screen_Color>
  unsigned char str1[] = "0.96' oled";
 80009f6:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <main+0x1e0>)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009fc:	c303      	stmia	r3!, {r0, r1}
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	3302      	adds	r3, #2
 8000a02:	0c12      	lsrs	r2, r2, #16
 8000a04:	701a      	strb	r2, [r3, #0]
  oled_Draw_String(8, 16, str1, sizeof(str1), oled_Font_ASCII_12_24_courierNew);
 8000a06:	1d3a      	adds	r2, r7, #4
 8000a08:	4950      	ldr	r1, [pc, #320]	; (8000b4c <main+0x1e4>)
 8000a0a:	466b      	mov	r3, sp
 8000a0c:	c903      	ldmia	r1, {r0, r1}
 8000a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a12:	230b      	movs	r3, #11
 8000a14:	2110      	movs	r1, #16
 8000a16:	2008      	movs	r0, #8
 8000a18:	f002 fca4 	bl	8003364 <oled_Draw_String>
  oled_Update_Screen();
 8000a1c:	f000 fdf2 	bl	8001604 <oled_Update_Screen>

//  HAL_Delay(100);
  HAL_Delay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f003 f95a 	bl	8003cdc <HAL_Delay>
  oled_Fill_Screen_Color(oled_color_Black);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fe09 	bl	8001640 <oled_Fill_Screen_Color>
  oled_Draw_Round_Rectangle(3, 2, 120, 60, 12, line_width_slim);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	230c      	movs	r3, #12
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	233c      	movs	r3, #60	; 0x3c
 8000a38:	2278      	movs	r2, #120	; 0x78
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f001 fe8b 	bl	8002758 <oled_Draw_Round_Rectangle>
  oled_Update_Screen();
 8000a42:	f000 fddf 	bl	8001604 <oled_Update_Screen>

  HAL_Delay(1000);
 8000a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4a:	f003 f947 	bl	8003cdc <HAL_Delay>
  oled_Draw_rectangle(12, 12, 22, 22, line_width_medium, graphic_fill_hollow);
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2302      	movs	r3, #2
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2316      	movs	r3, #22
 8000a58:	2216      	movs	r2, #22
 8000a5a:	210c      	movs	r1, #12
 8000a5c:	200c      	movs	r0, #12
 8000a5e:	f001 f9de 	bl	8001e1e <oled_Draw_rectangle>
  oled_Draw_rectangle(12, 25, 22, 54, line_width_slim, graphic_fill_solid);
 8000a62:	2300      	movs	r3, #0
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2336      	movs	r3, #54	; 0x36
 8000a6c:	2216      	movs	r2, #22
 8000a6e:	2119      	movs	r1, #25
 8000a70:	200c      	movs	r0, #12
 8000a72:	f001 f9d4 	bl	8001e1e <oled_Draw_rectangle>
  oled_Update_Screen();
 8000a76:	f000 fdc5 	bl	8001604 <oled_Update_Screen>

  HAL_Delay(1000);
 8000a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7e:	f003 f92d 	bl	8003cdc <HAL_Delay>
  oled_Draw_Ellipse(43, 32, 16, 12, line_width_bold, graphic_fill_hollow);
 8000a82:	2301      	movs	r3, #1
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2303      	movs	r3, #3
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	2120      	movs	r1, #32
 8000a90:	202b      	movs	r0, #43	; 0x2b
 8000a92:	f002 f813 	bl	8002abc <oled_Draw_Ellipse>
  oled_Update_Screen();
 8000a96:	f000 fdb5 	bl	8001604 <oled_Update_Screen>

  HAL_Delay(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f003 f91d 	bl	8003cdc <HAL_Delay>
  oled_Draw_Line(125, 10, 125, 56, line_width_medium);
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2338      	movs	r3, #56	; 0x38
 8000aa8:	227d      	movs	r2, #125	; 0x7d
 8000aaa:	210a      	movs	r1, #10
 8000aac:	207d      	movs	r0, #125	; 0x7d
 8000aae:	f000 fea1 	bl	80017f4 <oled_Draw_Line>
  oled_Update_Screen();
 8000ab2:	f000 fda7 	bl	8001604 <oled_Update_Screen>

  HAL_Delay(1000);
 8000ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aba:	f003 f90f 	bl	8003cdc <HAL_Delay>
  oled_Draw_Circular_Arc(60, 32, 20, -90, 45, line_width_bold);
 8000abe:	2303      	movs	r3, #3
 8000ac0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000b50 <main+0x1e8>
 8000ac4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000b54 <main+0x1ec>
 8000ac8:	2214      	movs	r2, #20
 8000aca:	2120      	movs	r1, #32
 8000acc:	203c      	movs	r0, #60	; 0x3c
 8000ace:	f001 fbdd 	bl	800228c <oled_Draw_Circular_Arc>
  oled_Update_Screen();
 8000ad2:	f000 fd97 	bl	8001604 <oled_Update_Screen>


  HAL_Delay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ada:	f003 f8ff 	bl	8003cdc <HAL_Delay>
  oled_Draw_Round_Rectangle(85, 10, 110, 54, 6, line_width_bold);
 8000ade:	2303      	movs	r3, #3
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2336      	movs	r3, #54	; 0x36
 8000ae8:	226e      	movs	r2, #110	; 0x6e
 8000aea:	210a      	movs	r1, #10
 8000aec:	2055      	movs	r0, #85	; 0x55
 8000aee:	f001 fe33 	bl	8002758 <oled_Draw_Round_Rectangle>
  oled_Update_Screen();
 8000af2:	f000 fd87 	bl	8001604 <oled_Update_Screen>
//	  oled_Draw_Character(i*oled_Font_ASCII_16_32_courierNew.font_Width, 32, ch, oled_Font_ASCII_16_32_courierNew);
//	  oled_Update_Screen();
//  }


  HAL_Delay(2000);
 8000af6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000afa:	f003 f8ef 	bl	8003cdc <HAL_Delay>
  oled_Draw_BitMap(oled_bitmap_128_64, 0);
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <main+0x1f0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b06:	f002 fdb1 	bl	800366c <oled_Draw_BitMap>
  oled_Update_Screen();
 8000b0a:	f000 fd7b 	bl	8001604 <oled_Update_Screen>


  printf("init succeed...\r\n");
 8000b0e:	4813      	ldr	r0, [pc, #76]	; (8000b5c <main+0x1f4>)
 8000b10:	f007 fa8c 	bl	800802c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <main+0x1d0>)
 8000b1a:	f003 ff86 	bl	8004a2a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f003 f8dc 	bl	8003cdc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <main+0x1d0>)
 8000b2a:	f003 ff7e 	bl	8004a2a <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8000b2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b32:	f003 f8d3 	bl	8003cdc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000b36:	e7ed      	b.n	8000b14 <main+0x1ac>
 8000b38:	40021c00 	.word	0x40021c00
 8000b3c:	080098d4 	.word	0x080098d4
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000010 	.word	0x20000010
 8000b48:	080098f0 	.word	0x080098f0
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	42340000 	.word	0x42340000
 8000b54:	c2b40000 	.word	0xc2b40000
 8000b58:	20000018 	.word	0x20000018
 8000b5c:	080098dc 	.word	0x080098dc

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f007 f924 	bl	8007dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <SystemClock_Config+0xdc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <SystemClock_Config+0xdc>)
 8000baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <SystemClock_Config+0xdc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bd4:	23d8      	movs	r3, #216	; 0xd8
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 f943 	bl	8006e70 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf0:	f000 f924 	bl	8000e3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bf4:	f006 f8ec 	bl	8006dd0 <HAL_PWREx_EnableOverDrive>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bfe:	f000 f91d 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2105      	movs	r1, #5
 8000c20:	4618      	mov	r0, r3
 8000c22:	f006 fb9d 	bl	8007360 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c2c:	f000 f906 	bl	8000e3c <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3750      	adds	r7, #80	; 0x50
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_I2C2_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <MX_I2C2_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c7e:	f003 feef 	bl	8004a60 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c88:	f000 f8d8 	bl	8000e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c90:	f006 f822 	bl	8006cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c9a:	f000 f8cf 	bl	8000e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000ca2:	f006 f855 	bl	8006d50 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f8c6 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200004bc 	.word	0x200004bc
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	00061a80 	.word	0x00061a80

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f006 fd02 	bl	8007700 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f000 f89b 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000570 	.word	0x20000570
 8000d10:	40011000 	.word	0x40011000

08000d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_DMA_Init+0x3c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <MX_DMA_Init+0x3c>)
 8000d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_DMA_Init+0x3c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	202f      	movs	r0, #47	; 0x2f
 8000d3c:	f003 f8cd 	bl	8003eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d40:	202f      	movs	r0, #47	; 0x2f
 8000d42:	f003 f8e6 	bl	8003f12 <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_GPIO_Init+0xdc>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000de0:	4814      	ldr	r0, [pc, #80]	; (8000e34 <MX_GPIO_Init+0xe0>)
 8000de2:	f003 fe09 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 8000de6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_GPIO_Init+0xe0>)
 8000e00:	f003 fc4e 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0a:	2312      	movs	r3, #18
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e16:	2304      	movs	r3, #4
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xe4>)
 8000e22:	f003 fc3d 	bl	80046a0 <HAL_GPIO_Init>

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40021c00 	.word	0x40021c00
 8000e38:	40020400 	.word	0x40020400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <oled_Write_CMD>:
 * @brief write indicate command to oled Register
 * @param cmd: [in] input command
 * @retval status 0:write cmd ok    1:write cmd error
 */
static uint8_t oled_Write_CMD(uint8_t cmd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd);
 8000e52:	2301      	movs	r3, #1
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	2178      	movs	r1, #120	; 0x78
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <oled_Write_CMD+0x74>)
 8000e62:	f003 ff41 	bl	8004ce8 <HAL_I2C_Mem_Write_DMA>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d120      	bne.n	8000eb2 <oled_Write_CMD+0x6a>
	{
		uint32_t startTime = HAL_GetTick();
 8000e70:	f002 ff28 	bl	8003cc4 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 8000e76:	bf00      	nop
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <oled_Write_CMD+0x78>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d008      	beq.n	8000e92 <oled_Write_CMD+0x4a>
 8000e80:	f002 ff20 	bl	8003cc4 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d9f2      	bls.n	8000e78 <oled_Write_CMD+0x30>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 8000e92:	f002 ff17 	bl	8003cc4 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d901      	bls.n	8000ea8 <oled_Write_CMD+0x60>
			return 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e005      	b.n	8000eb4 <oled_Write_CMD+0x6c>
		oled_i2c_dma_mem_write_flag = 0;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <oled_Write_CMD+0x78>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_cmd, I2C_MEMADD_SIZE_8BIT, &cmd, sizeof cmd, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <oled_Write_CMD+0x6c>
		return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200004bc 	.word	0x200004bc
 8000ec0:	200000ae 	.word	0x200000ae

08000ec4 <oled_Write_Data>:
 * @param data[]: [in] input data array
 * @param len:	[in] input data array length
 * @retval status 0:write data ok    1:write data error
 */
static uint8_t oled_Write_Data(uint8_t data[], uint16_t len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef hal_sta;
#if	oled_i2c_dma
	hal_sta = HAL_I2C_Mem_Write_DMA(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len);
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	2240      	movs	r2, #64	; 0x40
 8000edc:	2178      	movs	r1, #120	; 0x78
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <oled_Write_Data+0x78>)
 8000ee0:	f003 ff02 	bl	8004ce8 <HAL_I2C_Mem_Write_DMA>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]

	if (hal_sta == HAL_OK)
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d120      	bne.n	8000f30 <oled_Write_Data+0x6c>
	{
		uint32_t startTime = HAL_GetTick();
 8000eee:	f002 fee9 	bl	8003cc4 <HAL_GetTick>
 8000ef2:	60b8      	str	r0, [r7, #8]
		while (oled_i2c_dma_mem_write_flag != 1  &&  (HAL_GetTick() - startTime) < oled_timeOut);
 8000ef4:	bf00      	nop
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <oled_Write_Data+0x7c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d008      	beq.n	8000f10 <oled_Write_Data+0x4c>
 8000efe:	f002 fee1 	bl	8003cc4 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d9f2      	bls.n	8000ef6 <oled_Write_Data+0x32>
		if ((HAL_GetTick() - startTime) >= oled_timeOut)
 8000f10:	f002 fed8 	bl	8003cc4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d901      	bls.n	8000f26 <oled_Write_Data+0x62>
			return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e005      	b.n	8000f32 <oled_Write_Data+0x6e>
		oled_i2c_dma_mem_write_flag = 0;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <oled_Write_Data+0x7c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	hal_sta = HAL_I2C_Mem_Write(&oled_i2c, oled_i2c_addr, ctrl_data, I2C_MEMADD_SIZE_8BIT, data, len, oled_timeOut);
	if (hal_sta != HAL_OK)
		return 1;
#endif

	return 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e000      	b.n	8000f32 <oled_Write_Data+0x6e>
		return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200004bc 	.word	0x200004bc
 8000f40:	200000ae 	.word	0x200000ae

08000f44 <oled_Fill_GDDRAM_Buffer>:

/**
 * @brief use indicate color(on/off) to filling oled all pixels
 */
static void oled_Fill_GDDRAM_Buffer(oled_color_t color)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e00d      	b.n	8000f70 <oled_Fill_GDDRAM_Buffer+0x2c>
	{
		oled_display_buff[i] = (color == oled_color_Black)? (0x00): (0xFF);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <oled_Fill_GDDRAM_Buffer+0x1a>
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	e000      	b.n	8000f60 <oled_Fill_GDDRAM_Buffer+0x1c>
 8000f5e:	21ff      	movs	r1, #255	; 0xff
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <oled_Fill_GDDRAM_Buffer+0x48>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	460a      	mov	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < sizeof(oled_display_buff); i++)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d3ed      	bcc.n	8000f54 <oled_Fill_GDDRAM_Buffer+0x10>
	}
	/* set buffer updated flag */
	oled.bufferUpdateFlag = 1;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <oled_Fill_GDDRAM_Buffer+0x4c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000b0 	.word	0x200000b0
 8000f90:	200000ac 	.word	0x200000ac

08000f94 <oled_Set_Contrast>:
 * 		[oled_cmd_display_contrast_1(0x81)  +  ContrastVal(default value = 0x7F)]
 * @param ContrastVal: [in] contrast value between 0 t0 255
 * @retval status 0:write command ok    1:write command error
 */
uint8_t oled_Set_Contrast(uint8_t ContrastVal)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	// cmd Set Contrast 0x81
	res = oled_Write_CMD(oled_cmd_display_contrast_1);
 8000fa2:	2081      	movs	r0, #129	; 0x81
 8000fa4:	f7ff ff50 	bl	8000e48 <oled_Write_CMD>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <oled_Set_Contrast+0x22>
		return 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00c      	b.n	8000fd0 <oled_Set_Contrast+0x3c>
	// The segment output current increases as the contrast step value increases
	oled_Write_CMD(ContrastVal) ? (res = 1) : (res = 0);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff45 	bl	8000e48 <oled_Write_CMD>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <oled_Set_Contrast+0x36>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e001      	b.n	8000fce <oled_Set_Contrast+0x3a>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
	return res;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <oled_Set_Display_Follow_RAM_Or_No>:
 * @NOTE If A5h command is issued, then by using A4h command, the display will resume to the GDDRAM contents.
 * @param RAM_Output: [in]	follow	ignore
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Follow_RAM_Or_No(RAM_Output_t RAM_Output)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

	switch (RAM_Output) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <oled_Set_Display_Follow_RAM_Or_No+0x1a>
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d006      	beq.n	8000ffe <oled_Set_Display_Follow_RAM_Or_No+0x26>
 8000ff0:	e00b      	b.n	800100a <oled_Set_Display_Follow_RAM_Or_No+0x32>
		case RAM_output_follow:
			//	cmd 0xA4  A4h command enable display outputs according to the GDDRAM contents.
			//			  A4h command resumes the display from entire display “ON” stage.
			res = oled_Write_CMD(oled_cmd_display_following);
 8000ff2:	20a4      	movs	r0, #164	; 0xa4
 8000ff4:	f7ff ff28 	bl	8000e48 <oled_Write_CMD>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
			break;
 8000ffc:	e008      	b.n	8001010 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		case RAM_output_ignore:
			// cmd 0xA5  A5h command forces the entire display to be “ON”, regardless of the contents of the display data RAM.
			res = oled_Write_CMD(oled_cmd_display_ignore);
 8000ffe:	20a5      	movs	r0, #165	; 0xa5
 8001000:	f7ff ff22 	bl	8000e48 <oled_Write_CMD>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
			break;
 8001008:	e002      	b.n	8001010 <oled_Set_Display_Follow_RAM_Or_No+0x38>
		default:
			res = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
			break;
 800100e:	bf00      	nop
	}
	return res;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <oled_Set_Display_Normal_Inverse>:
 * 			while in inverse display a RAM data of 0 indicates an “ON” pixel
 * @param display_Way_t: [in]  display_normal	display_invers
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_Normal_Inverse(display_Way_t display_Way)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
	switch (display_Way) {
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <oled_Set_Display_Normal_Inverse+0x1a>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d006      	beq.n	8001040 <oled_Set_Display_Normal_Inverse+0x26>
 8001032:	e00b      	b.n	800104c <oled_Set_Display_Normal_Inverse+0x32>
		case display_normal:
			//	cmd 0xA6  normal display
			res = oled_Write_CMD(oled_cmd_display_normal);
 8001034:	20a6      	movs	r0, #166	; 0xa6
 8001036:	f7ff ff07 	bl	8000e48 <oled_Write_CMD>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

			break;
 800103e:	e007      	b.n	8001050 <oled_Set_Display_Normal_Inverse+0x36>
		case display_invers:
			//	cmd 0xA7  inverse display
			res = oled_Write_CMD(oled_cmd_display_inverse);
 8001040:	20a7      	movs	r0, #167	; 0xa7
 8001042:	f7ff ff01 	bl	8000e48 <oled_Write_CMD>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]

			break;
 800104a:	e001      	b.n	8001050 <oled_Set_Display_Normal_Inverse+0x36>
		default:
			return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <oled_Set_Display_Normal_Inverse+0x38>
	}
	return res;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <oled_Set_Display_ON_OFF>:
 * @NOTE  These single byte commands are used to turn the OLED panel display ON or OFF.
 * @param display_Switch_t: [in]  display_on	display_off
 * @retval status 0:ok	1:error
 */
uint8_t oled_Set_Display_ON_OFF(display_Switch_t	display_Switch)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
	switch (display_Switch) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <oled_Set_Display_ON_OFF+0x1a>
 800106e:	2b01      	cmp	r3, #1
 8001070:	d006      	beq.n	8001080 <oled_Set_Display_ON_OFF+0x26>
 8001072:	e00b      	b.n	800108c <oled_Set_Display_ON_OFF+0x32>
		case display_on:
			//	cmd	AFh : Display ON
			res = oled_Write_CMD(oled_cmd_display_on);
 8001074:	20af      	movs	r0, #175	; 0xaf
 8001076:	f7ff fee7 	bl	8000e48 <oled_Write_CMD>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
			break;
 800107e:	e007      	b.n	8001090 <oled_Set_Display_ON_OFF+0x36>
		case display_off:
			//	cmd AEh : Display OFF
			res = oled_Write_CMD(oled_cmd_display_off);
 8001080:	20ae      	movs	r0, #174	; 0xae
 8001082:	f7ff fee1 	bl	8000e48 <oled_Write_CMD>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
			break;
 800108a:	e001      	b.n	8001090 <oled_Set_Display_ON_OFF+0x36>
		default:
			return 1;
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <oled_Set_Display_ON_OFF+0x38>
	}
	return res;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <oled_Set_Memory_Addr_Mode>:
 * 		       11b,Invalid
 * @param addr_Mode: [in] Memory Addressing Mode
 * @retval status 0:ok	1/2:error
 */
uint8_t oled_Set_Memory_Addr_Mode(addr_Mode_t	addr_Mode)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

	// cmd Set Memory Addressing Mode (20h)
	res = oled_Write_CMD(oled_cmd_set_memory_addr_mode_1);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f7ff fecd 	bl	8000e48 <oled_Write_CMD>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <oled_Set_Memory_Addr_Mode+0x22>
		return 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e01f      	b.n	80010fc <oled_Set_Memory_Addr_Mode+0x62>
	switch (addr_Mode) {
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d012      	beq.n	80010e8 <oled_Set_Memory_Addr_Mode+0x4e>
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	dc16      	bgt.n	80010f4 <oled_Set_Memory_Addr_Mode+0x5a>
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <oled_Set_Memory_Addr_Mode+0x36>
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d006      	beq.n	80010dc <oled_Set_Memory_Addr_Mode+0x42>
 80010ce:	e011      	b.n	80010f4 <oled_Set_Memory_Addr_Mode+0x5a>
		case addr_mode_Horizontal:
			res = oled_Write_CMD((uint8_t)addr_mode_Horizontal);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff feb9 	bl	8000e48 <oled_Write_CMD>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
			break;
 80010da:	e00e      	b.n	80010fa <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Vertical:
			res = oled_Write_CMD((uint8_t)addr_mode_Vertical);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff feb3 	bl	8000e48 <oled_Write_CMD>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
			break;
 80010e6:	e008      	b.n	80010fa <oled_Set_Memory_Addr_Mode+0x60>
		case addr_mode_Page:
			res = oled_Write_CMD((uint8_t)addr_mode_Page);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff fead 	bl	8000e48 <oled_Write_CMD>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			break;
 80010f2:	e002      	b.n	80010fa <oled_Set_Memory_Addr_Mode+0x60>
		default:
			res = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
			break;
 80010f8:	bf00      	nop
	}

	return res;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <oled_Set_Column_Start_End_Addr_HVMode>:
 * @param columnStartAddr: [in] column start address, Column start address, range : 0-127d, (RESET=0d)
 * @param columnEndAddr  : [in] column end   address, Column end   address, range : 0-127d, (RESET =127d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Column_Start_End_Addr_HVMode(uint8_t columnStartAddr, uint8_t columnEndAddr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

	if (columnStartAddr < 0 || columnStartAddr >= oled_H_Pix || columnEndAddr < 0 || columnEndAddr >= oled_H_Pix)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db03      	blt.n	8001128 <oled_Set_Column_Start_End_Addr_HVMode+0x24>
 8001120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da01      	bge.n	800112c <oled_Set_Column_Start_End_Addr_HVMode+0x28>
		return 1;
 8001128:	2301      	movs	r3, #1
 800112a:	e028      	b.n	800117e <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	// cmd 0x21 Set Column Address range
	res = oled_Write_CMD(oled_cmd_set_col_addr_range_1);
 800112c:	2021      	movs	r0, #33	; 0x21
 800112e:	f7ff fe8b 	bl	8000e48 <oled_Write_CMD>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <oled_Set_Column_Start_End_Addr_HVMode+0x3c>
		return 1;
 800113c:	2301      	movs	r3, #1
 800113e:	e01e      	b.n	800117e <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	//	Column start address A[6:0]	(RESET=0d)
	//	Column   end address B[6:0]	(RESET=127d)
	uint8_t startAddr = (columnStartAddr & 0b01111111);	//A[6:0]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001146:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (columnEndAddr   & 0b01111111);	//B[6:0]
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114e:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe78 	bl	8000e48 <oled_Write_CMD>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <oled_Set_Column_Start_End_Addr_HVMode+0x62>
		return 1;
 8001162:	2301      	movs	r3, #1
 8001164:	e00b      	b.n	800117e <oled_Set_Column_Start_End_Addr_HVMode+0x7a>
	res = oled_Write_CMD(endAddr);
 8001166:	7b7b      	ldrb	r3, [r7, #13]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe6d 	bl	8000e48 <oled_Write_CMD>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <oled_Set_Column_Start_End_Addr_HVMode+0x78>
		return 1;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <oled_Set_Column_Start_End_Addr_HVMode+0x7a>

	return res;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <oled_Set_Page_Start_End_Addr_HVMode>:
 * @param pageStartAddr: [in] Page start Address, range : 0-7d,  (RESET = 0d)
 * @param pageEndAddr  : [in] Page end   Address, range : 0-7d,  (RESET = 7d)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Page_Start_End_Addr_HVMode(uint8_t pageStartAddr, uint8_t pageEndAddr)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	460a      	mov	r2, r1
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	4613      	mov	r3, r2
 8001194:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

	if (pageStartAddr < 0 || pageStartAddr >= (oled_V_Pix/8) || pageEndAddr < 0 || pageEndAddr >= (oled_V_Pix/8))
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d802      	bhi.n	80011a6 <oled_Set_Page_Start_End_Addr_HVMode+0x20>
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d901      	bls.n	80011aa <oled_Set_Page_Start_End_Addr_HVMode+0x24>
		return 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e028      	b.n	80011fc <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	cmd 0x22	Set Page Address range
	res = oled_Write_CMD(oled_cmd_set_page_addr_range_1);
 80011aa:	2022      	movs	r0, #34	; 0x22
 80011ac:	f7ff fe4c 	bl	8000e48 <oled_Write_CMD>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <oled_Set_Page_Start_End_Addr_HVMode+0x38>
		return 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e01e      	b.n	80011fc <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	//	Page start address A[2:0]	(RESET=0)
	//	Page   end address B[2:0]	(RESET=7)
	uint8_t startAddr = (pageStartAddr & 0b00000111);	// A[2:0]
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	73bb      	strb	r3, [r7, #14]
	uint8_t   endAddr = (pageEndAddr   & 0b00000111);	// B[2:0}
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	737b      	strb	r3, [r7, #13]
	res = oled_Write_CMD(startAddr);
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe39 	bl	8000e48 <oled_Write_CMD>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <oled_Set_Page_Start_End_Addr_HVMode+0x5e>
		return 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00b      	b.n	80011fc <oled_Set_Page_Start_End_Addr_HVMode+0x76>
	res = oled_Write_CMD(endAddr);
 80011e4:	7b7b      	ldrb	r3, [r7, #13]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe2e 	bl	8000e48 <oled_Write_CMD>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <oled_Set_Page_Start_End_Addr_HVMode+0x74>
		return 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <oled_Set_Page_Start_End_Addr_HVMode+0x76>

	return res;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <oled_Set_Display_Start_Line>:
 * 			With value equal to 1, DRAM row 1 is mapped to COM0 and so on.
 * @param startLineVal: [in] Set Display Start Line  0 ~ oled_V_Pix-1
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Start_Line(uint8_t startLineVal)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
	if (startLineVal < 0 || startLineVal >= oled_V_Pix)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b3f      	cmp	r3, #63	; 0x3f
 8001216:	d901      	bls.n	800121c <oled_Set_Display_Start_Line+0x18>
		return 1;
 8001218:	2301      	movs	r3, #1
 800121a:	e00f      	b.n	800123c <oled_Set_Display_Start_Line+0x38>

	//	cmd 0x40 ~ 0x70	Set Display Start Line
	uint8_t startLine = (startLineVal & 0b00011111) | oled_cmd_set_display_start_line;
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(startLine);
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe09 	bl	8000e48 <oled_Write_CMD>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]

	return res;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <oled_Set_Segment_Map>:
 * 		 This command only affects subsequent data input.  Data already stored in GDDRAM will have no changes.
 * @param	segment_Map_t:	[in] keep default or remap
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Segment_Map(segment_Map_t segment_Map)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]

	// cmd 0xA0/1 Set Segment Re-map
	uint8_t segmentMap = (segment_Map & 0x01) | oled_cmd_set_segment_remap_n;
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b25b      	sxtb	r3, r3
 800125c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001260:	b25b      	sxtb	r3, r3
 8001262:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(segmentMap);
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fdee 	bl	8000e48 <oled_Write_CMD>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]

	return res;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <oled_Set_MUX_Ratio>:
 * 			from 16MUX to 64MUX, RESET= 111111b (i.e. 63d, 64MUX) A[5:0] from 0 to 14 are invalid entry
 * @param	MUX_Ratio	from 16 to 64
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_MUX_Ratio(uint8_t MUX_Ratio)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
	MUX_Ratio -= 1;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	3b01      	subs	r3, #1
 800128c:	71fb      	strb	r3, [r7, #7]
	if (MUX_Ratio < 15 || MUX_Ratio >= 64)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b0e      	cmp	r3, #14
 8001292:	d902      	bls.n	800129a <oled_Set_MUX_Ratio+0x20>
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b3f      	cmp	r3, #63	; 0x3f
 8001298:	d901      	bls.n	800129e <oled_Set_MUX_Ratio+0x24>
		return 1;
 800129a:	2301      	movs	r3, #1
 800129c:	e014      	b.n	80012c8 <oled_Set_MUX_Ratio+0x4e>
	//	cmd 0xA8  set multiplex ratio value (15 ~ 63)+1
	res = oled_Write_CMD(oled_cmd_set_multiplex_ratio_1);
 800129e:	20a8      	movs	r0, #168	; 0xa8
 80012a0:	f7ff fdd2 	bl	8000e48 <oled_Write_CMD>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <oled_Set_MUX_Ratio+0x38>
		return 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00a      	b.n	80012c8 <oled_Set_MUX_Ratio+0x4e>

	//	cmd 15d~63d	multiplex ratio value
	uint8_t muxRatio = (MUX_Ratio & 0b00111111);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012b8:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(muxRatio);
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fdc3 	bl	8000e48 <oled_Write_CMD>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
	return res;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <oled_Set_Com_Map_Output_Scan_Dirct>:
 * 	// remapping
 * @param com_Map: [in] com scan dirction (remap or not)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Com_Map_Output_Scan_Dirct(com_Map_t com_Map)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]

	switch (com_Map) {
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <oled_Set_Com_Map_Output_Scan_Dirct+0x1a>
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d006      	beq.n	80012f6 <oled_Set_Com_Map_Output_Scan_Dirct+0x26>
 80012e8:	e00b      	b.n	8001302 <oled_Set_Com_Map_Output_Scan_Dirct+0x32>
		case com_normal_mapping:
			// cmd C0h	DDRAM row-0  ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_increase);
 80012ea:	20c0      	movs	r0, #192	; 0xc0
 80012ec:	f7ff fdac 	bl	8000e48 <oled_Write_CMD>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
			break;
 80012f4:	e008      	b.n	8001308 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		case com_remapping:
			// cmd C8h	DDRAM row-63 ->  COM0
			res = oled_Write_CMD(oled_cmd_set_com_scan_dir_decrease);
 80012f6:	20c8      	movs	r0, #200	; 0xc8
 80012f8:	f7ff fda6 	bl	8000e48 <oled_Write_CMD>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
			break;
 8001300:	e002      	b.n	8001308 <oled_Set_Com_Map_Output_Scan_Dirct+0x38>
		default:
			res = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
			break;
 8001306:	bf00      	nop
	}

	return res;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <oled_Set_Display_Offset_Vertical>:
 * @NOTE	this is a double byte command
 * @param offsetVal: [in] vertical offset value
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Offset_Vertical(uint8_t offsetVal)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

	if (offsetVal < 0 || offsetVal >= oled_V_Pix)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b3f      	cmp	r3, #63	; 0x3f
 8001324:	d901      	bls.n	800132a <oled_Set_Display_Offset_Vertical+0x18>
		return 1;
 8001326:	2301      	movs	r3, #1
 8001328:	e014      	b.n	8001354 <oled_Set_Display_Offset_Vertical+0x42>

	//	cmd 0xD3 set display offset (DDRAM oled_row indicate line start)
	res = oled_Write_CMD(oled_cmd_set_display_offset_1);
 800132a:	20d3      	movs	r0, #211	; 0xd3
 800132c:	f7ff fd8c 	bl	8000e48 <oled_Write_CMD>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <oled_Set_Display_Offset_Vertical+0x2c>
		return 1;
 800133a:	2301      	movs	r3, #1
 800133c:	e00a      	b.n	8001354 <oled_Set_Display_Offset_Vertical+0x42>

	// cmd set offset line value from 0 to 63
	uint8_t offsetValue = (offsetVal & 0b00111111);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001344:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(offsetValue);
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd7d 	bl	8000e48 <oled_Write_CMD>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]

	return res;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <oled_Set_Com_Pins_Hardware_Config>:
 * @NOTE  This command sets the COM signals pin configuration to match the OLED panel hardware layout.
 * @param common_Hardware_Config: [in] common config parameters
 * @retval staus	0:ok	1:error
 */
uint8_t oled_Set_Com_Pins_Hardware_Config(common_Hardware_Config_t common_Hardware_Config)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]

	// cmd Set COM Pins Hardware Configuration (DAh)
	res = oled_Write_CMD(oled_cmd_set_com_pins_1);
 800136a:	20da      	movs	r0, #218	; 0xda
 800136c:	f7ff fd6c 	bl	8000e48 <oled_Write_CMD>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <oled_Set_Com_Pins_Hardware_Config+0x22>
		return 1;
 800137a:	2301      	movs	r3, #1
 800137c:	e006      	b.n	800138c <oled_Set_Com_Pins_Hardware_Config+0x30>

	res = oled_Write_CMD(common_Hardware_Config);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fd61 	bl	8000e48 <oled_Write_CMD>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]

	return res;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <oled_Set_Display_Clock_Parameter>:
 * @param Fosc: [in] D5h A[7:4] The higher the register setting results in higher frequency
 * @param factor_D: [in] division factor D    DCLK=FOSC/D (D -> D5h A[3:0]bit)
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_Display_Clock_Parameter(uint8_t Fosc, uint8_t factor_D)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

	if (factor_D < 0 || factor_D > 15 || Fosc < 0 || Fosc > 15)
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d802      	bhi.n	80013b4 <oled_Set_Display_Clock_Parameter+0x20>
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d901      	bls.n	80013b8 <oled_Set_Display_Clock_Parameter+0x24>
		return 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e018      	b.n	80013ea <oled_Set_Display_Clock_Parameter+0x56>

	uint8_t clockVal = (Fosc << 4) |factor_D;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	73bb      	strb	r3, [r7, #14]
	// cmd 0xD5	Set Display Clock Divide Ratio/ Oscillator Frequency
	res = oled_Write_CMD(oled_cmd_set_clk_div_1);
 80013c8:	20d5      	movs	r0, #213	; 0xd5
 80013ca:	f7ff fd3d 	bl	8000e48 <oled_Write_CMD>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <oled_Set_Display_Clock_Parameter+0x48>
		return 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	e006      	b.n	80013ea <oled_Set_Display_Clock_Parameter+0x56>
	res = oled_Write_CMD(clockVal);
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fd32 	bl	8000e48 <oled_Write_CMD>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]

	return res;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <oled_Set_PreCharge_Period>:
 * @param phase_2_period: [in] Phase 2 period of up to 15 DCLK clocks 0 is invalid entry   (RESET=2h)
 * 			1 ~ 15 A[7:4]
 * @retval status	0:ok	1:error
 */
uint8_t oled_Set_PreCharge_Period(uint8_t phase_1_period, uint8_t phase_2_period)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	460a      	mov	r2, r1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	4613      	mov	r3, r2
 8001400:	71bb      	strb	r3, [r7, #6]
	uint8_t res = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]

	if (phase_1_period < 1 || phase_1_period > 15 || phase_2_period < 1 || phase_2_period > 15)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <oled_Set_PreCharge_Period+0x2c>
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d805      	bhi.n	800141e <oled_Set_PreCharge_Period+0x2c>
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <oled_Set_PreCharge_Period+0x2c>
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d901      	bls.n	8001422 <oled_Set_PreCharge_Period+0x30>
		return 1;
 800141e:	2301      	movs	r3, #1
 8001420:	e018      	b.n	8001454 <oled_Set_PreCharge_Period+0x62>

	uint8_t phasePeriod = (phase_2_period << 4) | phase_1_period;
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	b25a      	sxtb	r2, r3
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4313      	orrs	r3, r2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	73bb      	strb	r3, [r7, #14]
	res = oled_Write_CMD(oled_cmd_set_pre_charge_period_1);
 8001432:	20d9      	movs	r0, #217	; 0xd9
 8001434:	f7ff fd08 	bl	8000e48 <oled_Write_CMD>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <oled_Set_PreCharge_Period+0x54>
		return 1;
 8001442:	2301      	movs	r3, #1
 8001444:	e006      	b.n	8001454 <oled_Set_PreCharge_Period+0x62>
	res = oled_Write_CMD(phasePeriod);
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fcfd 	bl	8000e48 <oled_Write_CMD>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]

	return res;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <oled_Set_Charge_Pump>:
 * 			  |- AFh -> Display ON
 * @param	charge_pumt_control: [in] charge pump enable or disable
 * @retval	status	0:ok	>0:error
 */
uint8_t oled_Set_Charge_Pump(charge_pump_control_t	charge_pumt_control)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]

	//	cmd 0x8D	Charge Pump Setting
	res = oled_Write_CMD(oled_cmd_set_charge_pump_1);
 800146a:	208d      	movs	r0, #141	; 0x8d
 800146c:	f7ff fcec 	bl	8000e48 <oled_Write_CMD>
 8001470:	4603      	mov	r3, r0
 8001472:	73fb      	strb	r3, [r7, #15]
	if (res != 0)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <oled_Set_Charge_Pump+0x22>
		return 1;
 800147a:	2301      	movs	r3, #1
 800147c:	e015      	b.n	80014aa <oled_Set_Charge_Pump+0x4e>

	switch (charge_pumt_control) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <oled_Set_Charge_Pump+0x2e>
 8001484:	2b01      	cmp	r3, #1
 8001486:	d006      	beq.n	8001496 <oled_Set_Charge_Pump+0x3a>
 8001488:	e00b      	b.n	80014a2 <oled_Set_Charge_Pump+0x46>
		case charge_pump_disable:
			res = oled_Write_CMD(0x10);
 800148a:	2010      	movs	r0, #16
 800148c:	f7ff fcdc 	bl	8000e48 <oled_Write_CMD>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
			break;
 8001494:	e008      	b.n	80014a8 <oled_Set_Charge_Pump+0x4c>
		case charge_pump_enable:
			res = oled_Write_CMD(0x14);
 8001496:	2014      	movs	r0, #20
 8001498:	f7ff fcd6 	bl	8000e48 <oled_Write_CMD>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]
			break;
 80014a0:	e002      	b.n	80014a8 <oled_Set_Charge_Pump+0x4c>
		default:
			res = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
			break;
 80014a6:	bf00      	nop
	}

	return res;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <oled_i2c_Init>:
/**
  * @brief oled 12864 init
  * @retval status 0:init ok    1:init error
  */
uint8_t oled_i2c_Init(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
	// status flag
	int status = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]

	// Wait for the screen to boot
	HAL_Delay(500);
 80014bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c0:	f002 fc0c 	bl	8003cdc <HAL_Delay>

	// oled initial process
	/* 0.Display Off */
	status += oled_Set_Display_ON_OFF(display_off);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff fdc8 	bl	800105a <oled_Set_Display_ON_OFF>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]

	/* 1.Memory address mode : horizontal mode */
	status += oled_Set_Memory_Addr_Mode(addr_mode_Horizontal);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fde0 	bl	800109a <oled_Set_Memory_Addr_Mode>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	607b      	str	r3, [r7, #4]
	status += oled_Set_Page_Start_End_Addr_HVMode(0, 7);
 80014e4:	2107      	movs	r1, #7
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fe4d 	bl	8001186 <oled_Set_Page_Start_End_Addr_HVMode>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	607b      	str	r3, [r7, #4]
	status += oled_Set_Column_Start_End_Addr_HVMode(0, 127);
 80014f6:	217f      	movs	r1, #127	; 0x7f
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff fe03 	bl	8001104 <oled_Set_Column_Start_End_Addr_HVMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	607b      	str	r3, [r7, #4]

	/* 2.Set MUX Ratio */
	status += oled_Set_MUX_Ratio(oled_V_Pix);
 8001508:	2040      	movs	r0, #64	; 0x40
 800150a:	f7ff feb6 	bl	800127a <oled_Set_MUX_Ratio>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	607b      	str	r3, [r7, #4]

	/* 3.Set Display Offset */
	status += oled_Set_Display_Offset_Vertical(0);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fefa 	bl	8001312 <oled_Set_Display_Offset_Vertical>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	607b      	str	r3, [r7, #4]

	/* 4.Set Display Start Line */
	status += oled_Set_Display_Start_Line(0);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fe6b 	bl	8001204 <oled_Set_Display_Start_Line>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	607b      	str	r3, [r7, #4]

	/* 5.Set Segment Re-map */
	status += oled_Set_Segment_Map(segment_remapping);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fe83 	bl	8001244 <oled_Set_Segment_Map>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	607b      	str	r3, [r7, #4]

	/* 6.Set COM Output Scan Direction (map) */
	status += oled_Set_Com_Map_Output_Scan_Dirct(com_remapping);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fec1 	bl	80012d0 <oled_Set_Com_Map_Output_Scan_Dirct>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	607b      	str	r3, [r7, #4]

	/* 7. Set Pre-charge Period value phase1(1~15) phase2(1~15) */
	status += oled_Set_PreCharge_Period(2, 2);
 8001558:	2102      	movs	r1, #2
 800155a:	2002      	movs	r0, #2
 800155c:	f7ff ff49 	bl	80013f2 <oled_Set_PreCharge_Period>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	607b      	str	r3, [r7, #4]

	/* 8.Set COM Pins hardware configuration */
	status += oled_Set_Com_Pins_Hardware_Config(common_alternative_config|common_disable_left_right_remap);
 800156a:	2012      	movs	r0, #18
 800156c:	f7ff fef6 	bl	800135c <oled_Set_Com_Pins_Hardware_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	607b      	str	r3, [r7, #4]

	/* 9.Set Contrast Control */
	status += oled_Set_Contrast(0x7F);
 800157a:	207f      	movs	r0, #127	; 0x7f
 800157c:	f7ff fd0a 	bl	8000f94 <oled_Set_Contrast>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	607b      	str	r3, [r7, #4]

	/* 10.Disable Entire Display On */
	status += oled_Set_Display_Follow_RAM_Or_No(RAM_output_follow);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fd24 	bl	8000fd8 <oled_Set_Display_Follow_RAM_Or_No>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	607b      	str	r3, [r7, #4]

	/* 11.Set Normal Display */
	status += oled_Set_Display_Normal_Inverse(display_normal);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd3d 	bl	800101a <oled_Set_Display_Normal_Inverse>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	607b      	str	r3, [r7, #4]

	/* 12.Set Osc Frequency */
	status += oled_Set_Display_Clock_Parameter(0x0F, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	200f      	movs	r0, #15
 80015ae:	f7ff fef1 	bl	8001394 <oled_Set_Display_Clock_Parameter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	607b      	str	r3, [r7, #4]

	/* 13.Enable charge pump regulator */
	status += oled_Set_Charge_Pump(charge_pump_enable);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff ff4d 	bl	800145c <oled_Set_Charge_Pump>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]

	/* 14.clear whole screen write 0 to GDDRAM */
	status += oled_Fill_Screen_Color(oled_color_Black);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 f837 	bl	8001640 <oled_Fill_Screen_Color>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	607b      	str	r3, [r7, #4]

	/* 15.Display On */
	status += oled_Set_Display_ON_OFF(display_on);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fd3c 	bl	800105a <oled_Set_Display_ON_OFF>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	607b      	str	r3, [r7, #4]

//	oled_Clear_Screen();

	if (status != 0)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <oled_i2c_Init+0x146>
		return status;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	e000      	b.n	80015fa <oled_i2c_Init+0x148>

	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <oled_Update_Screen>:
/**
 * @brief write oled_cmd_display_contrast_1 into oled GDDRAM
 * @retval status 0:write ok	1:write error
 */
uint8_t oled_Update_Screen(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	if (oled.bufferUpdateFlag == 0)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <oled_Update_Screen+0x34>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <oled_Update_Screen+0x12>
		return 0;	// don't need updata screen
 8001612:	2300      	movs	r3, #0
 8001614:	e00c      	b.n	8001630 <oled_Update_Screen+0x2c>

	uint8_t res = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]
	res = oled_Write_Data(oled_display_buff, sizeof(oled_display_buff));
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <oled_Update_Screen+0x38>)
 8001620:	f7ff fc50 	bl	8000ec4 <oled_Write_Data>
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]

    oled.bufferUpdateFlag = 0;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <oled_Update_Screen+0x34>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
    return res;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000ac 	.word	0x200000ac
 800163c:	200000b0 	.word	0x200000b0

08001640 <oled_Fill_Screen_Color>:
 * 		  include oled screen update
 * @param	oled_color: [in] oled_color_black	oled_color_white
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Fill_Screen_Color(oled_color_t	oled_color)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

	//	set oled_buffer value
	switch (oled_color) {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <oled_Fill_Screen_Color+0x1a>
 8001654:	2b01      	cmp	r3, #1
 8001656:	d007      	beq.n	8001668 <oled_Fill_Screen_Color+0x28>
 8001658:	e00d      	b.n	8001676 <oled_Fill_Screen_Color+0x36>
		case oled_color_Black:
			oled_Fill_GDDRAM_Buffer(oled_color_Black);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fc72 	bl	8000f44 <oled_Fill_GDDRAM_Buffer>
			oled.clear_GDDRAM_Use_0_1_Flag = 0;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <oled_Fill_Screen_Color+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	705a      	strb	r2, [r3, #1]
			break;
 8001666:	e008      	b.n	800167a <oled_Fill_Screen_Color+0x3a>
		case oled_color_White:
			oled_Fill_GDDRAM_Buffer(oled_color_White);
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fc6b 	bl	8000f44 <oled_Fill_GDDRAM_Buffer>
			oled.clear_GDDRAM_Use_0_1_Flag = 1;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <oled_Fill_Screen_Color+0x4c>)
 8001670:	2201      	movs	r2, #1
 8001672:	705a      	strb	r2, [r3, #1]
			break;
 8001674:	e001      	b.n	800167a <oled_Fill_Screen_Color+0x3a>
		default:
			return 1;
 8001676:	2301      	movs	r3, #1
 8001678:	e004      	b.n	8001684 <oled_Fill_Screen_Color+0x44>
			break;
	}


	//	update screen, write oled_buffer to GDDRAM
	res = oled_Update_Screen();
 800167a:	f7ff ffc3 	bl	8001604 <oled_Update_Screen>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]

	return res;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000ac 	.word	0x200000ac

08001690 <oled_Draw_Pixel>:
 * @param	py: [in] y value (0 ~ 63)  row		[< oled_V_pix]
 * @param	pixel_control:	[in] pixel_control_ON	pixel_control_OFF
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Draw_Pixel(uint8_t px, uint8_t py, pixel_control_t pixel_control)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	460b      	mov	r3, r1
 800169c:	71bb      	strb	r3, [r7, #6]
 800169e:	4613      	mov	r3, r2
 80016a0:	717b      	strb	r3, [r7, #5]
	if (px < 0 || px >= oled_H_Pix || py < 0 || py >= oled_V_Pix)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db02      	blt.n	80016b0 <oled_Draw_Pixel+0x20>
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	2b3f      	cmp	r3, #63	; 0x3f
 80016ae:	d901      	bls.n	80016b4 <oled_Draw_Pixel+0x24>
		return 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e094      	b.n	80017de <oled_Draw_Pixel+0x14e>
	// Set the (x,y) pixel value to the opposite of the background value
	if (pixel_control == pixel_control_ON)
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d145      	bne.n	8001746 <oled_Draw_Pixel+0xb6>
	{
		//	GDDRAM buffer -> oled display	1:on	0:off(background)
		if (oled.clear_GDDRAM_Use_0_1_Flag == 0)
 80016ba:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <oled_Draw_Pixel+0x15c>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11a      	bne.n	80016f8 <oled_Draw_Pixel+0x68>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] |=  (0x01 << (py%8));
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	b2d8      	uxtb	r0, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	01db      	lsls	r3, r3, #7
 80016ce:	4413      	add	r3, r2
 80016d0:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <oled_Draw_Pixel+0x160>)
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b259      	sxtb	r1, r3
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	4603      	mov	r3, r0
 80016ec:	01db      	lsls	r3, r3, #7
 80016ee:	4413      	add	r3, r2
 80016f0:	b2c9      	uxtb	r1, r1
 80016f2:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <oled_Draw_Pixel+0x160>)
 80016f4:	54d1      	strb	r1, [r2, r3]
 80016f6:	e022      	b.n	800173e <oled_Draw_Pixel+0xae>
		}
		//	GDDRAM buffer -> oled display	0:on	1:off(background)
		else if (oled.clear_GDDRAM_Use_0_1_Flag == 1)
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <oled_Draw_Pixel+0x15c>)
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d11c      	bne.n	800173a <oled_Draw_Pixel+0xaa>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] &= ~(0x01 << (py%8));
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	b2d8      	uxtb	r0, r3
 8001708:	4603      	mov	r3, r0
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	4413      	add	r3, r2
 800170e:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <oled_Draw_Pixel+0x160>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	b25a      	sxtb	r2, r3
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	b25b      	sxtb	r3, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	b25b      	sxtb	r3, r3
 8001726:	4013      	ands	r3, r2
 8001728:	b259      	sxtb	r1, r3
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	4603      	mov	r3, r0
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	4413      	add	r3, r2
 8001732:	b2c9      	uxtb	r1, r1
 8001734:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <oled_Draw_Pixel+0x160>)
 8001736:	54d1      	strb	r1, [r2, r3]
 8001738:	e001      	b.n	800173e <oled_Draw_Pixel+0xae>
		}
		else {
			return 1;
 800173a:	2301      	movs	r3, #1
 800173c:	e04f      	b.n	80017de <oled_Draw_Pixel+0x14e>
		}
		// set buffer updata flag value
		oled.bufferUpdateFlag = 1;
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <oled_Draw_Pixel+0x15c>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e04a      	b.n	80017dc <oled_Draw_Pixel+0x14c>
	}
	// set (x,y) pixel value equal background value
	else if (pixel_control == pixel_control_OFF)
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d145      	bne.n	80017d8 <oled_Draw_Pixel+0x148>
	{
		//	GDDRAM buffer -> oled display	1:on	0:off(background)
		if (oled.clear_GDDRAM_Use_0_1_Flag == 0)
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <oled_Draw_Pixel+0x15c>)
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11c      	bne.n	800178e <oled_Draw_Pixel+0xfe>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] &=  ~(0x01 << (py%8));
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	b2d8      	uxtb	r0, r3
 800175c:	4603      	mov	r3, r0
 800175e:	01db      	lsls	r3, r3, #7
 8001760:	4413      	add	r3, r2
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <oled_Draw_Pixel+0x160>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	b25a      	sxtb	r2, r3
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	b25b      	sxtb	r3, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	4013      	ands	r3, r2
 800177c:	b259      	sxtb	r1, r3
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4603      	mov	r3, r0
 8001782:	01db      	lsls	r3, r3, #7
 8001784:	4413      	add	r3, r2
 8001786:	b2c9      	uxtb	r1, r1
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <oled_Draw_Pixel+0x160>)
 800178a:	54d1      	strb	r1, [r2, r3]
 800178c:	e020      	b.n	80017d0 <oled_Draw_Pixel+0x140>
		}
		//	GDDRAM buffer -> oled display	0:on	1:off(background)
		else if (oled.clear_GDDRAM_Use_0_1_Flag == 1)
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <oled_Draw_Pixel+0x15c>)
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d11a      	bne.n	80017cc <oled_Draw_Pixel+0x13c>
		{
			oled_display_buff[px + (py/8)*oled_H_Pix] |=  (0x01 << (py%8));
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	4413      	add	r3, r2
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <oled_Draw_Pixel+0x160>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b259      	sxtb	r1, r3
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4603      	mov	r3, r0
 80017c0:	01db      	lsls	r3, r3, #7
 80017c2:	4413      	add	r3, r2
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <oled_Draw_Pixel+0x160>)
 80017c8:	54d1      	strb	r1, [r2, r3]
 80017ca:	e001      	b.n	80017d0 <oled_Draw_Pixel+0x140>
		}
		else {
			return 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e006      	b.n	80017de <oled_Draw_Pixel+0x14e>
		}
		// set buffer updata flag value
		oled.bufferUpdateFlag = 1;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <oled_Draw_Pixel+0x15c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e001      	b.n	80017dc <oled_Draw_Pixel+0x14c>
	}
	else
	{
		return 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <oled_Draw_Pixel+0x14e>
	}

	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200000ac 	.word	0x200000ac
 80017f0:	200000b0 	.word	0x200000b0

080017f4 <oled_Draw_Line>:
 */
uint8_t oled_Draw_Line (
		uint8_t x0, uint8_t y0,
		uint8_t x1, uint8_t y1,
		line_width_t line_width)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	4603      	mov	r3, r0
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	717b      	strb	r3, [r7, #5]
 800180e:	4613      	mov	r3, r2
 8001810:	713b      	strb	r3, [r7, #4]
	if (x0 == x1 && y0 == y1)
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	797b      	ldrb	r3, [r7, #5]
 8001816:	429a      	cmp	r2, r3
 8001818:	d105      	bne.n	8001826 <oled_Draw_Line+0x32>
 800181a:	79ba      	ldrb	r2, [r7, #6]
 800181c:	793b      	ldrb	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	d101      	bne.n	8001826 <oled_Draw_Line+0x32>
		return 1;
 8001822:	2301      	movs	r3, #1
 8001824:	e2f7      	b.n	8001e16 <oled_Draw_Line+0x622>

	if (x0 > x1)
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	797b      	ldrb	r3, [r7, #5]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90b      	bls.n	8001846 <oled_Draw_Line+0x52>
	{
		uint8_t m_x = x1, m_y = y1;
 800182e:	797b      	ldrb	r3, [r7, #5]
 8001830:	77fb      	strb	r3, [r7, #31]
 8001832:	793b      	ldrb	r3, [r7, #4]
 8001834:	77bb      	strb	r3, [r7, #30]
		x1 = x0;	y1 = y0;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	717b      	strb	r3, [r7, #5]
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	713b      	strb	r3, [r7, #4]
		x0 = m_x;	y0 = m_y;
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	7fbb      	ldrb	r3, [r7, #30]
 8001844:	71bb      	strb	r3, [r7, #6]
	}

	float px = 0, py = 0;
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
	float tempx0 = x0, tempy0 = y0, tempx1 = x1, tempy1 = y1;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185c:	edc7 7a06 	vstr	s15, [r7, #24]
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186a:	edc7 7a05 	vstr	s15, [r7, #20]
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001878:	edc7 7a04 	vstr	s15, [r7, #16]
 800187c:	793b      	ldrb	r3, [r7, #4]
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001886:	edc7 7a03 	vstr	s15, [r7, #12]

	if (x0 > 127 || x1 > 127 || y0 > 64 || y1 > 64)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db09      	blt.n	80018a6 <oled_Draw_Line+0xb2>
 8001892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db05      	blt.n	80018a6 <oled_Draw_Line+0xb2>
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	2b40      	cmp	r3, #64	; 0x40
 800189e:	d802      	bhi.n	80018a6 <oled_Draw_Line+0xb2>
 80018a0:	793b      	ldrb	r3, [r7, #4]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d901      	bls.n	80018aa <oled_Draw_Line+0xb6>
		return 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e2b5      	b.n	8001e16 <oled_Draw_Line+0x622>

	// vertical direction
	if (tempx0 == tempx1)
 80018aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80018ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	f040 8138 	bne.w	8001b2e <oled_Draw_Line+0x33a>
	{
		if (y0 > y1)
 80018be:	79ba      	ldrb	r2, [r7, #6]
 80018c0:	793b      	ldrb	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90b      	bls.n	80018de <oled_Draw_Line+0xea>
		{
			uint8_t im_x = x1, im_y = y1;
 80018c6:	797b      	ldrb	r3, [r7, #5]
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	793b      	ldrb	r3, [r7, #4]
 80018cc:	72bb      	strb	r3, [r7, #10]
			x1 = x0;	y1 = y0;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	717b      	strb	r3, [r7, #5]
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	713b      	strb	r3, [r7, #4]
			x0 = im_x;	y0 = im_y;
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	7abb      	ldrb	r3, [r7, #10]
 80018dc:	71bb      	strb	r3, [r7, #6]
		}

		tempx0 = x0; tempy0 = y0; tempx1 = x1; tempy1 = y1;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e8:	edc7 7a06 	vstr	s15, [r7, #24]
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f6:	edc7 7a05 	vstr	s15, [r7, #20]
 80018fa:	797b      	ldrb	r3, [r7, #5]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	edc7 7a04 	vstr	s15, [r7, #16]
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001912:	edc7 7a03 	vstr	s15, [r7, #12]

		// draw slim width line (1 pixel)
		for (py = tempy0; py <= tempy1; py++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	e01d      	b.n	8001958 <oled_Draw_Line+0x164>
		{
			px = tempx0;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
			oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001920:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001928:	edc7 7a00 	vstr	s15, [r7]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	edd7 7a08 	vldr	s15, [r7, #32]
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	edc7 7a00 	vstr	s15, [r7]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d1      	uxtb	r1, r2
 8001940:	2200      	movs	r2, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fea4 	bl	8001690 <oled_Draw_Pixel>
		for (py = tempy0; py <= tempy1; py++)
 8001948:	edd7 7a08 	vldr	s15, [r7, #32]
 800194c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001954:	edc7 7a08 	vstr	s15, [r7, #32]
 8001958:	ed97 7a08 	vldr	s14, [r7, #32]
 800195c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	d9d8      	bls.n	800191c <oled_Draw_Line+0x128>
		}

		// draw medium width line (2 pixel)
		if (line_width == line_width_medium)
 800196a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800196e:	2b02      	cmp	r3, #2
 8001970:	d147      	bne.n	8001a02 <oled_Draw_Line+0x20e>
		{
			tempx0 = x0+1, tempy0 = y0, tempx1 = x1+1, tempy1 = y1;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3301      	adds	r3, #1
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	3301      	adds	r3, #1
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199c:	edc7 7a04 	vstr	s15, [r7, #16]
 80019a0:	793b      	ldrb	r3, [r7, #4]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019aa:	edc7 7a03 	vstr	s15, [r7, #12]
			for (py = tempy0; py <= tempy1; py++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	e01d      	b.n	80019f0 <oled_Draw_Line+0x1fc>
			{
				px = tempx0;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 80019b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	edc7 7a00 	vstr	s15, [r7]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d0:	edc7 7a00 	vstr	s15, [r7]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d1      	uxtb	r1, r2
 80019d8:	2200      	movs	r2, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe58 	bl	8001690 <oled_Draw_Pixel>
			for (py = tempy0; py <= tempy1; py++)
 80019e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ec:	edc7 7a08 	vstr	s15, [r7, #32]
 80019f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d9d8      	bls.n	80019b4 <oled_Draw_Line+0x1c0>
			}
		}

		if (line_width == line_width_bold)
 8001a02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	f040 8204 	bne.w	8001e14 <oled_Draw_Line+0x620>
		{
			tempx0 = x0+1, tempy0 = y0, tempx1 = x1+1, tempy1 = y1;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	edc7 7a06 	vstr	s15, [r7, #24]
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a26:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a2a:	797b      	ldrb	r3, [r7, #5]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	edc7 7a04 	vstr	s15, [r7, #16]
 8001a3a:	793b      	ldrb	r3, [r7, #4]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a44:	edc7 7a03 	vstr	s15, [r7, #12]
			for (py = tempy0; py <= tempy1; py++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	e01d      	b.n	8001a8a <oled_Draw_Line+0x296>
			{
				px = tempx0;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001a52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5a:	edc7 7a00 	vstr	s15, [r7]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	edc7 7a00 	vstr	s15, [r7]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	b2d1      	uxtb	r1, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe0b 	bl	8001690 <oled_Draw_Pixel>
			for (py = tempy0; py <= tempy1; py++)
 8001a7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a86:	edc7 7a08 	vstr	s15, [r7, #32]
 8001a8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d9d8      	bls.n	8001a4e <oled_Draw_Line+0x25a>
			}

			tempx0 = x0-1, tempy0 = y0, tempx1 = x1-1, tempy1 = y1;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa8:	edc7 7a06 	vstr	s15, [r7, #24]
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	edc7 7a05 	vstr	s15, [r7, #20]
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	edc7 7a04 	vstr	s15, [r7, #16]
 8001aca:	793b      	ldrb	r3, [r7, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	edc7 7a03 	vstr	s15, [r7, #12]
			for (py = tempy0; py <= tempy1; py++)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	e01d      	b.n	8001b1a <oled_Draw_Line+0x326>
			{
				px = tempx0;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aea:	edc7 7a00 	vstr	s15, [r7]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001afa:	edc7 7a00 	vstr	s15, [r7]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	b2d1      	uxtb	r1, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fdc3 	bl	8001690 <oled_Draw_Pixel>
			for (py = tempy0; py <= tempy1; py++)
 8001b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b16:	edc7 7a08 	vstr	s15, [r7, #32]
 8001b1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d9d8      	bls.n	8001ade <oled_Draw_Line+0x2ea>
 8001b2c:	e172      	b.n	8001e14 <oled_Draw_Line+0x620>
	/* other direction */
	else
	{

		// draw slim width line (1 pixel)
		for (px = tempx0; px <= tempx1; px++)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e037      	b.n	8001ba4 <oled_Draw_Line+0x3b0>
		{
			py = (((tempy1 - tempy0)/(tempx1 - tempx0)) * (px - tempx1) + tempy1);
 8001b34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b40:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b50:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a08 	vstr	s15, [r7, #32]
//			printf("1_> (%d, %d)\r\n", (uint8_t)px, (uint8_t)py);
			oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b74:	edc7 7a00 	vstr	s15, [r7]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b84:	edc7 7a00 	vstr	s15, [r7]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d1      	uxtb	r1, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fd7e 	bl	8001690 <oled_Draw_Pixel>
		for (px = tempx0; px <= tempx1; px++)
 8001b94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001ba4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d9be      	bls.n	8001b34 <oled_Draw_Line+0x340>
		}

		// draw medium width line (2 pixel)
		if (line_width == line_width_medium)
 8001bb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d161      	bne.n	8001c82 <oled_Draw_Line+0x48e>
		{
			tempx0 = x0, tempy0 = y0+1, tempx1 = x1, tempy1 = y1+1;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	edc7 7a06 	vstr	s15, [r7, #24]
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	edc7 7a04 	vstr	s15, [r7, #16]
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	3301      	adds	r3, #1
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	edc7 7a03 	vstr	s15, [r7, #12]
			for (px = tempx0; px <= tempx1; px++)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	e037      	b.n	8001c70 <oled_Draw_Line+0x47c>
			{
				py = (((tempy1 - tempy0)/(tempx1 - tempx0)) * (px - tempx1) + tempy1);
 8001c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c1c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	edc7 7a08 	vstr	s15, [r7, #32]
//				printf("2_> (%d, %d)\r\n", (uint8_t)px, (uint8_t)py);
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001c38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c40:	edc7 7a00 	vstr	s15, [r7]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	edc7 7a00 	vstr	s15, [r7]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b2d1      	uxtb	r1, r2
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fd18 	bl	8001690 <oled_Draw_Pixel>
			for (px = tempx0; px <= tempx1; px++)
 8001c60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001c70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d9be      	bls.n	8001c00 <oled_Draw_Line+0x40c>
			}
		}

		// draw bold width line (3 pixel)
		if (line_width == line_width_bold)
 8001c82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	f040 80c4 	bne.w	8001e14 <oled_Draw_Line+0x620>
		{
			tempx0 = x0, tempy0 = y0+1, tempx1 = x1, tempy1 = y1+1;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	edc7 7a06 	vstr	s15, [r7, #24]
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	edc7 7a05 	vstr	s15, [r7, #20]
 8001caa:	797b      	ldrb	r3, [r7, #5]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8001cb8:	793b      	ldrb	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	edc7 7a03 	vstr	s15, [r7, #12]
			for (px = tempx0; px <= tempx1; px++)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	e037      	b.n	8001d3e <oled_Draw_Line+0x54a>
			{
				py = (((tempy1 - tempy0)/(tempx1 - tempx0)) * (px - tempx1) + tempy1);
 8001cce:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cda:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a08 	vstr	s15, [r7, #32]
//				printf("3_> (%d, %d)\r\n", (uint8_t)px, (uint8_t)py);
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001d06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0e:	edc7 7a00 	vstr	s15, [r7]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1e:	edc7 7a00 	vstr	s15, [r7]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	b2d1      	uxtb	r1, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fcb1 	bl	8001690 <oled_Draw_Pixel>
			for (px = tempx0; px <= tempx1; px++)
 8001d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d3a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001d3e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d42:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d9be      	bls.n	8001cce <oled_Draw_Line+0x4da>
			}

			tempx0 = x0, tempy0 = y0-1, tempx1 = x1, tempy1 = y1-1;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5a:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	edc7 7a05 	vstr	s15, [r7, #20]
 8001d6e:	797b      	ldrb	r3, [r7, #5]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d78:	edc7 7a04 	vstr	s15, [r7, #16]
 8001d7c:	793b      	ldrb	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	edc7 7a03 	vstr	s15, [r7, #12]
			for (px = tempx0; px <= tempx1; px++)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	e037      	b.n	8001e02 <oled_Draw_Line+0x60e>
			{
				py = (((tempy1 - tempy0)/(tempx1 - tempx0)) * (px - tempx1) + tempy1);
 8001d92:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a08 	vstr	s15, [r7, #32]
//				printf("3_> (%d, %d)\r\n", (uint8_t)px, (uint8_t)py);
				oled_Draw_Pixel((uint8_t)(px), (uint8_t)(py), pixel_control_ON);
 8001dca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd2:	edc7 7a00 	vstr	s15, [r7]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de2:	edc7 7a00 	vstr	s15, [r7]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	b2d1      	uxtb	r1, r2
 8001dea:	2200      	movs	r2, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fc4f 	bl	8001690 <oled_Draw_Pixel>
			for (px = tempx0; px <= tempx1; px++)
 8001df2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dfe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001e02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	d9be      	bls.n	8001d92 <oled_Draw_Line+0x59e>
			}
		}
	}

	return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	372c      	adds	r7, #44	; 0x2c
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}

08001e1e <oled_Draw_rectangle>:
uint8_t oled_Draw_rectangle (
		uint8_t x0, uint8_t y0,
		uint8_t x1, uint8_t y1,
		line_width_t line_width,
		graphic_fill_effect_t graphic_fill_effect)
{
 8001e1e:	b590      	push	{r4, r7, lr}
 8001e20:	b089      	sub	sp, #36	; 0x24
 8001e22:	af02      	add	r7, sp, #8
 8001e24:	4604      	mov	r4, r0
 8001e26:	4608      	mov	r0, r1
 8001e28:	4611      	mov	r1, r2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4603      	mov	r3, r0
 8001e32:	71bb      	strb	r3, [r7, #6]
 8001e34:	460b      	mov	r3, r1
 8001e36:	717b      	strb	r3, [r7, #5]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	713b      	strb	r3, [r7, #4]
//	if (x0 > x1 || y0 > y1)
//		return 1;

	if (x0 == x1 || y0 == y1)
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	797b      	ldrb	r3, [r7, #5]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d003      	beq.n	8001e4c <oled_Draw_rectangle+0x2e>
 8001e44:	79ba      	ldrb	r2, [r7, #6]
 8001e46:	793b      	ldrb	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d101      	bne.n	8001e50 <oled_Draw_rectangle+0x32>
		return 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e219      	b.n	8002284 <oled_Draw_rectangle+0x466>

	// Whether the rectangle needs to fill the flag
	//	1:need	0:don't need
	uint8_t rectNeedFillFlag = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	75fb      	strb	r3, [r7, #23]

	if (x0 > x1)
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	797b      	ldrb	r3, [r7, #5]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d905      	bls.n	8001e68 <oled_Draw_rectangle+0x4a>
	{
		uint8_t temp_x_0 = x0;
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	733b      	strb	r3, [r7, #12]
		x0 = x1;	x1 = temp_x_0;
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	7b3b      	ldrb	r3, [r7, #12]
 8001e66:	717b      	strb	r3, [r7, #5]
	}
	if (y0 > y1)
 8001e68:	79ba      	ldrb	r2, [r7, #6]
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d905      	bls.n	8001e7c <oled_Draw_rectangle+0x5e>
	{
		uint8_t temp_y_0 = y0;
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	72fb      	strb	r3, [r7, #11]
		y0 = y1;	y1 = temp_y_0;
 8001e74:	793b      	ldrb	r3, [r7, #4]
 8001e76:	71bb      	strb	r3, [r7, #6]
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	713b      	strb	r3, [r7, #4]
	}

	// left-top point
	uint8_t p1_x = x0, p1_y = y0;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	75bb      	strb	r3, [r7, #22]
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	757b      	strb	r3, [r7, #21]
	// left-bottom point
	uint8_t p2_x = x0, p2_y = y1;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	753b      	strb	r3, [r7, #20]
 8001e88:	793b      	ldrb	r3, [r7, #4]
 8001e8a:	74fb      	strb	r3, [r7, #19]
	// right-top point
	uint8_t p3_x = x1, p3_y = y0;
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	74bb      	strb	r3, [r7, #18]
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	747b      	strb	r3, [r7, #17]
	// right-bottom point
	uint8_t p4_x = x1, p4_y = y1;
 8001e94:	797b      	ldrb	r3, [r7, #5]
 8001e96:	743b      	strb	r3, [r7, #16]
 8001e98:	793b      	ldrb	r3, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]

	// draw rectangle frame
	oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	7d3a      	ldrb	r2, [r7, #20]
 8001ea0:	7d79      	ldrb	r1, [r7, #21]
 8001ea2:	7db8      	ldrb	r0, [r7, #22]
 8001ea4:	2401      	movs	r4, #1
 8001ea6:	9400      	str	r4, [sp, #0]
 8001ea8:	f7ff fca4 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 8001eac:	7c7b      	ldrb	r3, [r7, #17]
 8001eae:	7cba      	ldrb	r2, [r7, #18]
 8001eb0:	7d79      	ldrb	r1, [r7, #21]
 8001eb2:	7db8      	ldrb	r0, [r7, #22]
 8001eb4:	2401      	movs	r4, #1
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	f7ff fc9c 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(p2_x, p2_y, p4_x, p4_y, line_width_slim);
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	7c3a      	ldrb	r2, [r7, #16]
 8001ec0:	7cf9      	ldrb	r1, [r7, #19]
 8001ec2:	7d38      	ldrb	r0, [r7, #20]
 8001ec4:	2401      	movs	r4, #1
 8001ec6:	9400      	str	r4, [sp, #0]
 8001ec8:	f7ff fc94 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(p3_x, p3_y, p4_x, p4_y, line_width_slim);
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	7c3a      	ldrb	r2, [r7, #16]
 8001ed0:	7c79      	ldrb	r1, [r7, #17]
 8001ed2:	7cb8      	ldrb	r0, [r7, #18]
 8001ed4:	2401      	movs	r4, #1
 8001ed6:	9400      	str	r4, [sp, #0]
 8001ed8:	f7ff fc8c 	bl	80017f4 <oled_Draw_Line>

	switch (line_width) {
 8001edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d070      	beq.n	8001fc6 <oled_Draw_rectangle+0x1a8>
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	f300 813e 	bgt.w	8002166 <oled_Draw_rectangle+0x348>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f000 813a 	beq.w	8002164 <oled_Draw_rectangle+0x346>
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f040 8138 	bne.w	8002166 <oled_Draw_rectangle+0x348>
		case line_width_slim:
		break;
		case line_width_medium:
			p1_x = p1_x+1; p1_y = p1_y+1;	p3_x = p3_x-1; p3_y = p3_y+1;
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	75bb      	strb	r3, [r7, #22]
 8001efc:	7d7b      	ldrb	r3, [r7, #21]
 8001efe:	3301      	adds	r3, #1
 8001f00:	757b      	strb	r3, [r7, #21]
 8001f02:	7cbb      	ldrb	r3, [r7, #18]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	74bb      	strb	r3, [r7, #18]
 8001f08:	7c7b      	ldrb	r3, [r7, #17]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	747b      	strb	r3, [r7, #17]
			p2_x = p2_x+1; p2_y = p2_y-1;	p4_x = p4_x-1; p4_y = p4_y-1;
 8001f0e:	7d3b      	ldrb	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	753b      	strb	r3, [r7, #20]
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	74fb      	strb	r3, [r7, #19]
 8001f1a:	7c3b      	ldrb	r3, [r7, #16]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	743b      	strb	r3, [r7, #16]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]

			if (p1_x == p3_x && p1_y == p2_y)
 8001f26:	7dba      	ldrb	r2, [r7, #22]
 8001f28:	7cbb      	ldrb	r3, [r7, #18]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d10c      	bne.n	8001f48 <oled_Draw_rectangle+0x12a>
 8001f2e:	7d7a      	ldrb	r2, [r7, #21]
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d108      	bne.n	8001f48 <oled_Draw_rectangle+0x12a>
			{
				oled_Draw_Pixel(p1_x, p1_y, pixel_control_ON);
 8001f36:	7d79      	ldrb	r1, [r7, #21]
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fba7 	bl	8001690 <oled_Draw_Pixel>
				rectNeedFillFlag = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
				break;
 8001f46:	e10e      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_x == p3_x)
 8001f48:	7dba      	ldrb	r2, [r7, #22]
 8001f4a:	7cbb      	ldrb	r3, [r7, #18]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10a      	bne.n	8001f66 <oled_Draw_rectangle+0x148>
			{
				oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	7d3a      	ldrb	r2, [r7, #20]
 8001f54:	7d79      	ldrb	r1, [r7, #21]
 8001f56:	7db8      	ldrb	r0, [r7, #22]
 8001f58:	2401      	movs	r4, #1
 8001f5a:	9400      	str	r4, [sp, #0]
 8001f5c:	f7ff fc4a 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
				break;
 8001f64:	e0ff      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_y == p2_y)
 8001f66:	7d7a      	ldrb	r2, [r7, #21]
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d10a      	bne.n	8001f84 <oled_Draw_rectangle+0x166>
			{
				oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 8001f6e:	7c7b      	ldrb	r3, [r7, #17]
 8001f70:	7cba      	ldrb	r2, [r7, #18]
 8001f72:	7d79      	ldrb	r1, [r7, #21]
 8001f74:	7db8      	ldrb	r0, [r7, #22]
 8001f76:	2401      	movs	r4, #1
 8001f78:	9400      	str	r4, [sp, #0]
 8001f7a:	f7ff fc3b 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
				break;
 8001f82:	e0f0      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}

			oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	7d3a      	ldrb	r2, [r7, #20]
 8001f88:	7d79      	ldrb	r1, [r7, #21]
 8001f8a:	7db8      	ldrb	r0, [r7, #22]
 8001f8c:	2401      	movs	r4, #1
 8001f8e:	9400      	str	r4, [sp, #0]
 8001f90:	f7ff fc30 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 8001f94:	7c7b      	ldrb	r3, [r7, #17]
 8001f96:	7cba      	ldrb	r2, [r7, #18]
 8001f98:	7d79      	ldrb	r1, [r7, #21]
 8001f9a:	7db8      	ldrb	r0, [r7, #22]
 8001f9c:	2401      	movs	r4, #1
 8001f9e:	9400      	str	r4, [sp, #0]
 8001fa0:	f7ff fc28 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p2_x, p2_y, p4_x, p4_y, line_width_slim);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	7c3a      	ldrb	r2, [r7, #16]
 8001fa8:	7cf9      	ldrb	r1, [r7, #19]
 8001faa:	7d38      	ldrb	r0, [r7, #20]
 8001fac:	2401      	movs	r4, #1
 8001fae:	9400      	str	r4, [sp, #0]
 8001fb0:	f7ff fc20 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p3_x, p3_y, p4_x, p4_y, line_width_slim);
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	7c3a      	ldrb	r2, [r7, #16]
 8001fb8:	7c79      	ldrb	r1, [r7, #17]
 8001fba:	7cb8      	ldrb	r0, [r7, #18]
 8001fbc:	2401      	movs	r4, #1
 8001fbe:	9400      	str	r4, [sp, #0]
 8001fc0:	f7ff fc18 	bl	80017f4 <oled_Draw_Line>

			break;
 8001fc4:	e0cf      	b.n	8002166 <oled_Draw_rectangle+0x348>
		case line_width_bold:
			p1_x = p1_x+1; p1_y = p1_y+1;	p3_x = p3_x-1; p3_y = p3_y+1;
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	75bb      	strb	r3, [r7, #22]
 8001fcc:	7d7b      	ldrb	r3, [r7, #21]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	757b      	strb	r3, [r7, #21]
 8001fd2:	7cbb      	ldrb	r3, [r7, #18]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	74bb      	strb	r3, [r7, #18]
 8001fd8:	7c7b      	ldrb	r3, [r7, #17]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	747b      	strb	r3, [r7, #17]
			p2_x = p2_x+1; p2_y = p2_y-1;	p4_x = p4_x-1; p4_y = p4_y-1;
 8001fde:	7d3b      	ldrb	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	753b      	strb	r3, [r7, #20]
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	74fb      	strb	r3, [r7, #19]
 8001fea:	7c3b      	ldrb	r3, [r7, #16]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	743b      	strb	r3, [r7, #16]
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]

			if (p1_x == p3_x && p1_y == p2_y)
 8001ff6:	7dba      	ldrb	r2, [r7, #22]
 8001ff8:	7cbb      	ldrb	r3, [r7, #18]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d10c      	bne.n	8002018 <oled_Draw_rectangle+0x1fa>
 8001ffe:	7d7a      	ldrb	r2, [r7, #21]
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	429a      	cmp	r2, r3
 8002004:	d108      	bne.n	8002018 <oled_Draw_rectangle+0x1fa>
			{
				oled_Draw_Pixel(p1_x, p1_y, pixel_control_ON);
 8002006:	7d79      	ldrb	r1, [r7, #21]
 8002008:	7dbb      	ldrb	r3, [r7, #22]
 800200a:	2200      	movs	r2, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fb3f 	bl	8001690 <oled_Draw_Pixel>
				rectNeedFillFlag = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	75fb      	strb	r3, [r7, #23]
				break;
 8002016:	e0a6      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_x == p3_x)
 8002018:	7dba      	ldrb	r2, [r7, #22]
 800201a:	7cbb      	ldrb	r3, [r7, #18]
 800201c:	429a      	cmp	r2, r3
 800201e:	d10a      	bne.n	8002036 <oled_Draw_rectangle+0x218>
			{
				oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	7d3a      	ldrb	r2, [r7, #20]
 8002024:	7d79      	ldrb	r1, [r7, #21]
 8002026:	7db8      	ldrb	r0, [r7, #22]
 8002028:	2401      	movs	r4, #1
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	f7ff fbe2 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	75fb      	strb	r3, [r7, #23]
				break;
 8002034:	e097      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_y == p2_y)
 8002036:	7d7a      	ldrb	r2, [r7, #21]
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	429a      	cmp	r2, r3
 800203c:	d10a      	bne.n	8002054 <oled_Draw_rectangle+0x236>
			{
				oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 800203e:	7c7b      	ldrb	r3, [r7, #17]
 8002040:	7cba      	ldrb	r2, [r7, #18]
 8002042:	7d79      	ldrb	r1, [r7, #21]
 8002044:	7db8      	ldrb	r0, [r7, #22]
 8002046:	2401      	movs	r4, #1
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	f7ff fbd3 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
				break;
 8002052:	e088      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}

			oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	7d3a      	ldrb	r2, [r7, #20]
 8002058:	7d79      	ldrb	r1, [r7, #21]
 800205a:	7db8      	ldrb	r0, [r7, #22]
 800205c:	2401      	movs	r4, #1
 800205e:	9400      	str	r4, [sp, #0]
 8002060:	f7ff fbc8 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 8002064:	7c7b      	ldrb	r3, [r7, #17]
 8002066:	7cba      	ldrb	r2, [r7, #18]
 8002068:	7d79      	ldrb	r1, [r7, #21]
 800206a:	7db8      	ldrb	r0, [r7, #22]
 800206c:	2401      	movs	r4, #1
 800206e:	9400      	str	r4, [sp, #0]
 8002070:	f7ff fbc0 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p2_x, p2_y, p4_x, p4_y, line_width_slim);
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	7c3a      	ldrb	r2, [r7, #16]
 8002078:	7cf9      	ldrb	r1, [r7, #19]
 800207a:	7d38      	ldrb	r0, [r7, #20]
 800207c:	2401      	movs	r4, #1
 800207e:	9400      	str	r4, [sp, #0]
 8002080:	f7ff fbb8 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p3_x, p3_y, p4_x, p4_y, line_width_slim);
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	7c3a      	ldrb	r2, [r7, #16]
 8002088:	7c79      	ldrb	r1, [r7, #17]
 800208a:	7cb8      	ldrb	r0, [r7, #18]
 800208c:	2401      	movs	r4, #1
 800208e:	9400      	str	r4, [sp, #0]
 8002090:	f7ff fbb0 	bl	80017f4 <oled_Draw_Line>

			// -------------------------------------------------------
			p1_x = p1_x+1; p1_y = p1_y+1;	p3_x = p3_x-1; p3_y = p3_y+1;
 8002094:	7dbb      	ldrb	r3, [r7, #22]
 8002096:	3301      	adds	r3, #1
 8002098:	75bb      	strb	r3, [r7, #22]
 800209a:	7d7b      	ldrb	r3, [r7, #21]
 800209c:	3301      	adds	r3, #1
 800209e:	757b      	strb	r3, [r7, #21]
 80020a0:	7cbb      	ldrb	r3, [r7, #18]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	74bb      	strb	r3, [r7, #18]
 80020a6:	7c7b      	ldrb	r3, [r7, #17]
 80020a8:	3301      	adds	r3, #1
 80020aa:	747b      	strb	r3, [r7, #17]
			p2_x = p2_x+1; p2_y = p2_y-1;	p4_x = p4_x-1; p4_y = p4_y-1;
 80020ac:	7d3b      	ldrb	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	753b      	strb	r3, [r7, #20]
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	74fb      	strb	r3, [r7, #19]
 80020b8:	7c3b      	ldrb	r3, [r7, #16]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	743b      	strb	r3, [r7, #16]
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]

			if (p1_x == p3_x && p1_y == p2_y)
 80020c4:	7dba      	ldrb	r2, [r7, #22]
 80020c6:	7cbb      	ldrb	r3, [r7, #18]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10c      	bne.n	80020e6 <oled_Draw_rectangle+0x2c8>
 80020cc:	7d7a      	ldrb	r2, [r7, #21]
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d108      	bne.n	80020e6 <oled_Draw_rectangle+0x2c8>
			{
				oled_Draw_Pixel(p1_x, p1_y, pixel_control_ON);
 80020d4:	7d79      	ldrb	r1, [r7, #21]
 80020d6:	7dbb      	ldrb	r3, [r7, #22]
 80020d8:	2200      	movs	r2, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fad8 	bl	8001690 <oled_Draw_Pixel>
				rectNeedFillFlag = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]
				break;
 80020e4:	e03f      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_x == p3_x)
 80020e6:	7dba      	ldrb	r2, [r7, #22]
 80020e8:	7cbb      	ldrb	r3, [r7, #18]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10a      	bne.n	8002104 <oled_Draw_rectangle+0x2e6>
			{
				oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	7d3a      	ldrb	r2, [r7, #20]
 80020f2:	7d79      	ldrb	r1, [r7, #21]
 80020f4:	7db8      	ldrb	r0, [r7, #22]
 80020f6:	2401      	movs	r4, #1
 80020f8:	9400      	str	r4, [sp, #0]
 80020fa:	f7ff fb7b 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
				break;
 8002102:	e030      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}
			if (p1_y == p2_y)
 8002104:	7d7a      	ldrb	r2, [r7, #21]
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	429a      	cmp	r2, r3
 800210a:	d10a      	bne.n	8002122 <oled_Draw_rectangle+0x304>
			{
				oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 800210c:	7c7b      	ldrb	r3, [r7, #17]
 800210e:	7cba      	ldrb	r2, [r7, #18]
 8002110:	7d79      	ldrb	r1, [r7, #21]
 8002112:	7db8      	ldrb	r0, [r7, #22]
 8002114:	2401      	movs	r4, #1
 8002116:	9400      	str	r4, [sp, #0]
 8002118:	f7ff fb6c 	bl	80017f4 <oled_Draw_Line>
				rectNeedFillFlag = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]
				break;
 8002120:	e021      	b.n	8002166 <oled_Draw_rectangle+0x348>
			}

			oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	7d3a      	ldrb	r2, [r7, #20]
 8002126:	7d79      	ldrb	r1, [r7, #21]
 8002128:	7db8      	ldrb	r0, [r7, #22]
 800212a:	2401      	movs	r4, #1
 800212c:	9400      	str	r4, [sp, #0]
 800212e:	f7ff fb61 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 8002132:	7c7b      	ldrb	r3, [r7, #17]
 8002134:	7cba      	ldrb	r2, [r7, #18]
 8002136:	7d79      	ldrb	r1, [r7, #21]
 8002138:	7db8      	ldrb	r0, [r7, #22]
 800213a:	2401      	movs	r4, #1
 800213c:	9400      	str	r4, [sp, #0]
 800213e:	f7ff fb59 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p2_x, p2_y, p4_x, p4_y, line_width_slim);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	7c3a      	ldrb	r2, [r7, #16]
 8002146:	7cf9      	ldrb	r1, [r7, #19]
 8002148:	7d38      	ldrb	r0, [r7, #20]
 800214a:	2401      	movs	r4, #1
 800214c:	9400      	str	r4, [sp, #0]
 800214e:	f7ff fb51 	bl	80017f4 <oled_Draw_Line>
			oled_Draw_Line(p3_x, p3_y, p4_x, p4_y, line_width_slim);
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	7c3a      	ldrb	r2, [r7, #16]
 8002156:	7c79      	ldrb	r1, [r7, #17]
 8002158:	7cb8      	ldrb	r0, [r7, #18]
 800215a:	2401      	movs	r4, #1
 800215c:	9400      	str	r4, [sp, #0]
 800215e:	f7ff fb49 	bl	80017f4 <oled_Draw_Line>

			break;
 8002162:	e000      	b.n	8002166 <oled_Draw_rectangle+0x348>
		break;
 8002164:	bf00      	nop
	}


	// Fill inside the rectangle
	if ( (graphic_fill_effect == graphic_fill_solid) && (rectNeedFillFlag == 1) )
 8002166:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 8089 	bne.w	8002282 <oled_Draw_rectangle+0x464>
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	f040 8085 	bne.w	8002282 <oled_Draw_rectangle+0x464>
	{
		p1_x = p1_x+1; p1_y = p1_y+1;	p3_x = p3_x-1; p3_y = p3_y+1;
 8002178:	7dbb      	ldrb	r3, [r7, #22]
 800217a:	3301      	adds	r3, #1
 800217c:	75bb      	strb	r3, [r7, #22]
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	3301      	adds	r3, #1
 8002182:	757b      	strb	r3, [r7, #21]
 8002184:	7cbb      	ldrb	r3, [r7, #18]
 8002186:	3b01      	subs	r3, #1
 8002188:	74bb      	strb	r3, [r7, #18]
 800218a:	7c7b      	ldrb	r3, [r7, #17]
 800218c:	3301      	adds	r3, #1
 800218e:	747b      	strb	r3, [r7, #17]
		p2_x = p2_x+1; p2_y = p2_y-1;	p4_x = p4_x-1; p4_y = p4_y-1;
 8002190:	7d3b      	ldrb	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	753b      	strb	r3, [r7, #20]
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	3b01      	subs	r3, #1
 800219a:	74fb      	strb	r3, [r7, #19]
 800219c:	7c3b      	ldrb	r3, [r7, #16]
 800219e:	3b01      	subs	r3, #1
 80021a0:	743b      	strb	r3, [r7, #16]
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]

		if (p1_x == p3_x && p1_y == p2_y)
 80021a8:	7dba      	ldrb	r2, [r7, #22]
 80021aa:	7cbb      	ldrb	r3, [r7, #18]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d10b      	bne.n	80021c8 <oled_Draw_rectangle+0x3aa>
 80021b0:	7d7a      	ldrb	r2, [r7, #21]
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <oled_Draw_rectangle+0x3aa>
		{
			oled_Draw_Pixel(p1_x, p1_y, pixel_control_ON);
 80021b8:	7d79      	ldrb	r1, [r7, #21]
 80021ba:	7dbb      	ldrb	r3, [r7, #22]
 80021bc:	2200      	movs	r2, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa66 	bl	8001690 <oled_Draw_Pixel>
			return 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e05d      	b.n	8002284 <oled_Draw_rectangle+0x466>
		}
		if (p1_x == p3_x)
 80021c8:	7dba      	ldrb	r2, [r7, #22]
 80021ca:	7cbb      	ldrb	r3, [r7, #18]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d109      	bne.n	80021e4 <oled_Draw_rectangle+0x3c6>
		{
			oled_Draw_Line(p1_x, p1_y, p2_x, p2_y, line_width_slim);
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	7d3a      	ldrb	r2, [r7, #20]
 80021d4:	7d79      	ldrb	r1, [r7, #21]
 80021d6:	7db8      	ldrb	r0, [r7, #22]
 80021d8:	2401      	movs	r4, #1
 80021da:	9400      	str	r4, [sp, #0]
 80021dc:	f7ff fb0a 	bl	80017f4 <oled_Draw_Line>
			return 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e04f      	b.n	8002284 <oled_Draw_rectangle+0x466>
		}
		if (p1_y == p2_y)
 80021e4:	7d7a      	ldrb	r2, [r7, #21]
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d109      	bne.n	8002200 <oled_Draw_rectangle+0x3e2>
		{
			oled_Draw_Line(p1_x, p1_y, p3_x, p3_y, line_width_slim);
 80021ec:	7c7b      	ldrb	r3, [r7, #17]
 80021ee:	7cba      	ldrb	r2, [r7, #18]
 80021f0:	7d79      	ldrb	r1, [r7, #21]
 80021f2:	7db8      	ldrb	r0, [r7, #22]
 80021f4:	2401      	movs	r4, #1
 80021f6:	9400      	str	r4, [sp, #0]
 80021f8:	f7ff fafc 	bl	80017f4 <oled_Draw_Line>
			return 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e041      	b.n	8002284 <oled_Draw_rectangle+0x466>
		}

		// Fill remaining pixels
		uint8_t rows = p2_y - p1_y + 1;
 8002200:	7cfa      	ldrb	r2, [r7, #19]
 8002202:	7d7b      	ldrb	r3, [r7, #21]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	72bb      	strb	r3, [r7, #10]
		uint8_t cols = p3_x - p1_x + 1;
 800220c:	7cba      	ldrb	r2, [r7, #18]
 800220e:	7dbb      	ldrb	r3, [r7, #22]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	727b      	strb	r3, [r7, #9]
		if (rows <= cols)
 8002218:	7aba      	ldrb	r2, [r7, #10]
 800221a:	7a7b      	ldrb	r3, [r7, #9]
 800221c:	429a      	cmp	r2, r3
 800221e:	d818      	bhi.n	8002252 <oled_Draw_rectangle+0x434>
		{
			for (uint8_t row = 0; row < rows; row++)
 8002220:	2300      	movs	r3, #0
 8002222:	73bb      	strb	r3, [r7, #14]
 8002224:	e010      	b.n	8002248 <oled_Draw_rectangle+0x42a>
			{
				oled_Draw_Line(p1_x, p1_y + row, p3_x, p1_y + row, line_width_slim);
 8002226:	7d7a      	ldrb	r2, [r7, #21]
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	4413      	add	r3, r2
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	7d7a      	ldrb	r2, [r7, #21]
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	4413      	add	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	7cba      	ldrb	r2, [r7, #18]
 8002238:	7db8      	ldrb	r0, [r7, #22]
 800223a:	2401      	movs	r4, #1
 800223c:	9400      	str	r4, [sp, #0]
 800223e:	f7ff fad9 	bl	80017f4 <oled_Draw_Line>
			for (uint8_t row = 0; row < rows; row++)
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	3301      	adds	r3, #1
 8002246:	73bb      	strb	r3, [r7, #14]
 8002248:	7bba      	ldrb	r2, [r7, #14]
 800224a:	7abb      	ldrb	r3, [r7, #10]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3ea      	bcc.n	8002226 <oled_Draw_rectangle+0x408>
 8002250:	e017      	b.n	8002282 <oled_Draw_rectangle+0x464>
			}
		}
		// numbers of rows more than cols
		else
		{
			for (uint8_t col = 0; col < cols; col++)
 8002252:	2300      	movs	r3, #0
 8002254:	737b      	strb	r3, [r7, #13]
 8002256:	e010      	b.n	800227a <oled_Draw_rectangle+0x45c>
			{
				oled_Draw_Line(p1_x + col, p1_y, p1_x + col, p2_y, line_width_slim);
 8002258:	7dba      	ldrb	r2, [r7, #22]
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	4413      	add	r3, r2
 800225e:	b2d8      	uxtb	r0, r3
 8002260:	7dba      	ldrb	r2, [r7, #22]
 8002262:	7b7b      	ldrb	r3, [r7, #13]
 8002264:	4413      	add	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	7d79      	ldrb	r1, [r7, #21]
 800226c:	2401      	movs	r4, #1
 800226e:	9400      	str	r4, [sp, #0]
 8002270:	f7ff fac0 	bl	80017f4 <oled_Draw_Line>
			for (uint8_t col = 0; col < cols; col++)
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	3301      	adds	r3, #1
 8002278:	737b      	strb	r3, [r7, #13]
 800227a:	7b7a      	ldrb	r2, [r7, #13]
 800227c:	7a7b      	ldrb	r3, [r7, #9]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3ea      	bcc.n	8002258 <oled_Draw_rectangle+0x43a>
			}
		}
	}

	return 0;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}

0800228c <oled_Draw_Circular_Arc>:
uint8_t	oled_Draw_Circular_Arc (
		uint8_t cxo, uint8_t cyo,
		uint8_t radius,
		float startAngle, float endAngle,
		line_width_t line_width)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	ed2d 8b02 	vpush	{d8}
 8002292:	b093      	sub	sp, #76	; 0x4c
 8002294:	af02      	add	r7, sp, #8
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	ed87 0a02 	vstr	s0, [r7, #8]
 80022a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	4603      	mov	r3, r0
 80022ac:	73bb      	strb	r3, [r7, #14]
 80022ae:	460b      	mov	r3, r1
 80022b0:	737b      	strb	r3, [r7, #13]
 80022b2:	4613      	mov	r3, r2
 80022b4:	733b      	strb	r3, [r7, #12]
	if (cxo < 0 || cxo > 127 || cyo < 0 || cyo > 63 || radius == 0)
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db05      	blt.n	80022ca <oled_Draw_Circular_Arc+0x3e>
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	2b3f      	cmp	r3, #63	; 0x3f
 80022c2:	d802      	bhi.n	80022ca <oled_Draw_Circular_Arc+0x3e>
 80022c4:	7b7b      	ldrb	r3, [r7, #13]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <oled_Draw_Circular_Arc+0x42>
		return 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e23b      	b.n	8002746 <oled_Draw_Circular_Arc+0x4ba>

	/* if start angle equal end angle, draw a circle */
	if (startAngle == endAngle)
 80022ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80022d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	d10c      	bne.n	80022fa <oled_Draw_Circular_Arc+0x6e>
	{
		oled_Draw_Ellipse(cxo, cyo, radius, radius, line_width, graphic_fill_hollow);
 80022e0:	7b7c      	ldrb	r4, [r7, #13]
 80022e2:	7b7a      	ldrb	r2, [r7, #13]
 80022e4:	7bb9      	ldrb	r1, [r7, #14]
 80022e6:	7bf8      	ldrb	r0, [r7, #15]
 80022e8:	2301      	movs	r3, #1
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	7b3b      	ldrb	r3, [r7, #12]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4623      	mov	r3, r4
 80022f2:	f000 fbe3 	bl	8002abc <oled_Draw_Ellipse>
		return 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e225      	b.n	8002746 <oled_Draw_Circular_Arc+0x4ba>
	}

	uint8_t	r = radius;
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float startDeg = startAngle, endDeg = endAngle;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
	if (startAngle > endAngle)
 8002308:	ed97 7a02 	vldr	s14, [r7, #8]
 800230c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd05      	ble.n	8002326 <oled_Draw_Circular_Arc+0x9a>
	{
		float temp_s_angle = startAngle;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	623b      	str	r3, [r7, #32]
		startDeg = endAngle;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
		endDeg = temp_s_angle;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	float curRad = 0.0f;
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
	float curX = 0.0f, curY = 0.0f;
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

	// draw arc frame	slim
	for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 8002338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
 800233c:	e066      	b.n	800240c <oled_Draw_Circular_Arc+0x180>
	{
		curRad = curDeg * acosf(0) * 1/90.0f;
 800233e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002342:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002654 <oled_Draw_Circular_Arc+0x3c8>
 8002346:	ee27 7a87 	vmul.f32	s14, s15, s14
 800234a:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8002658 <oled_Draw_Circular_Arc+0x3cc>
 800234e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002352:	edc7 7a07 	vstr	s15, [r7, #28]
		curX = r * 1.0f * cosf(curRad) + cxo;
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002362:	ed97 0a07 	vldr	s0, [r7, #28]
 8002366:	f006 fcfd 	bl	8008d64 <cosf>
 800236a:	eef0 7a40 	vmov.f32	s15, s0
 800236e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	edc7 7a06 	vstr	s15, [r7, #24]
		curY = r * 1.0f * sinf(curRad)	+ cyo;
 8002384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002390:	ed97 0a07 	vldr	s0, [r7, #28]
 8002394:	f006 fd26 	bl	8008de4 <sinf>
 8002398:	eef0 7a40 	vmov.f32	s15, s0
 800239c:	ee28 7a27 	vmul.f32	s14, s16, s15
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	edc7 7a05 	vstr	s15, [r7, #20]

		oled_Draw_Pixel((uint8_t)(curX+0.5), (uint8_t)(curY+0.5), pixel_control_ON);
 80023b2:	69b8      	ldr	r0, [r7, #24]
 80023b4:	f7fe f8d0 	bl	8000558 <__aeabi_f2d>
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4ba4      	ldr	r3, [pc, #656]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80023be:	f7fd ff6d 	bl	800029c <__adddf3>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe f91d 	bl	8000608 <__aeabi_d2uiz>
 80023ce:	4603      	mov	r3, r0
 80023d0:	b2dc      	uxtb	r4, r3
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7fe f8c0 	bl	8000558 <__aeabi_f2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b9c      	ldr	r3, [pc, #624]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80023de:	f7fd ff5d 	bl	800029c <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe f90d 	bl	8000608 <__aeabi_d2uiz>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff f94a 	bl	8001690 <oled_Draw_Pixel>
	for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 80023fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002408:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800240c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002410:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d98f      	bls.n	800233e <oled_Draw_Circular_Arc+0xb2>
	}

	// draw medium and bold line, circle arc
	switch (line_width) {
 800241e:	7b3b      	ldrb	r3, [r7, #12]
 8002420:	2b03      	cmp	r3, #3
 8002422:	f000 8088 	beq.w	8002536 <oled_Draw_Circular_Arc+0x2aa>
 8002426:	2b03      	cmp	r3, #3
 8002428:	f300 8189 	bgt.w	800273e <oled_Draw_Circular_Arc+0x4b2>
 800242c:	2b01      	cmp	r3, #1
 800242e:	f000 8188 	beq.w	8002742 <oled_Draw_Circular_Arc+0x4b6>
 8002432:	2b02      	cmp	r3, #2
 8002434:	d000      	beq.n	8002438 <oled_Draw_Circular_Arc+0x1ac>
				oled_Draw_Pixel((uint8_t)(curX+0.5), (uint8_t)(curY+0.5), pixel_control_ON);
			}

			break;
		default:
			break;
 8002436:	e182      	b.n	800273e <oled_Draw_Circular_Arc+0x4b2>
			r -= 1;
 8002438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800243c:	3b01      	subs	r3, #1
 800243e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (r == 0)
 8002442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <oled_Draw_Circular_Arc+0x1c2>
				return 0;
 800244a:	2300      	movs	r3, #0
 800244c:	e17b      	b.n	8002746 <oled_Draw_Circular_Arc+0x4ba>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 8002452:	e066      	b.n	8002522 <oled_Draw_Circular_Arc+0x296>
				curRad = curDeg * acosf(0) * 1/90.0f;
 8002454:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002458:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002654 <oled_Draw_Circular_Arc+0x3c8>
 800245c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002460:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8002658 <oled_Draw_Circular_Arc+0x3cc>
 8002464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002468:	edc7 7a07 	vstr	s15, [r7, #28]
				curX = r * 1.0f * cosf(curRad) +  cxo;
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002478:	ed97 0a07 	vldr	s0, [r7, #28]
 800247c:	f006 fc72 	bl	8008d64 <cosf>
 8002480:	eef0 7a40 	vmov.f32	s15, s0
 8002484:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	edc7 7a06 	vstr	s15, [r7, #24]
				curY = r * 1.0f * sinf(curRad)	+ cyo;
 800249a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80024a6:	ed97 0a07 	vldr	s0, [r7, #28]
 80024aa:	f006 fc9b 	bl	8008de4 <sinf>
 80024ae:	eef0 7a40 	vmov.f32	s15, s0
 80024b2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80024b6:	7bbb      	ldrb	r3, [r7, #14]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	edc7 7a05 	vstr	s15, [r7, #20]
				oled_Draw_Pixel((uint8_t)(curX+0.5), (uint8_t)(curY+0.5), pixel_control_ON);
 80024c8:	69b8      	ldr	r0, [r7, #24]
 80024ca:	f7fe f845 	bl	8000558 <__aeabi_f2d>
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80024d4:	f7fd fee2 	bl	800029c <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe f892 	bl	8000608 <__aeabi_d2uiz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b2dc      	uxtb	r4, r3
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7fe f835 	bl	8000558 <__aeabi_f2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b57      	ldr	r3, [pc, #348]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80024f4:	f7fd fed2 	bl	800029c <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe f882 	bl	8000608 <__aeabi_d2uiz>
 8002504:	4603      	mov	r3, r0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff f8bf 	bl	8001690 <oled_Draw_Pixel>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 8002512:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800251a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800251e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002522:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002526:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d98f      	bls.n	8002454 <oled_Draw_Circular_Arc+0x1c8>
			break;
 8002534:	e106      	b.n	8002744 <oled_Draw_Circular_Arc+0x4b8>
			r -= 1;
 8002536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800253a:	3b01      	subs	r3, #1
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (r == 0)
 8002540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <oled_Draw_Circular_Arc+0x2c0>
				return 0;
 8002548:	2300      	movs	r3, #0
 800254a:	e0fc      	b.n	8002746 <oled_Draw_Circular_Arc+0x4ba>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002550:	e066      	b.n	8002620 <oled_Draw_Circular_Arc+0x394>
				curRad = curDeg * acosf(0) * 1/90.0f;
 8002552:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002556:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002654 <oled_Draw_Circular_Arc+0x3c8>
 800255a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800255e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002658 <oled_Draw_Circular_Arc+0x3cc>
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	edc7 7a07 	vstr	s15, [r7, #28]
				curX = r * 1.0f * cosf(curRad) +  cxo;
 800256a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002576:	ed97 0a07 	vldr	s0, [r7, #28]
 800257a:	f006 fbf3 	bl	8008d64 <cosf>
 800257e:	eef0 7a40 	vmov.f32	s15, s0
 8002582:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	edc7 7a06 	vstr	s15, [r7, #24]
				curY = r * 1.0f * sinf(curRad)	+ cyo;
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80025a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80025a8:	f006 fc1c 	bl	8008de4 <sinf>
 80025ac:	eef0 7a40 	vmov.f32	s15, s0
 80025b0:	ee28 7a27 	vmul.f32	s14, s16, s15
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c2:	edc7 7a05 	vstr	s15, [r7, #20]
				oled_Draw_Pixel((uint8_t)(curX+0.5), (uint8_t)(curY+0.5), pixel_control_ON);
 80025c6:	69b8      	ldr	r0, [r7, #24]
 80025c8:	f7fd ffc6 	bl	8000558 <__aeabi_f2d>
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80025d2:	f7fd fe63 	bl	800029c <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe f813 	bl	8000608 <__aeabi_d2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b2dc      	uxtb	r4, r3
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7fd ffb6 	bl	8000558 <__aeabi_f2d>
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <oled_Draw_Circular_Arc+0x3c4>)
 80025f2:	f7fd fe53 	bl	800029c <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe f803 	bl	8000608 <__aeabi_d2uiz>
 8002602:	4603      	mov	r3, r0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2200      	movs	r2, #0
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff f840 	bl	8001690 <oled_Draw_Pixel>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 8002610:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002620:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002624:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d98f      	bls.n	8002552 <oled_Draw_Circular_Arc+0x2c6>
			r -= 1;
 8002632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002636:	3b01      	subs	r3, #1
 8002638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (r == 0)
 800263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <oled_Draw_Circular_Arc+0x3bc>
				return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e07e      	b.n	8002746 <oled_Draw_Circular_Arc+0x4ba>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
 800264c:	e06d      	b.n	800272a <oled_Draw_Circular_Arc+0x49e>
 800264e:	bf00      	nop
 8002650:	3fe00000 	.word	0x3fe00000
 8002654:	3fc90fdb 	.word	0x3fc90fdb
 8002658:	42b40000 	.word	0x42b40000
				curRad = curDeg * acosf(0) * 1/90.0f;
 800265c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002660:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002654 <oled_Draw_Circular_Arc+0x3c8>
 8002664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002668:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8002658 <oled_Draw_Circular_Arc+0x3cc>
 800266c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002670:	edc7 7a07 	vstr	s15, [r7, #28]
				curX = r * 1.0f * cosf(curRad) +  cxo;
 8002674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002680:	ed97 0a07 	vldr	s0, [r7, #28]
 8002684:	f006 fb6e 	bl	8008d64 <cosf>
 8002688:	eef0 7a40 	vmov.f32	s15, s0
 800268c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269e:	edc7 7a06 	vstr	s15, [r7, #24]
				curY = r * 1.0f * sinf(curRad)	+ cyo;
 80026a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80026ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80026b2:	f006 fb97 	bl	8008de4 <sinf>
 80026b6:	eef0 7a40 	vmov.f32	s15, s0
 80026ba:	ee28 7a27 	vmul.f32	s14, s16, s15
 80026be:	7bbb      	ldrb	r3, [r7, #14]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	edc7 7a05 	vstr	s15, [r7, #20]
				oled_Draw_Pixel((uint8_t)(curX+0.5), (uint8_t)(curY+0.5), pixel_control_ON);
 80026d0:	69b8      	ldr	r0, [r7, #24]
 80026d2:	f7fd ff41 	bl	8000558 <__aeabi_f2d>
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <oled_Draw_Circular_Arc+0x4c8>)
 80026dc:	f7fd fdde 	bl	800029c <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fd ff8e 	bl	8000608 <__aeabi_d2uiz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b2dc      	uxtb	r4, r3
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f7fd ff31 	bl	8000558 <__aeabi_f2d>
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <oled_Draw_Circular_Arc+0x4c8>)
 80026fc:	f7fd fdce 	bl	800029c <__adddf3>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fd ff7e 	bl	8000608 <__aeabi_d2uiz>
 800270c:	4603      	mov	r3, r0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	4620      	mov	r0, r4
 8002716:	f7fe ffbb 	bl	8001690 <oled_Draw_Pixel>
			for ( float curDeg = startDeg; curDeg <= endDeg; curDeg++ )
 800271a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800271e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002726:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800272a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800272e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	d98f      	bls.n	800265c <oled_Draw_Circular_Arc+0x3d0>
			break;
 800273c:	e002      	b.n	8002744 <oled_Draw_Circular_Arc+0x4b8>
			break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <oled_Draw_Circular_Arc+0x4b8>
			break;
 8002742:	bf00      	nop
	}

	return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3744      	adds	r7, #68	; 0x44
 800274a:	46bd      	mov	sp, r7
 800274c:	ecbd 8b02 	vpop	{d8}
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	bf00      	nop
 8002754:	3fe00000 	.word	0x3fe00000

08002758 <oled_Draw_Round_Rectangle>:
uint8_t oled_Draw_Round_Rectangle(
		uint8_t x0, uint8_t y0,
		uint8_t x1, uint8_t y1,
		uint8_t radius,
		line_width_t line_width)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b087      	sub	sp, #28
 800275c:	af02      	add	r7, sp, #8
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4623      	mov	r3, r4
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	4603      	mov	r3, r0
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	460b      	mov	r3, r1
 8002770:	717b      	strb	r3, [r7, #5]
 8002772:	4613      	mov	r3, r2
 8002774:	713b      	strb	r3, [r7, #4]
	if (x0 == x1 || y0 == y1)
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	797b      	ldrb	r3, [r7, #5]
 800277a:	429a      	cmp	r2, r3
 800277c:	d003      	beq.n	8002786 <oled_Draw_Round_Rectangle+0x2e>
 800277e:	79ba      	ldrb	r2, [r7, #6]
 8002780:	793b      	ldrb	r3, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d101      	bne.n	800278a <oled_Draw_Round_Rectangle+0x32>
		return 1;
 8002786:	2301      	movs	r3, #1
 8002788:	e189      	b.n	8002a9e <oled_Draw_Round_Rectangle+0x346>

	// Whether the rectangle needs to fill the flag
	//	1:need	0:don't need
	uint8_t rectNeedFillFlag = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	737b      	strb	r3, [r7, #13]

	if (x0 > x1)
 800278e:	79fa      	ldrb	r2, [r7, #7]
 8002790:	797b      	ldrb	r3, [r7, #5]
 8002792:	429a      	cmp	r2, r3
 8002794:	d905      	bls.n	80027a2 <oled_Draw_Round_Rectangle+0x4a>
	{
		uint8_t temp_x_0 = x0;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	733b      	strb	r3, [r7, #12]
		x0 = x1;	x1 = temp_x_0;
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	7b3b      	ldrb	r3, [r7, #12]
 80027a0:	717b      	strb	r3, [r7, #5]
	}
	if (y0 > y1)
 80027a2:	79ba      	ldrb	r2, [r7, #6]
 80027a4:	793b      	ldrb	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d905      	bls.n	80027b6 <oled_Draw_Round_Rectangle+0x5e>
	{
		uint8_t temp_y_0 = y0;
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	72fb      	strb	r3, [r7, #11]
		y0 = y1;	y1 = temp_y_0;
 80027ae:	793b      	ldrb	r3, [r7, #4]
 80027b0:	71bb      	strb	r3, [r7, #6]
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	713b      	strb	r3, [r7, #4]
	}

	// rectangle width and height
	uint8_t rect_W	=	x1 - x0+1;
 80027b6:	797a      	ldrb	r2, [r7, #5]
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	72bb      	strb	r3, [r7, #10]
	uint8_t rect_H	=	y1 - y0+1;
 80027c2:	793a      	ldrb	r2, [r7, #4]
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	727b      	strb	r3, [r7, #9]
	uint8_t minVal = rect_W;
 80027ce:	7abb      	ldrb	r3, [r7, #10]
 80027d0:	73fb      	strb	r3, [r7, #15]
	uint8_t r = radius;
 80027d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027d6:	73bb      	strb	r3, [r7, #14]
//	uint8_t r_rem = 0;
//	uint8_t store_x0 = x0, store_y0 = y0;
//	uint8_t store_x1 = x1, sotre_y1 = y1;

	if (rect_W > rect_H)	minVal = rect_H;
 80027d8:	7aba      	ldrb	r2, [r7, #10]
 80027da:	7a7b      	ldrb	r3, [r7, #9]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d901      	bls.n	80027e4 <oled_Draw_Round_Rectangle+0x8c>
 80027e0:	7a7b      	ldrb	r3, [r7, #9]
 80027e2:	73fb      	strb	r3, [r7, #15]

	// ensure radius value Reasonable
	if (2*r >= minVal)
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	005a      	lsls	r2, r3, #1
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	db02      	blt.n	80027f4 <oled_Draw_Round_Rectangle+0x9c>
		r = minVal / 2;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	73bb      	strb	r3, [r7, #14]


	// left top
	oled_Draw_Circular_Arc(x0+r, y0+r, r, 180, 270, line_width);
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	4413      	add	r3, r2
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	79ba      	ldrb	r2, [r7, #6]
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
 8002800:	4413      	add	r3, r2
 8002802:	b2d9      	uxtb	r1, r3
 8002804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002808:	7bba      	ldrb	r2, [r7, #14]
 800280a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 8002aa8 <oled_Draw_Round_Rectangle+0x350>
 800280e:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8002aac <oled_Draw_Round_Rectangle+0x354>
 8002812:	f7ff fd3b 	bl	800228c <oled_Draw_Circular_Arc>
	// right top
	oled_Draw_Circular_Arc(x1-r, y0+r, r, -90,   0, line_width);
 8002816:	797a      	ldrb	r2, [r7, #5]
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b2d8      	uxtb	r0, r3
 800281e:	79ba      	ldrb	r2, [r7, #6]
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	4413      	add	r3, r2
 8002824:	b2d9      	uxtb	r1, r3
 8002826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800282a:	7bba      	ldrb	r2, [r7, #14]
 800282c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8002ab0 <oled_Draw_Round_Rectangle+0x358>
 8002830:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8002ab4 <oled_Draw_Round_Rectangle+0x35c>
 8002834:	f7ff fd2a 	bl	800228c <oled_Draw_Circular_Arc>
	// left bottom
	oled_Draw_Circular_Arc(x0+r, y1-r, r,  90, 180, line_width);
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	4413      	add	r3, r2
 800283e:	b2d8      	uxtb	r0, r3
 8002840:	793a      	ldrb	r2, [r7, #4]
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800284c:	7bba      	ldrb	r2, [r7, #14]
 800284e:	eddf 0a97 	vldr	s1, [pc, #604]	; 8002aac <oled_Draw_Round_Rectangle+0x354>
 8002852:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8002ab8 <oled_Draw_Round_Rectangle+0x360>
 8002856:	f7ff fd19 	bl	800228c <oled_Draw_Circular_Arc>
	// right bottom
	oled_Draw_Circular_Arc(x1-r, y1-r, r,   0,  90, line_width);
 800285a:	797a      	ldrb	r2, [r7, #5]
 800285c:	7bbb      	ldrb	r3, [r7, #14]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b2d8      	uxtb	r0, r3
 8002862:	793a      	ldrb	r2, [r7, #4]
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b2d9      	uxtb	r1, r3
 800286a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800286e:	7bba      	ldrb	r2, [r7, #14]
 8002870:	eddf 0a91 	vldr	s1, [pc, #580]	; 8002ab8 <oled_Draw_Round_Rectangle+0x360>
 8002874:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8002ab0 <oled_Draw_Round_Rectangle+0x358>
 8002878:	f7ff fd08 	bl	800228c <oled_Draw_Circular_Arc>

	oled_Draw_Line(x0+r, y0, x1-r, y0, line_width_slim);
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	4413      	add	r3, r2
 8002882:	b2d8      	uxtb	r0, r3
 8002884:	797a      	ldrb	r2, [r7, #5]
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	79b9      	ldrb	r1, [r7, #6]
 8002890:	2401      	movs	r4, #1
 8002892:	9400      	str	r4, [sp, #0]
 8002894:	f7fe ffae 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(x0, y0+r, x0, y1-r, line_width_slim);
 8002898:	79ba      	ldrb	r2, [r7, #6]
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	4413      	add	r3, r2
 800289e:	b2d9      	uxtb	r1, r3
 80028a0:	793a      	ldrb	r2, [r7, #4]
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	79f8      	ldrb	r0, [r7, #7]
 80028ac:	2401      	movs	r4, #1
 80028ae:	9400      	str	r4, [sp, #0]
 80028b0:	f7fe ffa0 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(x0+r, y1, x1-r, y1, line_width_slim);
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	7bbb      	ldrb	r3, [r7, #14]
 80028b8:	4413      	add	r3, r2
 80028ba:	b2d8      	uxtb	r0, r3
 80028bc:	797a      	ldrb	r2, [r7, #5]
 80028be:	7bbb      	ldrb	r3, [r7, #14]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	793b      	ldrb	r3, [r7, #4]
 80028c6:	7939      	ldrb	r1, [r7, #4]
 80028c8:	2401      	movs	r4, #1
 80028ca:	9400      	str	r4, [sp, #0]
 80028cc:	f7fe ff92 	bl	80017f4 <oled_Draw_Line>
	oled_Draw_Line(x1, y0+r, x1, y1-r, line_width_slim);
 80028d0:	79ba      	ldrb	r2, [r7, #6]
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	4413      	add	r3, r2
 80028d6:	b2d9      	uxtb	r1, r3
 80028d8:	793a      	ldrb	r2, [r7, #4]
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	797a      	ldrb	r2, [r7, #5]
 80028e2:	7978      	ldrb	r0, [r7, #5]
 80028e4:	2401      	movs	r4, #1
 80028e6:	9400      	str	r4, [sp, #0]
 80028e8:	f7fe ff84 	bl	80017f4 <oled_Draw_Line>
	x0 += 1;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	3301      	adds	r3, #1
 80028f0:	71fb      	strb	r3, [r7, #7]
	x1 -= 1;
 80028f2:	797b      	ldrb	r3, [r7, #5]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	717b      	strb	r3, [r7, #5]
	y0 += 1;
 80028f8:	79bb      	ldrb	r3, [r7, #6]
 80028fa:	3301      	adds	r3, #1
 80028fc:	71bb      	strb	r3, [r7, #6]
	y1 -= 1;
 80028fe:	793b      	ldrb	r3, [r7, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	713b      	strb	r3, [r7, #4]
	if (line_width == line_width_medium)
 8002904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002908:	2b02      	cmp	r3, #2
 800290a:	d137      	bne.n	800297c <oled_Draw_Round_Rectangle+0x224>
	{
		oled_Draw_Line(x0+r, y0, x1-r, y0, line_width_slim);
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	7bbb      	ldrb	r3, [r7, #14]
 8002910:	4413      	add	r3, r2
 8002912:	b2d8      	uxtb	r0, r3
 8002914:	797a      	ldrb	r2, [r7, #5]
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	b2da      	uxtb	r2, r3
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	79b9      	ldrb	r1, [r7, #6]
 8002920:	2401      	movs	r4, #1
 8002922:	9400      	str	r4, [sp, #0]
 8002924:	f7fe ff66 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0, y0+r, x0, y1-r, line_width_slim);
 8002928:	79ba      	ldrb	r2, [r7, #6]
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	4413      	add	r3, r2
 800292e:	b2d9      	uxtb	r1, r3
 8002930:	793a      	ldrb	r2, [r7, #4]
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	79f8      	ldrb	r0, [r7, #7]
 800293c:	2401      	movs	r4, #1
 800293e:	9400      	str	r4, [sp, #0]
 8002940:	f7fe ff58 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0+r, y1, x1-r, y1, line_width_slim);
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	7bbb      	ldrb	r3, [r7, #14]
 8002948:	4413      	add	r3, r2
 800294a:	b2d8      	uxtb	r0, r3
 800294c:	797a      	ldrb	r2, [r7, #5]
 800294e:	7bbb      	ldrb	r3, [r7, #14]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b2da      	uxtb	r2, r3
 8002954:	793b      	ldrb	r3, [r7, #4]
 8002956:	7939      	ldrb	r1, [r7, #4]
 8002958:	2401      	movs	r4, #1
 800295a:	9400      	str	r4, [sp, #0]
 800295c:	f7fe ff4a 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x1, y0+r, x1, y1-r, line_width_slim);
 8002960:	79ba      	ldrb	r2, [r7, #6]
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	4413      	add	r3, r2
 8002966:	b2d9      	uxtb	r1, r3
 8002968:	793a      	ldrb	r2, [r7, #4]
 800296a:	7bbb      	ldrb	r3, [r7, #14]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	797a      	ldrb	r2, [r7, #5]
 8002972:	7978      	ldrb	r0, [r7, #5]
 8002974:	2401      	movs	r4, #1
 8002976:	9400      	str	r4, [sp, #0]
 8002978:	f7fe ff3c 	bl	80017f4 <oled_Draw_Line>
	}
	if (line_width == line_width_bold)
 800297c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002980:	2b03      	cmp	r3, #3
 8002982:	f040 808c 	bne.w	8002a9e <oled_Draw_Round_Rectangle+0x346>
	{
		oled_Draw_Line(x0+r, y0, x1-r, y0, line_width_slim);
 8002986:	79fa      	ldrb	r2, [r7, #7]
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	4413      	add	r3, r2
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	797a      	ldrb	r2, [r7, #5]
 8002990:	7bbb      	ldrb	r3, [r7, #14]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b2da      	uxtb	r2, r3
 8002996:	79bb      	ldrb	r3, [r7, #6]
 8002998:	79b9      	ldrb	r1, [r7, #6]
 800299a:	2401      	movs	r4, #1
 800299c:	9400      	str	r4, [sp, #0]
 800299e:	f7fe ff29 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0, y0+r, x0, y1-r, line_width_slim);
 80029a2:	79ba      	ldrb	r2, [r7, #6]
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	4413      	add	r3, r2
 80029a8:	b2d9      	uxtb	r1, r3
 80029aa:	793a      	ldrb	r2, [r7, #4]
 80029ac:	7bbb      	ldrb	r3, [r7, #14]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	79fa      	ldrb	r2, [r7, #7]
 80029b4:	79f8      	ldrb	r0, [r7, #7]
 80029b6:	2401      	movs	r4, #1
 80029b8:	9400      	str	r4, [sp, #0]
 80029ba:	f7fe ff1b 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0+r, y1, x1-r, y1, line_width_slim);
 80029be:	79fa      	ldrb	r2, [r7, #7]
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
 80029c2:	4413      	add	r3, r2
 80029c4:	b2d8      	uxtb	r0, r3
 80029c6:	797a      	ldrb	r2, [r7, #5]
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	793b      	ldrb	r3, [r7, #4]
 80029d0:	7939      	ldrb	r1, [r7, #4]
 80029d2:	2401      	movs	r4, #1
 80029d4:	9400      	str	r4, [sp, #0]
 80029d6:	f7fe ff0d 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x1, y0+r, x1, y1-r, line_width_slim);
 80029da:	79ba      	ldrb	r2, [r7, #6]
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	4413      	add	r3, r2
 80029e0:	b2d9      	uxtb	r1, r3
 80029e2:	793a      	ldrb	r2, [r7, #4]
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	797a      	ldrb	r2, [r7, #5]
 80029ec:	7978      	ldrb	r0, [r7, #5]
 80029ee:	2401      	movs	r4, #1
 80029f0:	9400      	str	r4, [sp, #0]
 80029f2:	f7fe feff 	bl	80017f4 <oled_Draw_Line>
		x0 += 1;
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	3301      	adds	r3, #1
 80029fa:	71fb      	strb	r3, [r7, #7]
		x1 -= 1;
 80029fc:	797b      	ldrb	r3, [r7, #5]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	717b      	strb	r3, [r7, #5]
		y0 += 1;
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	3301      	adds	r3, #1
 8002a06:	71bb      	strb	r3, [r7, #6]
		y1 -= 1;
 8002a08:	793b      	ldrb	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	713b      	strb	r3, [r7, #4]
		oled_Draw_Line(x0+r-1, y0, x1-r+1, y0, line_width_slim);
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	4413      	add	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b2d8      	uxtb	r0, r3
 8002a1a:	797a      	ldrb	r2, [r7, #5]
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	79b9      	ldrb	r1, [r7, #6]
 8002a2a:	2401      	movs	r4, #1
 8002a2c:	9400      	str	r4, [sp, #0]
 8002a2e:	f7fe fee1 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0, y0+r-1, x0, y1-r+1, line_width_slim);
 8002a32:	79ba      	ldrb	r2, [r7, #6]
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	4413      	add	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b2d9      	uxtb	r1, r3
 8002a3e:	793a      	ldrb	r2, [r7, #4]
 8002a40:	7bbb      	ldrb	r3, [r7, #14]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	79f8      	ldrb	r0, [r7, #7]
 8002a4e:	2401      	movs	r4, #1
 8002a50:	9400      	str	r4, [sp, #0]
 8002a52:	f7fe fecf 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x0+r-1, y1, x1-r+1, y1, line_width_slim);
 8002a56:	79fa      	ldrb	r2, [r7, #7]
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	797a      	ldrb	r2, [r7, #5]
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	793b      	ldrb	r3, [r7, #4]
 8002a70:	7939      	ldrb	r1, [r7, #4]
 8002a72:	2401      	movs	r4, #1
 8002a74:	9400      	str	r4, [sp, #0]
 8002a76:	f7fe febd 	bl	80017f4 <oled_Draw_Line>
		oled_Draw_Line(x1, y0+r-1, x1, y1-r+1, line_width_slim);
 8002a7a:	79ba      	ldrb	r2, [r7, #6]
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b2d9      	uxtb	r1, r3
 8002a86:	793a      	ldrb	r2, [r7, #4]
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	7978      	ldrb	r0, [r7, #5]
 8002a96:	2401      	movs	r4, #1
 8002a98:	9400      	str	r4, [sp, #0]
 8002a9a:	f7fe feab 	bl	80017f4 <oled_Draw_Line>
//	uint8_t p2_x = x0, p2_y = y1;
//	// right-top point
//	uint8_t p3_x = x1, p3_y = y0;
//	// right-bottom point
//	uint8_t p4_x = x1, p4_y = y1;
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	43870000 	.word	0x43870000
 8002aac:	43340000 	.word	0x43340000
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	c2b40000 	.word	0xc2b40000
 8002ab8:	42b40000 	.word	0x42b40000

08002abc <oled_Draw_Ellipse>:
uint8_t oled_Draw_Ellipse (
		uint8_t cxo, uint8_t cyo,
		uint8_t a_x, uint8_t b_y,
		line_width_t line_width,
		graphic_fill_effect_t graphic_fill_effect)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	ed2d 8b02 	vpush	{d8}
 8002ac2:	b093      	sub	sp, #76	; 0x4c
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	71fb      	strb	r3, [r7, #7]
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71bb      	strb	r3, [r7, #6]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	717b      	strb	r3, [r7, #5]
 8002ada:	4613      	mov	r3, r2
 8002adc:	713b      	strb	r3, [r7, #4]
	if (cxo > 127 || cyo > 63)	return 1;
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db02      	blt.n	8002aec <oled_Draw_Ellipse+0x30>
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8002aea:	d901      	bls.n	8002af0 <oled_Draw_Ellipse+0x34>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e333      	b.n	8003158 <oled_Draw_Ellipse+0x69c>

	if (a_x == 0 || a_x > 127 || b_y == 0 || b_y > 63)	return 1;
 8002af0:	797b      	ldrb	r3, [r7, #5]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <oled_Draw_Ellipse+0x4e>
 8002af6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db05      	blt.n	8002b0a <oled_Draw_Ellipse+0x4e>
 8002afe:	793b      	ldrb	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <oled_Draw_Ellipse+0x4e>
 8002b04:	793b      	ldrb	r3, [r7, #4]
 8002b06:	2b3f      	cmp	r3, #63	; 0x3f
 8002b08:	d901      	bls.n	8002b0e <oled_Draw_Ellipse+0x52>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e324      	b.n	8003158 <oled_Draw_Ellipse+0x69c>

	// Whether the ellipse needs to fill the flag
	//	1:need	0:don't need
	uint8_t ellipseNeedFillFlag = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	uint8_t tempxo = cxo, tempyo = cyo, tempa = a_x, tempb = b_y;
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b1a:	79bb      	ldrb	r3, [r7, #6]
 8002b1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b20:	797b      	ldrb	r3, [r7, #5]
 8002b22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002b26:	793b      	ldrb	r3, [r7, #4]
 8002b28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	float tempx = 0, tempy = 0;
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]

	// Draw the outer circle of the ellipse, the thin line.
	for (float deg = 0; deg < 360; deg +=1) {
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b3e:	e068      	b.n	8002c12 <oled_Draw_Ellipse+0x156>
		float rad = deg * acosf(0) * (1/90.0f);
 8002b40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b44:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8002eac <oled_Draw_Ellipse+0x3f0>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8002eb0 <oled_Draw_Ellipse+0x3f4>
 8002b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b54:	edc7 7a02 	vstr	s15, [r7, #8]
		tempx = tempa * cosf(rad) + tempxo;
 8002b58:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002b64:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b68:	f006 f8fc 	bl	8008d64 <cosf>
 8002b6c:	eef0 7a40 	vmov.f32	s15, s0
 8002b70:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b84:	edc7 7a08 	vstr	s15, [r7, #32]
		tempy = tempb * sinf(rad) + tempyo;
 8002b88:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002b94:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b98:	f006 f924 	bl	8008de4 <sinf>
 8002b9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ba0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb4:	edc7 7a07 	vstr	s15, [r7, #28]

		oled_Draw_Pixel((uint8_t)(tempx + 0.5), (uint8_t)(tempy + 0.5), pixel_control_ON);
 8002bb8:	6a38      	ldr	r0, [r7, #32]
 8002bba:	f7fd fccd 	bl	8000558 <__aeabi_f2d>
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4bb8      	ldr	r3, [pc, #736]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002bc4:	f7fd fb6a 	bl	800029c <__adddf3>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd fd1a 	bl	8000608 <__aeabi_d2uiz>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b2dc      	uxtb	r4, r3
 8002bd8:	69f8      	ldr	r0, [r7, #28]
 8002bda:	f7fd fcbd 	bl	8000558 <__aeabi_f2d>
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4bb0      	ldr	r3, [pc, #704]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002be4:	f7fd fb5a 	bl	800029c <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f7fd fd0a 	bl	8000608 <__aeabi_d2uiz>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7fe fd47 	bl	8001690 <oled_Draw_Pixel>
	for (float deg = 0; deg < 360; deg +=1) {
 8002c02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c0e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8002c12:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c16:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002ea8 <oled_Draw_Ellipse+0x3ec>
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d48d      	bmi.n	8002b40 <oled_Draw_Ellipse+0x84>
	}

	// Different thicknesses of oval lines.
	switch (line_width) {
 8002c24:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	f000 8096 	beq.w	8002d5a <oled_Draw_Ellipse+0x29e>
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	f300 81b6 	bgt.w	8002fa0 <oled_Draw_Ellipse+0x4e4>
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f000 81b0 	beq.w	8002f9a <oled_Draw_Ellipse+0x4de>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	f040 81b0 	bne.w	8002fa0 <oled_Draw_Ellipse+0x4e4>
		case line_width_slim:
			break;
		case line_width_medium:
			tempa = tempa - 1;	tempb = tempb - 1;
 8002c40:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c44:	3b01      	subs	r3, #1
 8002c46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002c4a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (tempa == 0 || tempb == 0)
 8002c54:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <oled_Draw_Ellipse+0x1a8>
 8002c5c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <oled_Draw_Ellipse+0x1b0>
			{
				ellipseNeedFillFlag = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				break;
 8002c6a:	e199      	b.n	8002fa0 <oled_Draw_Ellipse+0x4e4>
			}

			for (float deg = 0; deg < 360; deg +=1) {
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	e068      	b.n	8002d46 <oled_Draw_Ellipse+0x28a>
				float rad = deg * acosf(0) * (1/90.0f);
 8002c74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c78:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002eac <oled_Draw_Ellipse+0x3f0>
 8002c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c80:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002eb0 <oled_Draw_Ellipse+0x3f4>
 8002c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c88:	edc7 7a04 	vstr	s15, [r7, #16]
				tempx = tempa * cosf(rad) + tempxo;
 8002c8c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002c98:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c9c:	f006 f862 	bl	8008d64 <cosf>
 8002ca0:	eef0 7a40 	vmov.f32	s15, s0
 8002ca4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb8:	edc7 7a08 	vstr	s15, [r7, #32]
				tempy = tempb * sinf(rad) + tempyo;
 8002cbc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002cc8:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ccc:	f006 f88a 	bl	8008de4 <sinf>
 8002cd0:	eef0 7a40 	vmov.f32	s15, s0
 8002cd4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	edc7 7a07 	vstr	s15, [r7, #28]

				oled_Draw_Pixel((uint8_t)(tempx + 0.5), (uint8_t)(tempy + 0.5), pixel_control_ON);
 8002cec:	6a38      	ldr	r0, [r7, #32]
 8002cee:	f7fd fc33 	bl	8000558 <__aeabi_f2d>
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002cf8:	f7fd fad0 	bl	800029c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd fc80 	bl	8000608 <__aeabi_d2uiz>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	b2dc      	uxtb	r4, r3
 8002d0c:	69f8      	ldr	r0, [r7, #28]
 8002d0e:	f7fd fc23 	bl	8000558 <__aeabi_f2d>
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002d18:	f7fd fac0 	bl	800029c <__adddf3>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7fd fc70 	bl	8000608 <__aeabi_d2uiz>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7fe fcad 	bl	8001690 <oled_Draw_Pixel>
			for (float deg = 0; deg < 360; deg +=1) {
 8002d36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d42:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8002d46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d4a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002ea8 <oled_Draw_Ellipse+0x3ec>
 8002d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	d48d      	bmi.n	8002c74 <oled_Draw_Ellipse+0x1b8>
			}

			break;
 8002d58:	e122      	b.n	8002fa0 <oled_Draw_Ellipse+0x4e4>
		case line_width_bold:
			tempa = tempa - 1;	tempb = tempb - 1;
 8002d5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002d64:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (tempa == 0 || tempb == 0)
 8002d6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8113 	beq.w	8002f9e <oled_Draw_Ellipse+0x4e2>
 8002d78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 810e 	beq.w	8002f9e <oled_Draw_Ellipse+0x4e2>
				break;

			for (float deg = 0; deg < 360; deg +=1) {
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
 8002d88:	e068      	b.n	8002e5c <oled_Draw_Ellipse+0x3a0>
				float rad = deg * acosf(0) * (1/90.0f);
 8002d8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d8e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002eac <oled_Draw_Ellipse+0x3f0>
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002eb0 <oled_Draw_Ellipse+0x3f4>
 8002d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9e:	edc7 7a05 	vstr	s15, [r7, #20]
				tempx = tempa * cosf(rad) + tempxo;
 8002da2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002dae:	ed97 0a05 	vldr	s0, [r7, #20]
 8002db2:	f005 ffd7 	bl	8008d64 <cosf>
 8002db6:	eef0 7a40 	vmov.f32	s15, s0
 8002dba:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dce:	edc7 7a08 	vstr	s15, [r7, #32]
				tempy = tempb * sinf(rad) + tempyo;
 8002dd2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002dde:	ed97 0a05 	vldr	s0, [r7, #20]
 8002de2:	f005 ffff 	bl	8008de4 <sinf>
 8002de6:	eef0 7a40 	vmov.f32	s15, s0
 8002dea:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002dee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	edc7 7a07 	vstr	s15, [r7, #28]

				oled_Draw_Pixel((uint8_t)(tempx + 0.5), (uint8_t)(tempy + 0.5), pixel_control_ON);
 8002e02:	6a38      	ldr	r0, [r7, #32]
 8002e04:	f7fd fba8 	bl	8000558 <__aeabi_f2d>
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002e0e:	f7fd fa45 	bl	800029c <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd fbf5 	bl	8000608 <__aeabi_d2uiz>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b2dc      	uxtb	r4, r3
 8002e22:	69f8      	ldr	r0, [r7, #28]
 8002e24:	f7fd fb98 	bl	8000558 <__aeabi_f2d>
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <oled_Draw_Ellipse+0x3e8>)
 8002e2e:	f7fd fa35 	bl	800029c <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fbe5 	bl	8000608 <__aeabi_d2uiz>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2200      	movs	r2, #0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7fe fc22 	bl	8001690 <oled_Draw_Pixel>
			for (float deg = 0; deg < 360; deg +=1) {
 8002e4c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e58:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002e5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e60:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ea8 <oled_Draw_Ellipse+0x3ec>
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	d48d      	bmi.n	8002d8a <oled_Draw_Ellipse+0x2ce>
			}

			// -------------------------------------------------------------------
			tempa = tempa - 1;	tempb = tempb - 1;
 8002e6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002e78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (tempa == 0 || tempb == 0)
 8002e82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <oled_Draw_Ellipse+0x3d6>
 8002e8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <oled_Draw_Ellipse+0x3de>
			{
				ellipseNeedFillFlag = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				break;
 8002e98:	e082      	b.n	8002fa0 <oled_Draw_Ellipse+0x4e4>
			}

			for (float deg = 0; deg < 360; deg +=1) {
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea0:	e071      	b.n	8002f86 <oled_Draw_Ellipse+0x4ca>
 8002ea2:	bf00      	nop
 8002ea4:	3fe00000 	.word	0x3fe00000
 8002ea8:	43b40000 	.word	0x43b40000
 8002eac:	3fc90fdb 	.word	0x3fc90fdb
 8002eb0:	3c360b61 	.word	0x3c360b61
				float rad = deg * acosf(0) * (1/90.0f);
 8002eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002eb8:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002eac <oled_Draw_Ellipse+0x3f0>
 8002ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002eb0 <oled_Draw_Ellipse+0x3f4>
 8002ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec8:	edc7 7a06 	vstr	s15, [r7, #24]
				tempx = tempa * cosf(rad) + tempxo;
 8002ecc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002ed8:	ed97 0a06 	vldr	s0, [r7, #24]
 8002edc:	f005 ff42 	bl	8008d64 <cosf>
 8002ee0:	eef0 7a40 	vmov.f32	s15, s0
 8002ee4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	edc7 7a08 	vstr	s15, [r7, #32]
				tempy = tempb * sinf(rad) + tempyo;
 8002efc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002f08:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f0c:	f005 ff6a 	bl	8008de4 <sinf>
 8002f10:	eef0 7a40 	vmov.f32	s15, s0
 8002f14:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	edc7 7a07 	vstr	s15, [r7, #28]

				oled_Draw_Pixel((uint8_t)(tempx + 0.5), (uint8_t)(tempy + 0.5), pixel_control_ON);
 8002f2c:	6a38      	ldr	r0, [r7, #32]
 8002f2e:	f7fd fb13 	bl	8000558 <__aeabi_f2d>
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <oled_Draw_Ellipse+0x6a8>)
 8002f38:	f7fd f9b0 	bl	800029c <__adddf3>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fb60 	bl	8000608 <__aeabi_d2uiz>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b2dc      	uxtb	r4, r3
 8002f4c:	69f8      	ldr	r0, [r7, #28]
 8002f4e:	f7fd fb03 	bl	8000558 <__aeabi_f2d>
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <oled_Draw_Ellipse+0x6a8>)
 8002f58:	f7fd f9a0 	bl	800029c <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fb50 	bl	8000608 <__aeabi_d2uiz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7fe fb8d 	bl	8001690 <oled_Draw_Pixel>
			for (float deg = 0; deg < 360; deg +=1) {
 8002f76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f82:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002f86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f8a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003168 <oled_Draw_Ellipse+0x6ac>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	d48d      	bmi.n	8002eb4 <oled_Draw_Ellipse+0x3f8>
			}

			break;
 8002f98:	e002      	b.n	8002fa0 <oled_Draw_Ellipse+0x4e4>
			break;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <oled_Draw_Ellipse+0x4e4>
	}

	// Fill inside the rectangle
	if ( (graphic_fill_effect == graphic_fill_solid) && (ellipseNeedFillFlag == 1) )
 8002f9e:	bf00      	nop
 8002fa0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 80d6 	bne.w	8003156 <oled_Draw_Ellipse+0x69a>
 8002faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 80d1 	bne.w	8003156 <oled_Draw_Ellipse+0x69a>
	{
		tempa = tempa - 1;	tempb = tempb - 1;
 8002fb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002fbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		do {
			if (tempa == 0 && tempb == 0)
 8002fc8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10d      	bne.n	8002fec <oled_Draw_Ellipse+0x530>
 8002fd0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <oled_Draw_Ellipse+0x530>
			{
				oled_Draw_Pixel(tempxo, tempyo, pixel_control_ON);
 8002fd8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fb54 	bl	8001690 <oled_Draw_Pixel>
				return 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e0b5      	b.n	8003158 <oled_Draw_Ellipse+0x69c>
			}

			if (tempa == 0)
 8002fec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <oled_Draw_Ellipse+0x564>
			{
				oled_Draw_Line(tempxo, tempyo-tempb, tempxo, tempyo+tempb, line_width_slim);
 8002ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ff8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b2d9      	uxtb	r1, r3
 8003000:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003004:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003008:	4413      	add	r3, r2
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003010:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003014:	2401      	movs	r4, #1
 8003016:	9400      	str	r4, [sp, #0]
 8003018:	f7fe fbec 	bl	80017f4 <oled_Draw_Line>
				return 0;
 800301c:	2300      	movs	r3, #0
 800301e:	e09b      	b.n	8003158 <oled_Draw_Ellipse+0x69c>
			}

			if (tempb == 0)
 8003020:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <oled_Draw_Ellipse+0x598>
			{
				oled_Draw_Line(tempxo-tempa, tempyo, tempxo+tempa, tempyo, line_width_slim);
 8003028:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800302c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b2d8      	uxtb	r0, r3
 8003034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003038:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800303c:	4413      	add	r3, r2
 800303e:	b2da      	uxtb	r2, r3
 8003040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003044:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003048:	2401      	movs	r4, #1
 800304a:	9400      	str	r4, [sp, #0]
 800304c:	f7fe fbd2 	bl	80017f4 <oled_Draw_Line>
				return 0;
 8003050:	2300      	movs	r3, #0
 8003052:	e081      	b.n	8003158 <oled_Draw_Ellipse+0x69c>
			}

			for (float deg = 0; deg < 360; deg +=1) {
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	e068      	b.n	800312e <oled_Draw_Ellipse+0x672>
				float rad = deg * acosf(0) * (1/90.0f);
 800305c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003060:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800316c <oled_Draw_Ellipse+0x6b0>
 8003064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003068:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003170 <oled_Draw_Ellipse+0x6b4>
 800306c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003070:	edc7 7a03 	vstr	s15, [r7, #12]
				tempx = tempa * cosf(rad) + tempxo;
 8003074:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003080:	ed97 0a03 	vldr	s0, [r7, #12]
 8003084:	f005 fe6e 	bl	8008d64 <cosf>
 8003088:	eef0 7a40 	vmov.f32	s15, s0
 800308c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a0:	edc7 7a08 	vstr	s15, [r7, #32]
				tempy = tempb * sinf(rad) + tempyo;
 80030a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80030b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80030b4:	f005 fe96 	bl	8008de4 <sinf>
 80030b8:	eef0 7a40 	vmov.f32	s15, s0
 80030bc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80030c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d0:	edc7 7a07 	vstr	s15, [r7, #28]

				oled_Draw_Pixel((uint8_t)(tempx + 0.5), (uint8_t)(tempy + 0.5), pixel_control_ON);
 80030d4:	6a38      	ldr	r0, [r7, #32]
 80030d6:	f7fd fa3f 	bl	8000558 <__aeabi_f2d>
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <oled_Draw_Ellipse+0x6a8>)
 80030e0:	f7fd f8dc 	bl	800029c <__adddf3>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f7fd fa8c 	bl	8000608 <__aeabi_d2uiz>
 80030f0:	4603      	mov	r3, r0
 80030f2:	b2dc      	uxtb	r4, r3
 80030f4:	69f8      	ldr	r0, [r7, #28]
 80030f6:	f7fd fa2f 	bl	8000558 <__aeabi_f2d>
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <oled_Draw_Ellipse+0x6a8>)
 8003100:	f7fd f8cc 	bl	800029c <__adddf3>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fa7c 	bl	8000608 <__aeabi_d2uiz>
 8003110:	4603      	mov	r3, r0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2200      	movs	r2, #0
 8003116:	4619      	mov	r1, r3
 8003118:	4620      	mov	r0, r4
 800311a:	f7fe fab9 	bl	8001690 <oled_Draw_Pixel>
			for (float deg = 0; deg < 360; deg +=1) {
 800311e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800312a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800312e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003132:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003168 <oled_Draw_Ellipse+0x6ac>
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d48d      	bmi.n	800305c <oled_Draw_Ellipse+0x5a0>
			}

			tempa = tempa - 1;	tempb = tempb - 1;
 8003140:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003144:	3b01      	subs	r3, #1
 8003146:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800314a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800314e:	3b01      	subs	r3, #1
 8003150:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (tempa == 0 && tempb == 0)
 8003154:	e738      	b.n	8002fc8 <oled_Draw_Ellipse+0x50c>


	}


	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3744      	adds	r7, #68	; 0x44
 800315c:	46bd      	mov	sp, r7
 800315e:	ecbd 8b02 	vpop	{d8}
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	3fe00000 	.word	0x3fe00000
 8003168:	43b40000 	.word	0x43b40000
 800316c:	3fc90fdb 	.word	0x3fc90fdb
 8003170:	3c360b61 	.word	0x3c360b61

08003174 <oled_Draw_Character>:
 * @param	ch:	[in] character to be displayed
 * @param	fontX: [in] using font
 * @retval	status	0:ok	1:error
 */
uint8_t oled_Draw_Character(uint8_t px, uint8_t py, unsigned char ch, oledFont_t fontX)
{
 8003174:	b082      	sub	sp, #8
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
 8003182:	460b      	mov	r3, r1
 8003184:	71bb      	strb	r3, [r7, #6]
 8003186:	4613      	mov	r3, r2
 8003188:	717b      	strb	r3, [r7, #5]
	if (px < 0 || px >= oled_H_Pix || py < 0 || py >= oled_V_Pix)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db02      	blt.n	8003198 <oled_Draw_Character+0x24>
 8003192:	79bb      	ldrb	r3, [r7, #6]
 8003194:	2b3f      	cmp	r3, #63	; 0x3f
 8003196:	d901      	bls.n	800319c <oled_Draw_Character+0x28>
		return 1;
 8003198:	2301      	movs	r3, #1
 800319a:	e0dc      	b.n	8003356 <oled_Draw_Character+0x1e2>
//			py = 0;
//			px = px + fontX.font_Width;
		}

	// write character to GDDRAMBuffer
	uint8_t i, startPx = px, startPy = py;
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	74bb      	strb	r3, [r7, #18]
 80031a0:	79bb      	ldrb	r3, [r7, #6]
 80031a2:	747b      	strb	r3, [r7, #17]
	uint8_t chVal = ch - ' ';
 80031a4:	797b      	ldrb	r3, [r7, #5]
 80031a6:	3b20      	subs	r3, #32
 80031a8:	743b      	strb	r3, [r7, #16]
	uint8_t * ptrFont = malloc(sizeof(uint8_t) * fontX.font_Width * fontX.font_Height / 8);
 80031aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fde1 	bl	8007d80 <malloc>
 80031be:	4603      	mov	r3, r0
 80031c0:	60fb      	str	r3, [r7, #12]
	memcpy(ptrFont, &(fontX.font_Array[chVal * (fontX.font_Width * fontX.font_Height / 8)]), (fontX.font_Width * fontX.font_Height / 8));
 80031c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c4:	7c39      	ldrb	r1, [r7, #16]
 80031c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031ca:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da00      	bge.n	80031d8 <oled_Draw_Character+0x64>
 80031d6:	3307      	adds	r3, #7
 80031d8:	10db      	asrs	r3, r3, #3
 80031da:	fb03 f301 	mul.w	r3, r3, r1
 80031de:	18d1      	adds	r1, r2, r3
 80031e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da00      	bge.n	80031f2 <oled_Draw_Character+0x7e>
 80031f0:	3307      	adds	r3, #7
 80031f2:	10db      	asrs	r3, r3, #3
 80031f4:	461a      	mov	r2, r3
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f004 fdd2 	bl	8007da0 <memcpy>
	for (i = 0; i < (fontX.font_Height / 8); i++)	// scan font char height pixel -> n Byte
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
 8003200:	e04a      	b.n	8003298 <oled_Draw_Character+0x124>
	{
		px = startPx;
 8003202:	7cbb      	ldrb	r3, [r7, #18]
 8003204:	71fb      	strb	r3, [r7, #7]

		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 8003206:	2300      	movs	r3, #0
 8003208:	75bb      	strb	r3, [r7, #22]
 800320a:	e03d      	b.n	8003288 <oled_Draw_Character+0x114>
		{
			py = startPy + i * 8;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	b2da      	uxtb	r2, r3
 8003212:	7c7b      	ldrb	r3, [r7, #17]
 8003214:	4413      	add	r3, r2
 8003216:	71bb      	strb	r3, [r7, #6]

			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 8003218:	2300      	movs	r3, #0
 800321a:	757b      	strb	r3, [r7, #21]
 800321c:	e02b      	b.n	8003276 <oled_Draw_Character+0x102>
			{
				if (((*(ptrFont + i * fontX.font_Width + j)) & (0x01 << k)) == (0x01 << k))
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	461a      	mov	r2, r3
 800322a:	7dbb      	ldrb	r3, [r7, #22]
 800322c:	4413      	add	r3, r2
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	7d7b      	ldrb	r3, [r7, #21]
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	ea01 0203 	and.w	r2, r1, r3
 8003242:	7d7b      	ldrb	r3, [r7, #21]
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	429a      	cmp	r2, r3
 800324c:	d108      	bne.n	8003260 <oled_Draw_Character+0xec>
				{
					oled_Draw_Pixel(px, py++, pixel_control_ON);
 800324e:	79bb      	ldrb	r3, [r7, #6]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	71ba      	strb	r2, [r7, #6]
 8003254:	79f8      	ldrb	r0, [r7, #7]
 8003256:	2200      	movs	r2, #0
 8003258:	4619      	mov	r1, r3
 800325a:	f7fe fa19 	bl	8001690 <oled_Draw_Pixel>
 800325e:	e007      	b.n	8003270 <oled_Draw_Character+0xfc>
				}
				else {
					oled_Draw_Pixel(px, py++, pixel_control_OFF);
 8003260:	79bb      	ldrb	r3, [r7, #6]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	71ba      	strb	r2, [r7, #6]
 8003266:	79f8      	ldrb	r0, [r7, #7]
 8003268:	2201      	movs	r2, #1
 800326a:	4619      	mov	r1, r3
 800326c:	f7fe fa10 	bl	8001690 <oled_Draw_Pixel>
			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 8003270:	7d7b      	ldrb	r3, [r7, #21]
 8003272:	3301      	adds	r3, #1
 8003274:	757b      	strb	r3, [r7, #21]
 8003276:	7d7b      	ldrb	r3, [r7, #21]
 8003278:	2b07      	cmp	r3, #7
 800327a:	d9d0      	bls.n	800321e <oled_Draw_Character+0xaa>
				}
			}
			// next column
			px++;
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	3301      	adds	r3, #1
 8003280:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 8003282:	7dbb      	ldrb	r3, [r7, #22]
 8003284:	3301      	adds	r3, #1
 8003286:	75bb      	strb	r3, [r7, #22]
 8003288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800328c:	7dba      	ldrb	r2, [r7, #22]
 800328e:	429a      	cmp	r2, r3
 8003290:	d3bc      	bcc.n	800320c <oled_Draw_Character+0x98>
	for (i = 0; i < (fontX.font_Height / 8); i++)	// scan font char height pixel -> n Byte
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	3301      	adds	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
 8003298:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	7dfa      	ldrb	r2, [r7, #23]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3ad      	bcc.n	8003202 <oled_Draw_Character+0x8e>
		}
	}

	// less than one page section
	i = fontX.font_Height % 8;
 80032a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	75fb      	strb	r3, [r7, #23]
	if (i != 0)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04b      	beq.n	800334e <oled_Draw_Character+0x1da>
	{
		px = startPx;
 80032b6:	7cbb      	ldrb	r3, [r7, #18]
 80032b8:	71fb      	strb	r3, [r7, #7]

		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 80032ba:	2300      	movs	r3, #0
 80032bc:	753b      	strb	r3, [r7, #20]
 80032be:	e041      	b.n	8003344 <oled_Draw_Character+0x1d0>
		{
			py = startPy + (fontX.font_Height / 8) * 8;
 80032c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	7c7b      	ldrb	r3, [r7, #17]
 80032ce:	4413      	add	r3, r2
 80032d0:	71bb      	strb	r3, [r7, #6]

			for (uint8_t k = 0; k < i; k++)	// Split each pixel data
 80032d2:	2300      	movs	r3, #0
 80032d4:	74fb      	strb	r3, [r7, #19]
 80032d6:	e02b      	b.n	8003330 <oled_Draw_Character+0x1bc>
			{
				if (((*(ptrFont + i * fontX.font_Width + j)) & (0x01 << k)) == (0x01 << k))
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	7d3b      	ldrb	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2201      	movs	r2, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	ea01 0203 	and.w	r2, r1, r3
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	429a      	cmp	r2, r3
 8003306:	d108      	bne.n	800331a <oled_Draw_Character+0x1a6>
				{
					oled_Draw_Pixel(px, py++, pixel_control_ON);
 8003308:	79bb      	ldrb	r3, [r7, #6]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	71ba      	strb	r2, [r7, #6]
 800330e:	79f8      	ldrb	r0, [r7, #7]
 8003310:	2200      	movs	r2, #0
 8003312:	4619      	mov	r1, r3
 8003314:	f7fe f9bc 	bl	8001690 <oled_Draw_Pixel>
 8003318:	e007      	b.n	800332a <oled_Draw_Character+0x1b6>
				}
				else {
					oled_Draw_Pixel(px, py++, pixel_control_OFF);
 800331a:	79bb      	ldrb	r3, [r7, #6]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	71ba      	strb	r2, [r7, #6]
 8003320:	79f8      	ldrb	r0, [r7, #7]
 8003322:	2201      	movs	r2, #1
 8003324:	4619      	mov	r1, r3
 8003326:	f7fe f9b3 	bl	8001690 <oled_Draw_Pixel>
			for (uint8_t k = 0; k < i; k++)	// Split each pixel data
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	3301      	adds	r3, #1
 800332e:	74fb      	strb	r3, [r7, #19]
 8003330:	7cfa      	ldrb	r2, [r7, #19]
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	429a      	cmp	r2, r3
 8003336:	d3cf      	bcc.n	80032d8 <oled_Draw_Character+0x164>
				}
			}
			// next column
			px++;
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	3301      	adds	r3, #1
 800333c:	71fb      	strb	r3, [r7, #7]
		for (uint8_t j = 0; j < fontX.font_Width; j++)	// scan font char height pixel
 800333e:	7d3b      	ldrb	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	753b      	strb	r3, [r7, #20]
 8003344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003348:	7d3a      	ldrb	r2, [r7, #20]
 800334a:	429a      	cmp	r2, r3
 800334c:	d3b8      	bcc.n	80032c0 <oled_Draw_Character+0x14c>
		}
	}


	free(ptrFont);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f004 fd1e 	bl	8007d90 <free>
	return 0;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003360:	b002      	add	sp, #8
 8003362:	4770      	bx	lr

08003364 <oled_Draw_String>:
 * @param	strLen:[in] char array length
 * @param	oledFont:[in] indicate used font format
 * @retval	0:ok	1:error
 */
uint8_t oled_Draw_String(uint8_t x, uint8_t y, const unsigned char *pStr, uint8_t strLen, oledFont_t oledFont)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af02      	add	r7, sp, #8
 800336a:	603a      	str	r2, [r7, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
 8003372:	460b      	mov	r3, r1
 8003374:	71bb      	strb	r3, [r7, #6]
 8003376:	4613      	mov	r3, r2
 8003378:	717b      	strb	r3, [r7, #5]
	uint8_t cur_x = x, cur_y = y;
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	79bb      	ldrb	r3, [r7, #6]
 8003380:	73bb      	strb	r3, [r7, #14]
	uint8_t font_width = oledFont.font_Width;
 8003382:	7e3b      	ldrb	r3, [r7, #24]
 8003384:	733b      	strb	r3, [r7, #12]
	uint8_t font_height= oledFont.font_Height;
 8003386:	7e7b      	ldrb	r3, [r7, #25]
 8003388:	72fb      	strb	r3, [r7, #11]
	uint8_t str_len = strLen-1;
 800338a:	797b      	ldrb	r3, [r7, #5]
 800338c:	3b01      	subs	r3, #1
 800338e:	72bb      	strb	r3, [r7, #10]

	if (strLen ==0 || pStr == NULL)
 8003390:	797b      	ldrb	r3, [r7, #5]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <oled_Draw_String+0x38>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <oled_Draw_String+0x3c>
		return 1;
 800339c:	2301      	movs	r3, #1
 800339e:	e03f      	b.n	8003420 <oled_Draw_String+0xbc>

	if (x > oled_H_Pix-1 || y > oled_V_Pix-1)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db02      	blt.n	80033ae <oled_Draw_String+0x4a>
 80033a8:	79bb      	ldrb	r3, [r7, #6]
 80033aa:	2b3f      	cmp	r3, #63	; 0x3f
 80033ac:	d901      	bls.n	80033b2 <oled_Draw_String+0x4e>
		return 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e036      	b.n	8003420 <oled_Draw_String+0xbc>

	for (uint8_t var = 0; var < str_len; ++var) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	737b      	strb	r3, [r7, #13]
 80033b6:	e02e      	b.n	8003416 <oled_Draw_String+0xb2>
		if ( (oled_H_Pix - cur_x) < font_width ) {
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 80033be:	7b3b      	ldrb	r3, [r7, #12]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	da0c      	bge.n	80033de <oled_Draw_String+0x7a>
			cur_x = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
			cur_y += font_height;
 80033c8:	7bba      	ldrb	r2, [r7, #14]
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	4413      	add	r3, r2
 80033ce:	73bb      	strb	r3, [r7, #14]
			if ((cur_y + font_height) > (oled_V_Pix))
 80033d0:	7bba      	ldrb	r2, [r7, #14]
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	4413      	add	r3, r2
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	dd01      	ble.n	80033de <oled_Draw_String+0x7a>
				cur_y = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	73bb      	strb	r3, [r7, #14]
		}

		if ( (oled_V_Pix - cur_y) < font_height ) {
 80033de:	7bbb      	ldrb	r3, [r7, #14]
 80033e0:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	da03      	bge.n	80033f2 <oled_Draw_String+0x8e>
			cur_y = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73bb      	strb	r3, [r7, #14]
			cur_x = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
		}

		oled_Draw_Character(cur_x, cur_y, *(pStr + var), oledFont);
 80033f2:	7b7b      	ldrb	r3, [r7, #13]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	7bb9      	ldrb	r1, [r7, #14]
 80033fc:	7bf8      	ldrb	r0, [r7, #15]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f7ff feb6 	bl	8003174 <oled_Draw_Character>
		cur_x += font_width;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	7b3b      	ldrb	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t var = 0; var < str_len; ++var) {
 8003410:	7b7b      	ldrb	r3, [r7, #13]
 8003412:	3301      	adds	r3, #1
 8003414:	737b      	strb	r3, [r7, #13]
 8003416:	7b7a      	ldrb	r2, [r7, #13]
 8003418:	7abb      	ldrb	r3, [r7, #10]
 800341a:	429a      	cmp	r2, r3
 800341c:	d3cc      	bcc.n	80033b8 <oled_Draw_String+0x54>
	}

	return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <oled_Draw_Chinese_String>:
 * @param	idx:[in] arrary number(index) [<- frome oled_font.c chinese_t]
 * @param	chr_num: [in] number of Chinese characters
 * @retval	0:ok	1:error
 */
uint8_t oled_Draw_Chinese_String(uint8_t x, uint8_t y, chinese_t chineseStr, uint8_t idx, uint8_t chr_num )
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	1d39      	adds	r1, r7, #4
 8003434:	e881 000c 	stmia.w	r1, {r2, r3}
 8003438:	4623      	mov	r3, r4
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	4603      	mov	r3, r0
 800343e:	73bb      	strb	r3, [r7, #14]
 8003440:	466b      	mov	r3, sp
 8003442:	461d      	mov	r5, r3
	if (x > oled_H_Pix-1 || y > oled_V_Pix-1 || chineseStr.array == NULL || chr_num == 0)
 8003444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db09      	blt.n	8003460 <oled_Draw_Chinese_String+0x38>
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	2b3f      	cmp	r3, #63	; 0x3f
 8003450:	d806      	bhi.n	8003460 <oled_Draw_Chinese_String+0x38>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <oled_Draw_Chinese_String+0x38>
 8003458:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <oled_Draw_Chinese_String+0x3c>
		return 1;
 8003460:	2301      	movs	r3, #1
 8003462:	e0fe      	b.n	8003662 <oled_Draw_Chinese_String+0x23a>

	uint8_t cur_x = x, 	cur_y = y;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t chr_width  = chineseStr.Width;
 8003470:	793b      	ldrb	r3, [r7, #4]
 8003472:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t chr_height = chineseStr.Height;
 8003476:	797b      	ldrb	r3, [r7, #5]
 8003478:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	uint16_t tempLen = chr_num * chineseStr.Width * chineseStr.Height / 8;
 800347c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003480:	793a      	ldrb	r2, [r7, #4]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	797a      	ldrb	r2, [r7, #5]
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	da00      	bge.n	8003492 <oled_Draw_Chinese_String+0x6a>
 8003490:	3307      	adds	r3, #7
 8003492:	10db      	asrs	r3, r3, #3
 8003494:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t ptrStr[tempLen];
 8003496:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003498:	4623      	mov	r3, r4
 800349a:	3b01      	subs	r3, #1
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	b2a0      	uxth	r0, r4
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	00cb      	lsls	r3, r1, #3
 80034ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80034b2:	00c2      	lsls	r2, r0, #3
 80034b4:	b2a0      	uxth	r0, r4
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80034c8:	00c2      	lsls	r2, r0, #3
 80034ca:	4623      	mov	r3, r4
 80034cc:	3307      	adds	r3, #7
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	ebad 0d03 	sub.w	sp, sp, r3
 80034d6:	466b      	mov	r3, sp
 80034d8:	3300      	adds	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
	uint32_t addr_offset = (chineseStr.Width==16)? (chinese_16x16_strint_MaxLen) : (chinese_24x24_strint_MaxLen);
 80034dc:	793b      	ldrb	r3, [r7, #4]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d102      	bne.n	80034e8 <oled_Draw_Chinese_String+0xc0>
 80034e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80034e6:	e001      	b.n	80034ec <oled_Draw_Chinese_String+0xc4>
 80034e8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80034ec:	61bb      	str	r3, [r7, #24]
	memcpy(ptrStr, (uint8_t *)(chineseStr.array +idx*addr_offset), chr_num * chineseStr.Width * chineseStr.Height / 8);
 80034ee:	69f8      	ldr	r0, [r7, #28]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	18d1      	adds	r1, r2, r3
 80034fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003502:	793a      	ldrb	r2, [r7, #4]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	797a      	ldrb	r2, [r7, #5]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	da00      	bge.n	8003514 <oled_Draw_Chinese_String+0xec>
 8003512:	3307      	adds	r3, #7
 8003514:	10db      	asrs	r3, r3, #3
 8003516:	461a      	mov	r2, r3
 8003518:	f004 fc42 	bl	8007da0 <memcpy>


	uint8_t str_len	   = chr_num;
 800351c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003520:	75fb      	strb	r3, [r7, #23]

	uint8_t i, startPx = cur_x, startPy = cur_y;
 8003522:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003526:	75bb      	strb	r3, [r7, #22]
 8003528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800352c:	757b      	strb	r3, [r7, #21]

	uint8_t var = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (var = 0; var < str_len; ++var) {
 8003534:	2300      	movs	r3, #0
 8003536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800353a:	e08b      	b.n	8003654 <oled_Draw_Chinese_String+0x22c>

		// draw one char *******************************************************************

//		for (uint8_t idx = 0; idx < str_len; idx++)
//		{
			for (i = 0; i < (chr_height / 8); i++)	// scan font char height pixel -> n Byte  rows(page)
 800353c:	2300      	movs	r3, #0
 800353e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003542:	e079      	b.n	8003638 <oled_Draw_Chinese_String+0x210>
			{
				cur_x = startPx + var*chr_width;
 8003544:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003548:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800354c:	fb12 f303 	smulbb	r3, r2, r3
 8003550:	b2da      	uxtb	r2, r3
 8003552:	7dbb      	ldrb	r3, [r7, #22]
 8003554:	4413      	add	r3, r2
 8003556:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				// process a single character
				for (uint8_t j = 0; j < chr_width; j++)	// scan font char height pixel
 800355a:	2300      	movs	r3, #0
 800355c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003560:	e05f      	b.n	8003622 <oled_Draw_Chinese_String+0x1fa>
				{
					cur_y = startPy + i * 8;
 8003562:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	b2da      	uxtb	r2, r3
 800356a:	7d7b      	ldrb	r3, [r7, #21]
 800356c:	4413      	add	r3, r2
 800356e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

					for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 8003572:	2300      	movs	r3, #0
 8003574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003578:	e045      	b.n	8003606 <oled_Draw_Chinese_String+0x1de>
					{
						if (((ptrStr[var * chr_height * chr_width / 8 + i * chr_width + j]) & (0x01 << k)) == (0x01 << k))
 800357a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800357e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	da00      	bge.n	8003594 <oled_Draw_Chinese_String+0x16c>
 8003592:	3307      	adds	r3, #7
 8003594:	10db      	asrs	r3, r3, #3
 8003596:	4619      	mov	r1, r3
 8003598:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800359c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	18ca      	adds	r2, r1, r3
 80035a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035aa:	4413      	add	r3, r2
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035b6:	2201      	movs	r2, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	ea01 0203 	and.w	r2, r1, r3
 80035c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <oled_Draw_Chinese_String+0x1be>
						{
							oled_Draw_Pixel(cur_x, cur_y++, pixel_control_ON);
 80035ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80035d8:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80035dc:	2200      	movs	r2, #0
 80035de:	4619      	mov	r1, r3
 80035e0:	f7fe f856 	bl	8001690 <oled_Draw_Pixel>
 80035e4:	e00a      	b.n	80035fc <oled_Draw_Chinese_String+0x1d4>
						}
						else {
							oled_Draw_Pixel(cur_x, cur_y++, pixel_control_OFF);
 80035e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80035f0:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80035f4:	2201      	movs	r2, #1
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fe f84a 	bl	8001690 <oled_Draw_Pixel>
					for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 80035fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003600:	3301      	adds	r3, #1
 8003602:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003606:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800360a:	2b07      	cmp	r3, #7
 800360c:	d9b5      	bls.n	800357a <oled_Draw_Chinese_String+0x152>
						}
					}
					// next column
					cur_x++;
 800360e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003612:	3301      	adds	r3, #1
 8003614:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				for (uint8_t j = 0; j < chr_width; j++)	// scan font char height pixel
 8003618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800361c:	3301      	adds	r3, #1
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003626:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800362a:	429a      	cmp	r2, r3
 800362c:	d399      	bcc.n	8003562 <oled_Draw_Chinese_String+0x13a>
			for (i = 0; i < (chr_height / 8); i++)	// scan font char height pixel -> n Byte  rows(page)
 800362e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003632:	3301      	adds	r3, #1
 8003634:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003638:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800363c:	08db      	lsrs	r3, r3, #3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003644:	429a      	cmp	r2, r3
 8003646:	f4ff af7d 	bcc.w	8003544 <oled_Draw_Chinese_String+0x11c>
	for (var = 0; var < str_len; ++var) {
 800364a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800364e:	3301      	adds	r3, #1
 8003650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003654:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	429a      	cmp	r2, r3
 800365c:	f4ff af6e 	bcc.w	800353c <oled_Draw_Chinese_String+0x114>
		// draw one char end ***************************************************************

//		cur_x += chr_width;
	}

	return 0;
 8003660:	2300      	movs	r3, #0
 8003662:	46ad      	mov	sp, r5
}
 8003664:	4618      	mov	r0, r3
 8003666:	3730      	adds	r7, #48	; 0x30
 8003668:	46bd      	mov	sp, r7
 800366a:	bdb0      	pop	{r4, r5, r7, pc}

0800366c <oled_Draw_BitMap>:
 * @param	bitMap:[in] indicate used bitMap array info
 * @param	idx:[in] arrary number(index) [<- frome oled_font.c BitMap_t]
 * @retval	0:ok	1:error
 */
uint8_t oled_Draw_BitMap(bitMap_t bitMap, uint8_t idx)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8003672:	af00      	add	r7, sp, #0
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	e883 0003 	stmia.w	r3, {r0, r1}
 800367c:	1dfb      	adds	r3, r7, #7
 800367e:	701a      	strb	r2, [r3, #0]
//	if (x > (oled_H_Pix-1) || y > (oled_V_Pix))
//		return 1;
//	if (oled_H_Pix-x < bitMap.Width || oled_V_Pix < bitMap.Height)
//		return 1;

	uint8_t cur_x = 0, cur_y = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
 8003686:	2300      	movs	r3, #0
 8003688:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
	uint8_t tempy = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d

	uint8_t ptrStr[bitmap_128x64_MaxLen];
	uint32_t addr_offset = bitmap_128x64_MaxLen;
 8003692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003696:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	memcpy(ptrStr, (uint8_t *)(bitMap.array +idx*addr_offset), addr_offset);
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	18d1      	adds	r1, r2, r3
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fb72 	bl	8007da0 <memcpy>


	for (uint8_t i = 0; i < bitMap.Height/8; i++)	// page rows
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
 80036c2:	e065      	b.n	8003790 <oled_Draw_BitMap+0x124>
	{
		cur_x = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		for (uint8_t j = 0; j < bitMap.Width; j++)	// column
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
 80036d0:	e04d      	b.n	800376e <oled_Draw_BitMap+0x102>
		{

			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 80036d8:	e037      	b.n	800374a <oled_Draw_BitMap+0xde>
			{
				if (((ptrStr[i * bitMap.Width + j]) & (0x01 << k)) == (0x01 << k))
 80036da:	f897 341c 	ldrb.w	r3, [r7, #1052]	; 0x41c
 80036de:	f107 0208 	add.w	r2, r7, #8
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	fb02 f203 	mul.w	r2, r2, r3
 80036e8:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 80036ec:	4413      	add	r3, r2
 80036ee:	f107 0214 	add.w	r2, r7, #20
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 80036fa:	2201      	movs	r2, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	ea01 0203 	and.w	r2, r1, r3
 8003704:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	429a      	cmp	r2, r3
 8003710:	d10b      	bne.n	800372a <oled_Draw_BitMap+0xbe>
				{
					oled_Draw_Pixel(cur_x, cur_y++, pixel_control_ON);
 8003712:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	f887 241e 	strb.w	r2, [r7, #1054]	; 0x41e
 800371c:	f897 041f 	ldrb.w	r0, [r7, #1055]	; 0x41f
 8003720:	2200      	movs	r2, #0
 8003722:	4619      	mov	r1, r3
 8003724:	f7fd ffb4 	bl	8001690 <oled_Draw_Pixel>
 8003728:	e00a      	b.n	8003740 <oled_Draw_BitMap+0xd4>
				}
				else {
					oled_Draw_Pixel(cur_x, cur_y++, pixel_control_OFF);
 800372a:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	f887 241e 	strb.w	r2, [r7, #1054]	; 0x41e
 8003734:	f897 041f 	ldrb.w	r0, [r7, #1055]	; 0x41f
 8003738:	2201      	movs	r2, #1
 800373a:	4619      	mov	r1, r3
 800373c:	f7fd ffa8 	bl	8001690 <oled_Draw_Pixel>
			for (uint8_t k = 0; k < 8; k++)	// Split each pixel data
 8003740:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8003744:	3301      	adds	r3, #1
 8003746:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 800374a:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 800374e:	2b07      	cmp	r3, #7
 8003750:	d9c3      	bls.n	80036da <oled_Draw_BitMap+0x6e>
				}
			}
			cur_y = tempy;
 8003752:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8003756:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
			cur_x++;
 800375a:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800375e:	3301      	adds	r3, #1
 8003760:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		for (uint8_t j = 0; j < bitMap.Width; j++)	// column
 8003764:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8003768:	3301      	adds	r3, #1
 800376a:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 8003778:	429a      	cmp	r2, r3
 800377a:	d3aa      	bcc.n	80036d2 <oled_Draw_BitMap+0x66>
		}
		tempy += 8;
 800377c:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8003780:	3308      	adds	r3, #8
 8003782:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	for (uint8_t i = 0; i < bitMap.Height/8; i++)	// page rows
 8003786:	f897 341c 	ldrb.w	r3, [r7, #1052]	; 0x41c
 800378a:	3301      	adds	r3, #1
 800378c:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
 8003790:	f107 0308 	add.w	r3, r7, #8
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f897 241c 	ldrb.w	r2, [r7, #1052]	; 0x41c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d390      	bcc.n	80036c4 <oled_Draw_BitMap+0x58>
	}
}
 80037a2:	bf00      	nop
 80037a4:	4618      	mov	r0, r3
 80037a6:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_I2C_MemTxCpltCallback>:
/**
 *	Men write transfer complete callback
 */
#if	oled_i2c_dma
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	printf("mem tx cplt call back\r\n");
 80037b8:	4807      	ldr	r0, [pc, #28]	; (80037d8 <HAL_I2C_MemTxCpltCallback+0x28>)
 80037ba:	f004 fc37 	bl	800802c <puts>
	if (hi2c->Instance == oled_i2c.Instance)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_I2C_MemTxCpltCallback+0x2c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d102      	bne.n	80037d0 <HAL_I2C_MemTxCpltCallback+0x20>
	{
		oled_i2c_dma_mem_write_flag = 1;
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_I2C_MemTxCpltCallback+0x30>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
	}
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	080099b4 	.word	0x080099b4
 80037dc:	200004bc 	.word	0x200004bc
 80037e0:	200000ae 	.word	0x200000ae

080037e4 <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == oled_i2c.Instance)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_I2C_ErrorCallback+0x24>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d102      	bne.n	80037fe <HAL_I2C_ErrorCallback+0x1a>
		printf("i2c DMA error...\r\n");
 80037f8:	4804      	ldr	r0, [pc, #16]	; (800380c <HAL_I2C_ErrorCallback+0x28>)
 80037fa:	f004 fc17 	bl	800802c <puts>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200004bc 	.word	0x200004bc
 800380c:	080099cc 	.word	0x080099cc

08003810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_MspInit+0x4c>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <HAL_MspInit+0x4c>)
 8003820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003824:	6453      	str	r3, [r2, #68]	; 0x44
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_MspInit+0x4c>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_MspInit+0x4c>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <HAL_MspInit+0x4c>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_MspInit+0x4c>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a34      	ldr	r2, [pc, #208]	; (8003950 <HAL_I2C_MspInit+0xf0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d161      	bne.n	8003946 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a32      	ldr	r2, [pc, #200]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800389e:	2303      	movs	r3, #3
 80038a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a2:	2312      	movs	r3, #18
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038ae:	2304      	movs	r3, #4
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	4619      	mov	r1, r3
 80038b8:	4827      	ldr	r0, [pc, #156]	; (8003958 <HAL_I2C_MspInit+0xf8>)
 80038ba:	f000 fef1 	bl	80046a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 80038c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_I2C_MspInit+0xf4>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <HAL_I2C_MspInit+0x100>)
 80038de:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038e2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80038e6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_I2C_MspInit+0xfc>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_I2C_MspInit+0xfc>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_I2C_MspInit+0xfc>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_I2C_MspInit+0xfc>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_I2C_MspInit+0xfc>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800391a:	4810      	ldr	r0, [pc, #64]	; (800395c <HAL_I2C_MspInit+0xfc>)
 800391c:	f000 fb14 	bl	8003f48 <HAL_DMA_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8003926:	f7fd fa89 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <HAL_I2C_MspInit+0xfc>)
 800392e:	635a      	str	r2, [r3, #52]	; 0x34
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_I2C_MspInit+0xfc>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	2021      	movs	r0, #33	; 0x21
 800393c:	f000 facd 	bl	8003eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003940:	2021      	movs	r0, #33	; 0x21
 8003942:	f000 fae6 	bl	8003f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003946:	bf00      	nop
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40005800 	.word	0x40005800
 8003954:	40023800 	.word	0x40023800
 8003958:	40021400 	.word	0x40021400
 800395c:	20000510 	.word	0x20000510
 8003960:	400260b8 	.word	0x400260b8

08003964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_UART_MspInit+0x84>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d12c      	bne.n	80039e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_UART_MspInit+0x88>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_UART_MspInit+0x88>)
 8003990:	f043 0310 	orr.w	r3, r3, #16
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_UART_MspInit+0x88>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_UART_MspInit+0x88>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_UART_MspInit+0x88>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_UART_MspInit+0x88>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039d0:	2307      	movs	r3, #7
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <HAL_UART_MspInit+0x8c>)
 80039dc:	f000 fe60 	bl	80046a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020000 	.word	0x40020000

080039f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <NMI_Handler+0x4>

080039fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <MemManage_Handler+0x4>

08003a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <BusFault_Handler+0x4>

08003a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <UsageFault_Handler+0x4>

08003a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a40:	f000 f92c 	bl	8003c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <I2C2_EV_IRQHandler+0x10>)
 8003a4e:	f001 faad 	bl	8004fac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200004bc 	.word	0x200004bc

08003a5c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <DMA1_Stream7_IRQHandler+0x10>)
 8003a62:	f000 fb99 	bl	8004198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000510 	.word	0x20000510

08003a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a82:	f3af 8000 	nop.w
 8003a86:	4601      	mov	r1, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbf0      	blt.n	8003a82 <_read+0x12>
	}

return len;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_close>:
	}
	return len;
}

int _close(int file)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_isatty>:

int _isatty(int file)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8003aea:	2301      	movs	r3, #1
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	return 0;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <_sbrk+0x5c>)
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <_sbrk+0x60>)
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <_sbrk+0x64>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <_sbrk+0x64>)
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <_sbrk+0x68>)
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <_sbrk+0x64>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d207      	bcs.n	8003b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b44:	f004 f8f2 	bl	8007d2c <__errno>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	220c      	movs	r2, #12
 8003b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	e009      	b.n	8003b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <_sbrk+0x64>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <_sbrk+0x64>)
 8003b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b66:	68fb      	ldr	r3, [r7, #12]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20030000 	.word	0x20030000
 8003b74:	00000400 	.word	0x00000400
 8003b78:	200004b0 	.word	0x200004b0
 8003b7c:	200005c8 	.word	0x200005c8

08003b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <SystemInit+0x20>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <SystemInit+0x20>)
 8003b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bdc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba8:	480d      	ldr	r0, [pc, #52]	; (8003be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003baa:	490e      	ldr	r1, [pc, #56]	; (8003be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb0:	e002      	b.n	8003bb8 <LoopCopyDataInit>

08003bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb6:	3304      	adds	r3, #4

08003bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bbc:	d3f9      	bcc.n	8003bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bbe:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bc0:	4c0b      	ldr	r4, [pc, #44]	; (8003bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc4:	e001      	b.n	8003bca <LoopFillZerobss>

08003bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc8:	3204      	adds	r2, #4

08003bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bcc:	d3fb      	bcc.n	8003bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bce:	f7ff ffd7 	bl	8003b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bd2:	f004 f8b1 	bl	8007d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd6:	f7fc fec7 	bl	8000968 <main>
  bx  lr    
 8003bda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003bdc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003be8:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 8003bec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003bf0:	200005c8 	.word	0x200005c8

08003bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf4:	e7fe      	b.n	8003bf4 <ADC_IRQHandler>
	...

08003bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <HAL_Init+0x40>)
 8003c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_Init+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <HAL_Init+0x40>)
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <HAL_Init+0x40>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c20:	2003      	movs	r0, #3
 8003c22:	f000 f94f 	bl	8003ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c26:	200f      	movs	r0, #15
 8003c28:	f000 f808 	bl	8003c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c2c:	f7ff fdf0 	bl	8003810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00

08003c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_InitTick+0x54>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_InitTick+0x58>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f967 	bl	8003f2e <HAL_SYSTICK_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00e      	b.n	8003c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b0f      	cmp	r3, #15
 8003c6e:	d80a      	bhi.n	8003c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c70:	2200      	movs	r2, #0
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f000 f92f 	bl	8003eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c7c:	4a06      	ldr	r2, [pc, #24]	; (8003c98 <HAL_InitTick+0x5c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000020 	.word	0x20000020
 8003c94:	20000028 	.word	0x20000028
 8003c98:	20000024 	.word	0x20000024

08003c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_IncTick+0x20>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_IncTick+0x24>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HAL_IncTick+0x24>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000028 	.word	0x20000028
 8003cc0:	200005b4 	.word	0x200005b4

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_GetTick+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	200005b4 	.word	0x200005b4

08003cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff ffee 	bl	8003cc4 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d005      	beq.n	8003d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_Delay+0x44>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d02:	bf00      	nop
 8003d04:	f7ff ffde 	bl	8003cc4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d8f7      	bhi.n	8003d04 <HAL_Delay+0x28>
  {
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000028 	.word	0x20000028

08003d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d40:	4013      	ands	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d56:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	60d3      	str	r3, [r2, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <__NVIC_GetPriorityGrouping+0x18>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	f003 0307 	and.w	r3, r3, #7
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	db0b      	blt.n	8003db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4907      	ldr	r1, [pc, #28]	; (8003dc0 <__NVIC_EnableIRQ+0x38>)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2001      	movs	r0, #1
 8003daa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000e100 	.word	0xe000e100

08003dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db0a      	blt.n	8003dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	490c      	ldr	r1, [pc, #48]	; (8003e10 <__NVIC_SetPriority+0x4c>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	440b      	add	r3, r1
 8003de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dec:	e00a      	b.n	8003e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4908      	ldr	r1, [pc, #32]	; (8003e14 <__NVIC_SetPriority+0x50>)
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	3b04      	subs	r3, #4
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	440b      	add	r3, r1
 8003e02:	761a      	strb	r2, [r3, #24]
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	; 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f1c3 0307 	rsb	r3, r3, #7
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	bf28      	it	cs
 8003e36:	2304      	movcs	r3, #4
 8003e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d902      	bls.n	8003e48 <NVIC_EncodePriority+0x30>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3b03      	subs	r3, #3
 8003e46:	e000      	b.n	8003e4a <NVIC_EncodePriority+0x32>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e60:	f04f 31ff 	mov.w	r1, #4294967295
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	43d9      	mvns	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	4313      	orrs	r3, r2
         );
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3724      	adds	r7, #36	; 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e90:	d301      	bcc.n	8003e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00f      	b.n	8003eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <SysTick_Config+0x40>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	f7ff ff8e 	bl	8003dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <SysTick_Config+0x40>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <SysTick_Config+0x40>)
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000e010 	.word	0xe000e010

08003ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ff29 	bl	8003d24 <__NVIC_SetPriorityGrouping>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eec:	f7ff ff3e 	bl	8003d6c <__NVIC_GetPriorityGrouping>
 8003ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f7ff ff8e 	bl	8003e18 <NVIC_EncodePriority>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff5d 	bl	8003dc4 <__NVIC_SetPriority>
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff31 	bl	8003d88 <__NVIC_EnableIRQ>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ffa2 	bl	8003e80 <SysTick_Config>
 8003f3c:	4603      	mov	r3, r0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7ff feb6 	bl	8003cc4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e099      	b.n	8004098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f84:	e00f      	b.n	8003fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f86:	f7ff fe9d 	bl	8003cc4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d908      	bls.n	8003fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e078      	b.n	8004098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e8      	bne.n	8003f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <HAL_DMA_Init+0x158>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d107      	bne.n	8004010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	4313      	orrs	r3, r2
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b04      	cmp	r3, #4
 8004038:	d117      	bne.n	800406a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 faab 	bl	80045a8 <DMA_CheckFifoParam>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2240      	movs	r2, #64	; 0x40
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004066:	2301      	movs	r3, #1
 8004068:	e016      	b.n	8004098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa62 	bl	800453c <DMA_CalcBaseAndBitshift>
 8004078:	4603      	mov	r3, r0
 800407a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	223f      	movs	r2, #63	; 0x3f
 8004082:	409a      	lsls	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	f010803f 	.word	0xf010803f

080040a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_DMA_Start_IT+0x26>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e040      	b.n	800414c <HAL_DMA_Start_IT+0xa8>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d12f      	bne.n	800413e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9f4 	bl	80044e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	223f      	movs	r2, #63	; 0x3f
 80040fe:	409a      	lsls	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0216 	orr.w	r2, r2, #22
 8004112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0208 	orr.w	r2, r2, #8
 800412a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e005      	b.n	800414a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004146:	2302      	movs	r3, #2
 8004148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d004      	beq.n	8004172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00c      	b.n	800418c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_DMA_IRQHandler+0x258>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a92      	ldr	r2, [pc, #584]	; (80043f4 <HAL_DMA_IRQHandler+0x25c>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0a9b      	lsrs	r3, r3, #10
 80041b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	2208      	movs	r2, #8
 80041c4:	409a      	lsls	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01a      	beq.n	8004204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0204 	bic.w	r2, r2, #4
 80041ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	2208      	movs	r2, #8
 80041f2:	409a      	lsls	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	2201      	movs	r2, #1
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d012      	beq.n	800423a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	2201      	movs	r2, #1
 8004228:	409a      	lsls	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	2204      	movs	r2, #4
 8004240:	409a      	lsls	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2204      	movs	r2, #4
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	2210      	movs	r2, #16
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d043      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03c      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	2210      	movs	r2, #16
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d024      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
 80042c6:	e01f      	b.n	8004308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
 80042d8:	e016      	b.n	8004308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0208 	bic.w	r2, r2, #8
 80042f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2220      	movs	r2, #32
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 808e 	beq.w	8004436 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8086 	beq.w	8004436 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	2220      	movs	r2, #32
 8004330:	409a      	lsls	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b05      	cmp	r3, #5
 8004340:	d136      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0216 	bic.w	r2, r2, #22
 8004350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_DMA_IRQHandler+0x1da>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0208 	bic.w	r2, r2, #8
 8004380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	223f      	movs	r2, #63	; 0x3f
 8004388:	409a      	lsls	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d07d      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
        }
        return;
 80043ae:	e078      	b.n	80044a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01c      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d030      	beq.n	8004436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e02b      	b.n	8004436 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d027      	beq.n	8004436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e022      	b.n	8004436 <HAL_DMA_IRQHandler+0x29e>
 80043f0:	20000020 	.word	0x20000020
 80043f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0210 	bic.w	r2, r2, #16
 8004414:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	2b00      	cmp	r3, #0
 800443c:	d032      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d022      	beq.n	8004490 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2205      	movs	r2, #5
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3301      	adds	r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d307      	bcc.n	800447e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f2      	bne.n	8004462 <HAL_DMA_IRQHandler+0x2ca>
 800447c:	e000      	b.n	8004480 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800447e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
 80044a0:	e000      	b.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044a2:	bf00      	nop
    }
  }
}
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ba:	b2db      	uxtb	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d108      	bne.n	8004520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800451e:	e007      	b.n	8004530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	3b10      	subs	r3, #16
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <DMA_CalcBaseAndBitshift+0x64>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d909      	bls.n	800457e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
 800457c:	e007      	b.n	800458e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	aaaaaaab 	.word	0xaaaaaaab
 80045a4:	0800b4b4 	.word	0x0800b4b4

080045a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11f      	bne.n	8004602 <DMA_CheckFifoParam+0x5a>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d856      	bhi.n	8004676 <DMA_CheckFifoParam+0xce>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <DMA_CheckFifoParam+0x28>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045f3 	.word	0x080045f3
 80045d8:	080045e1 	.word	0x080045e1
 80045dc:	08004677 	.word	0x08004677
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d046      	beq.n	800467a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f0:	e043      	b.n	800467a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045fa:	d140      	bne.n	800467e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004600:	e03d      	b.n	800467e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460a:	d121      	bne.n	8004650 <DMA_CheckFifoParam+0xa8>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d837      	bhi.n	8004682 <DMA_CheckFifoParam+0xda>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <DMA_CheckFifoParam+0x70>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004629 	.word	0x08004629
 800461c:	0800462f 	.word	0x0800462f
 8004620:	08004629 	.word	0x08004629
 8004624:	08004641 	.word	0x08004641
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      break;
 800462c:	e030      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d025      	beq.n	8004686 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463e:	e022      	b.n	8004686 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004648:	d11f      	bne.n	800468a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800464e:	e01c      	b.n	800468a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d903      	bls.n	800465e <DMA_CheckFifoParam+0xb6>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d003      	beq.n	8004664 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800465c:	e018      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
      break;
 8004662:	e015      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
      break;
 8004674:	e00b      	b.n	800468e <DMA_CheckFifoParam+0xe6>
      break;
 8004676:	bf00      	nop
 8004678:	e00a      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;
 800467a:	bf00      	nop
 800467c:	e008      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;
 800467e:	bf00      	nop
 8004680:	e006      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e004      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;   
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
    }
  } 
  
  return status; 
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop

080046a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	; 0x24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e177      	b.n	80049ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046bc:	2201      	movs	r2, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f040 8166 	bne.w	80049a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d005      	beq.n	80046f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d130      	bne.n	8004754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004728:	2201      	movs	r2, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 0201 	and.w	r2, r3, #1
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b03      	cmp	r3, #3
 800475e:	d017      	beq.n	8004790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d123      	bne.n	80047e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	08da      	lsrs	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3208      	adds	r2, #8
 80047a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	220f      	movs	r2, #15
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	08da      	lsrs	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3208      	adds	r2, #8
 80047de:	69b9      	ldr	r1, [r7, #24]
 80047e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2203      	movs	r2, #3
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0203 	and.w	r2, r3, #3
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80c0 	beq.w	80049a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_GPIO_Init+0x324>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_GPIO_Init+0x324>)
 8004830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004834:	6453      	str	r3, [r2, #68]	; 0x44
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_GPIO_Init+0x324>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004842:	4a61      	ldr	r2, [pc, #388]	; (80049c8 <HAL_GPIO_Init+0x328>)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	3302      	adds	r3, #2
 800484a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	220f      	movs	r2, #15
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_GPIO_Init+0x32c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d037      	beq.n	80048de <HAL_GPIO_Init+0x23e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_GPIO_Init+0x330>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d031      	beq.n	80048da <HAL_GPIO_Init+0x23a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <HAL_GPIO_Init+0x334>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02b      	beq.n	80048d6 <HAL_GPIO_Init+0x236>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a55      	ldr	r2, [pc, #340]	; (80049d8 <HAL_GPIO_Init+0x338>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d025      	beq.n	80048d2 <HAL_GPIO_Init+0x232>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a54      	ldr	r2, [pc, #336]	; (80049dc <HAL_GPIO_Init+0x33c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <HAL_GPIO_Init+0x22e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a53      	ldr	r2, [pc, #332]	; (80049e0 <HAL_GPIO_Init+0x340>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d019      	beq.n	80048ca <HAL_GPIO_Init+0x22a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_GPIO_Init+0x344>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_GPIO_Init+0x226>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <HAL_GPIO_Init+0x348>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00d      	beq.n	80048c2 <HAL_GPIO_Init+0x222>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_GPIO_Init+0x34c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <HAL_GPIO_Init+0x21e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4f      	ldr	r2, [pc, #316]	; (80049f0 <HAL_GPIO_Init+0x350>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_GPIO_Init+0x21a>
 80048b6:	2309      	movs	r3, #9
 80048b8:	e012      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048ba:	230a      	movs	r3, #10
 80048bc:	e010      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048be:	2308      	movs	r3, #8
 80048c0:	e00e      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048c2:	2307      	movs	r3, #7
 80048c4:	e00c      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048c6:	2306      	movs	r3, #6
 80048c8:	e00a      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048ca:	2305      	movs	r3, #5
 80048cc:	e008      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048ce:	2304      	movs	r3, #4
 80048d0:	e006      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048d2:	2303      	movs	r3, #3
 80048d4:	e004      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_GPIO_Init+0x240>
 80048de:	2300      	movs	r3, #0
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	f002 0203 	and.w	r2, r2, #3
 80048e6:	0092      	lsls	r2, r2, #2
 80048e8:	4093      	lsls	r3, r2
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f0:	4935      	ldr	r1, [pc, #212]	; (80049c8 <HAL_GPIO_Init+0x328>)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	3302      	adds	r3, #2
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_GPIO_Init+0x354>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004922:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <HAL_GPIO_Init+0x354>)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004928:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_GPIO_Init+0x354>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	43db      	mvns	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4013      	ands	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_GPIO_Init+0x354>)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004952:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_GPIO_Init+0x354>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004976:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <HAL_GPIO_Init+0x354>)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_GPIO_Init+0x354>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a0:	4a14      	ldr	r2, [pc, #80]	; (80049f4 <HAL_GPIO_Init+0x354>)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	f67f ae84 	bls.w	80046bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3724      	adds	r7, #36	; 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40013800 	.word	0x40013800
 80049cc:	40020000 	.word	0x40020000
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40020800 	.word	0x40020800
 80049d8:	40020c00 	.word	0x40020c00
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40021400 	.word	0x40021400
 80049e4:	40021800 	.word	0x40021800
 80049e8:	40021c00 	.word	0x40021c00
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40022400 	.word	0x40022400
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a14:	e003      	b.n	8004a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	041a      	lsls	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	041a      	lsls	r2, r3, #16
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43d9      	mvns	r1, r3
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	400b      	ands	r3, r1
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	619a      	str	r2, [r3, #24]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e12b      	b.n	8004cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fe feea 	bl	8003860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f002 fdf4 	bl	80076b0 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a81      	ldr	r2, [pc, #516]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d807      	bhi.n	8004ae4 <HAL_I2C_Init+0x84>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a80      	ldr	r2, [pc, #512]	; (8004cd8 <HAL_I2C_Init+0x278>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	bf94      	ite	ls
 8004adc:	2301      	movls	r3, #1
 8004ade:	2300      	movhi	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e006      	b.n	8004af2 <HAL_I2C_Init+0x92>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a7d      	ldr	r2, [pc, #500]	; (8004cdc <HAL_I2C_Init+0x27c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	bf94      	ite	ls
 8004aec:	2301      	movls	r3, #1
 8004aee:	2300      	movhi	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0e7      	b.n	8004cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a78      	ldr	r2, [pc, #480]	; (8004ce0 <HAL_I2C_Init+0x280>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	0c9b      	lsrs	r3, r3, #18
 8004b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a6a      	ldr	r2, [pc, #424]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d802      	bhi.n	8004b34 <HAL_I2C_Init+0xd4>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e009      	b.n	8004b48 <HAL_I2C_Init+0xe8>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	4a69      	ldr	r2, [pc, #420]	; (8004ce4 <HAL_I2C_Init+0x284>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	3301      	adds	r3, #1
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	495c      	ldr	r1, [pc, #368]	; (8004cd4 <HAL_I2C_Init+0x274>)
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d819      	bhi.n	8004b9c <HAL_I2C_Init+0x13c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e59      	subs	r1, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_I2C_Init+0x138>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1e59      	subs	r1, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b90:	3301      	adds	r3, #1
 8004b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b96:	e051      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	e04f      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d111      	bne.n	8004bc8 <HAL_I2C_Init+0x168>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e58      	subs	r0, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	440b      	add	r3, r1
 8004bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	e012      	b.n	8004bee <HAL_I2C_Init+0x18e>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	0099      	lsls	r1, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Init+0x196>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10e      	bne.n	8004c1c <HAL_I2C_Init+0x1bc>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1e58      	subs	r0, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	440b      	add	r3, r1
 8004c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	e00f      	b.n	8004c3c <HAL_I2C_Init+0x1dc>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1e58      	subs	r0, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	0099      	lsls	r1, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	6809      	ldr	r1, [r1, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6911      	ldr	r1, [r2, #16]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68d2      	ldr	r2, [r2, #12]
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	000186a0 	.word	0x000186a0
 8004cd8:	001e847f 	.word	0x001e847f
 8004cdc:	003d08ff 	.word	0x003d08ff
 8004ce0:	431bde83 	.word	0x431bde83
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d06:	f7fe ffdd 	bl	8003cc4 <HAL_GetTick>
 8004d0a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	f040 813a 	bne.w	8004f8e <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d1a:	4b9f      	ldr	r3, [pc, #636]	; (8004f98 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	4a9e      	ldr	r2, [pc, #632]	; (8004f9c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a1a      	lsrs	r2, r3, #8
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009a      	lsls	r2, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d116      	bne.n	8004d6e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e110      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d0db      	beq.n	8004d34 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_I2C_Mem_Write_DMA+0xa2>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e102      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d007      	beq.n	8004db0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2221      	movs	r2, #33	; 0x21
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2240      	movs	r2, #64	; 0x40
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a6c      	ldr	r2, [pc, #432]	; (8004fa0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004df2:	897a      	ldrh	r2, [r7, #10]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80a9 	beq.w	8004f66 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02a      	beq.n	8004e72 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	4a60      	ldr	r2, [pc, #384]	; (8004fa4 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8004e22:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	4a5f      	ldr	r2, [pc, #380]	; (8004fa8 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8004e2a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	2200      	movs	r2, #0
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	2200      	movs	r2, #0
 8004e3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	2200      	movs	r2, #0
 8004e42:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	2200      	movs	r2, #0
 8004e4a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	4619      	mov	r1, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3310      	adds	r3, #16
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	f7ff f91f 	bl	80040a4 <HAL_DMA_Start_IT>
 8004e66:	4603      	mov	r3, r0
 8004e68:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d166      	bne.n	8004f3e <HAL_I2C_Mem_Write_DMA+0x256>
 8004e70:	e013      	b.n	8004e9a <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07a      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004e9a:	88f8      	ldrh	r0, [r7, #6]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	8979      	ldrh	r1, [r7, #10]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	2323      	movs	r3, #35	; 0x23
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f001 fb30 	bl	8006510 <I2C_RequestMemoryWrite>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d022      	beq.n	8004efc <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff f94a 	bl	8004154 <HAL_DMA_Abort_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	2200      	movs	r2, #0
 8004eca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e049      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f28:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f38:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e028      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0210 	orr.w	r2, r3, #16
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e014      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000020 	.word	0x20000020
 8004f9c:	14f8b589 	.word	0x14f8b589
 8004fa0:	ffff0000 	.word	0xffff0000
 8004fa4:	0800663d 	.word	0x0800663d
 8004fa8:	080067e7 	.word	0x080067e7

08004fac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d003      	beq.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x38>
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	f040 80c1 	bne.w	8005166 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10d      	bne.n	800501a <HAL_I2C_EV_IRQHandler+0x6e>
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005004:	d003      	beq.n	800500e <HAL_I2C_EV_IRQHandler+0x62>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800500c:	d101      	bne.n	8005012 <HAL_I2C_EV_IRQHandler+0x66>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <HAL_I2C_EV_IRQHandler+0x68>
 8005012:	2300      	movs	r3, #0
 8005014:	2b01      	cmp	r3, #1
 8005016:	f000 8132 	beq.w	800527e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <HAL_I2C_EV_IRQHandler+0x92>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	0a5b      	lsrs	r3, r3, #9
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fe36 	bl	8006ca2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcbe 	bl	80059b8 <I2C_Master_SB>
 800503c:	e092      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_I2C_EV_IRQHandler+0xb2>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	0a5b      	lsrs	r3, r3, #9
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fd34 	bl	8005ac4 <I2C_Master_ADD10>
 800505c:	e082      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0xd2>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	0a5b      	lsrs	r3, r3, #9
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fd4e 	bl	8005b18 <I2C_Master_ADDR>
 800507c:	e072      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d03b      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005098:	f000 80f3 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00f      	beq.n	80050c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f938 	bl	8005336 <I2C_MasterTransmit_TXE>
 80050c6:	e04d      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80d6 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	0a5b      	lsrs	r3, r3, #9
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80cf 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b21      	cmp	r3, #33	; 0x21
 80050e8:	d103      	bne.n	80050f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9bf 	bl	800546e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050f0:	e0c7      	b.n	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	f040 80c4 	bne.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa2d 	bl	800555a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005100:	e0bf      	b.n	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	f000 80b7 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00f      	beq.n	8005140 <HAL_I2C_EV_IRQHandler+0x194>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	0a9b      	lsrs	r3, r3, #10
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_I2C_EV_IRQHandler+0x194>
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 faa2 	bl	8005682 <I2C_MasterReceive_RXNE>
 800513e:	e011      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 809a 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8093 	beq.w	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb41 	bl	80057e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005162:	e08e      	b.n	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005164:	e08d      	b.n	8005282 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e007      	b.n	8005188 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <HAL_I2C_EV_IRQHandler+0x20e>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	0a5b      	lsrs	r3, r3, #9
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00c      	beq.n	80051ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 feff 	bl	8005fb6 <I2C_Slave_ADDR>
 80051b8:	e066      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_I2C_EV_IRQHandler+0x22e>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 ff3a 	bl	800604c <I2C_Slave_STOPF>
 80051d8:	e056      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051da:	7bbb      	ldrb	r3, [r7, #14]
 80051dc:	2b21      	cmp	r3, #33	; 0x21
 80051de:	d002      	beq.n	80051e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80051e0:	7bbb      	ldrb	r3, [r7, #14]
 80051e2:	2b29      	cmp	r3, #41	; 0x29
 80051e4:	d125      	bne.n	8005232 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	09db      	lsrs	r3, r3, #7
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <HAL_I2C_EV_IRQHandler+0x266>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	0a9b      	lsrs	r3, r3, #10
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_I2C_EV_IRQHandler+0x266>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fe15 	bl	8005e3a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005210:	e039      	b.n	8005286 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	089b      	lsrs	r3, r3, #2
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d033      	beq.n	8005286 <HAL_I2C_EV_IRQHandler+0x2da>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02d      	beq.n	8005286 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fe42 	bl	8005eb4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005230:	e029      	b.n	8005286 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00f      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x2b2>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	0a9b      	lsrs	r3, r3, #10
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x2b2>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fe4d 	bl	8005ef6 <I2C_SlaveReceive_RXNE>
 800525c:	e014      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	0a5b      	lsrs	r3, r3, #9
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fe7b 	bl	8005f72 <I2C_SlaveReceive_BTF>
 800527c:	e004      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005286:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
 80052ea:	4613      	mov	r3, r2
 80052ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d150      	bne.n	80053fe <I2C_MasterTransmit_TXE+0xc8>
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b21      	cmp	r3, #33	; 0x21
 8005360:	d14d      	bne.n	80053fe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d01d      	beq.n	80053a4 <I2C_MasterTransmit_TXE+0x6e>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b20      	cmp	r3, #32
 800536c:	d01a      	beq.n	80053a4 <I2C_MasterTransmit_TXE+0x6e>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005374:	d016      	beq.n	80053a4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005384:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2211      	movs	r2, #17
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff76 	bl	800528e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053a2:	e060      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053b2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d107      	bne.n	80053ee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe f9e2 	bl	80037b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ec:	e03b      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff49 	bl	800528e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053fc:	e033      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	2b21      	cmp	r3, #33	; 0x21
 8005402:	d005      	beq.n	8005410 <I2C_MasterTransmit_TXE+0xda>
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d12d      	bne.n	8005466 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b22      	cmp	r3, #34	; 0x22
 800540e:	d12a      	bne.n	8005466 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005428:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800542a:	e01c      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d103      	bne.n	8005440 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f88e 	bl	800555a <I2C_MemoryTransmit_TXE_BTF>
}
 800543e:	e012      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005464:	e7ff      	b.n	8005466 <I2C_MasterTransmit_TXE+0x130>
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b21      	cmp	r3, #33	; 0x21
 8005486:	d164      	bne.n	8005552 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054b6:	e04c      	b.n	8005552 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d01d      	beq.n	80054fa <I2C_MasterTransmit_BTF+0x8c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d01a      	beq.n	80054fa <I2C_MasterTransmit_BTF+0x8c>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ca:	d016      	beq.n	80054fa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054da:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2211      	movs	r2, #17
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fecb 	bl	800528e <HAL_I2C_MasterTxCpltCallback>
}
 80054f8:	e02b      	b.n	8005552 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005508:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d107      	bne.n	8005544 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fe f937 	bl	80037b0 <HAL_I2C_MemTxCpltCallback>
}
 8005542:	e006      	b.n	8005552 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fe9e 	bl	800528e <HAL_I2C_MasterTxCpltCallback>
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11d      	bne.n	80055ae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10b      	bne.n	8005592 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557e:	b2da      	uxtb	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558a:	1c9a      	adds	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005590:	e073      	b.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	b29b      	uxth	r3, r3
 8005598:	121b      	asrs	r3, r3, #8
 800559a:	b2da      	uxtb	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055ac:	e065      	b.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10b      	bne.n	80055ce <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055cc:	e055      	b.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d151      	bne.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b22      	cmp	r3, #34	; 0x22
 80055da:	d10d      	bne.n	80055f8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055f6:	e040      	b.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d015      	beq.n	800562e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b21      	cmp	r3, #33	; 0x21
 8005606:	d112      	bne.n	800562e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800562c:	e025      	b.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d120      	bne.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b21      	cmp	r3, #33	; 0x21
 800563c:	d11d      	bne.n	800567a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800564c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fe f89b 	bl	80037b0 <HAL_I2C_MemTxCpltCallback>
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b22      	cmp	r3, #34	; 0x22
 8005694:	f040 80a2 	bne.w	80057dc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d921      	bls.n	80056ea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	f040 8082 	bne.w	80057dc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80056e8:	e078      	b.n	80057dc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d074      	beq.n	80057dc <I2C_MasterReceive_RXNE+0x15a>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <I2C_MasterReceive_RXNE+0x7c>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d16e      	bne.n	80057dc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fa6e 	bl	8006be0 <I2C_WaitOnSTOPRequestThroughIT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d142      	bne.n	8005790 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005718:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005728:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d10a      	bne.n	800577a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fdcb 	bl	800530e <HAL_I2C_MemRxCpltCallback>
}
 8005778:	e030      	b.n	80057dc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2212      	movs	r2, #18
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fd8a 	bl	80052a2 <HAL_I2C_MasterRxCpltCallback>
}
 800578e:	e025      	b.n	80057dc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800579e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fe f804 	bl	80037e4 <HAL_I2C_ErrorCallback>
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d11b      	bne.n	8005834 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005832:	e0bd      	b.n	80059b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d129      	bne.n	8005892 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d00a      	beq.n	800586a <I2C_MasterReceive_BTF+0x86>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d007      	beq.n	800586a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005890:	e08e      	b.n	80059b0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d176      	bne.n	800598a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d002      	beq.n	80058a8 <I2C_MasterReceive_BTF+0xc4>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d108      	bne.n	80058ba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e019      	b.n	80058ee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d002      	beq.n	80058c6 <I2C_MasterReceive_BTF+0xe2>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d108      	bne.n	80058d8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e00a      	b.n	80058ee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d007      	beq.n	80058ee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005948:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d10a      	bne.n	8005974 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fcce 	bl	800530e <HAL_I2C_MemRxCpltCallback>
}
 8005972:	e01d      	b.n	80059b0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2212      	movs	r2, #18
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fc8d 	bl	80052a2 <HAL_I2C_MasterRxCpltCallback>
}
 8005988:	e012      	b.n	80059b0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d117      	bne.n	80059fc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059e4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059e6:	e067      	b.n	8005ab8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	611a      	str	r2, [r3, #16]
}
 80059fa:	e05d      	b.n	8005ab8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a04:	d133      	bne.n	8005a6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b21      	cmp	r3, #33	; 0x21
 8005a10:	d109      	bne.n	8005a26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	e008      	b.n	8005a38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <I2C_Master_SB+0x92>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d032      	beq.n	8005ab8 <I2C_Master_SB+0x100>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02d      	beq.n	8005ab8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	e024      	b.n	8005ab8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	11db      	asrs	r3, r3, #7
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0306 	and.w	r3, r3, #6
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f063 030f 	orn	r3, r3, #15
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	611a      	str	r2, [r3, #16]
}
 8005a92:	e011      	b.n	8005ab8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10d      	bne.n	8005ab8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	11db      	asrs	r3, r3, #7
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f063 030e 	orn	r3, r3, #14
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <I2C_Master_ADD10+0x26>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d108      	bne.n	8005afc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <I2C_Master_ADD10+0x48>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b091      	sub	sp, #68	; 0x44
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	f040 8169 	bne.w	8005e16 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <I2C_Master_ADDR+0x54>
 8005b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d10b      	bne.n	8005b6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	e160      	b.n	8005e2e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d11d      	bne.n	8005bb0 <I2C_Master_ADDR+0x98>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b7c:	d118      	bne.n	8005bb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	651a      	str	r2, [r3, #80]	; 0x50
 8005bae:	e13e      	b.n	8005e2e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e115      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 808a 	bne.w	8005d02 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf4:	d137      	bne.n	8005c66 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c04:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c14:	d113      	bne.n	8005c3e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	e0e7      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e0d3      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d02e      	beq.n	8005cca <I2C_Master_ADDR+0x1b2>
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d02b      	beq.n	8005cca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b12      	cmp	r3, #18
 8005c76:	d102      	bne.n	8005c7e <I2C_Master_ADDR+0x166>
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d125      	bne.n	8005cca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d00e      	beq.n	8005ca2 <I2C_Master_ADDR+0x18a>
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d00b      	beq.n	8005ca2 <I2C_Master_ADDR+0x18a>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d008      	beq.n	8005ca2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	e0a1      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e085      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d14d      	bne.n	8005da8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d016      	beq.n	8005d40 <I2C_Master_ADDR+0x228>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d013      	beq.n	8005d40 <I2C_Master_ADDR+0x228>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d010      	beq.n	8005d40 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e007      	b.n	8005d50 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d4e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d117      	bne.n	8005d90 <I2C_Master_ADDR+0x278>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d66:	d00b      	beq.n	8005d80 <I2C_Master_ADDR+0x268>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d008      	beq.n	8005d80 <I2C_Master_ADDR+0x268>
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d005      	beq.n	8005d80 <I2C_Master_ADDR+0x268>
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d002      	beq.n	8005d80 <I2C_Master_ADDR+0x268>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d107      	bne.n	8005d90 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	e032      	b.n	8005e0e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc6:	d117      	bne.n	8005df8 <I2C_Master_ADDR+0x2e0>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dce:	d00b      	beq.n	8005de8 <I2C_Master_ADDR+0x2d0>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d008      	beq.n	8005de8 <I2C_Master_ADDR+0x2d0>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d005      	beq.n	8005de8 <I2C_Master_ADDR+0x2d0>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d002      	beq.n	8005de8 <I2C_Master_ADDR+0x2d0>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d107      	bne.n	8005df8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005df6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e14:	e00b      	b.n	8005e2e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	e7ff      	b.n	8005e2e <I2C_Master_ADDR+0x316>
 8005e2e:	bf00      	nop
 8005e30:	3744      	adds	r7, #68	; 0x44
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02b      	beq.n	8005eac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d114      	bne.n	8005eac <I2C_SlaveTransmit_TXE+0x72>
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b29      	cmp	r3, #41	; 0x29
 8005e86:	d111      	bne.n	8005eac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2221      	movs	r2, #33	; 0x21
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2228      	movs	r2, #40	; 0x28
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fa05 	bl	80052b6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d02c      	beq.n	8005f6a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d114      	bne.n	8005f6a <I2C_SlaveReceive_RXNE+0x74>
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d111      	bne.n	8005f6a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2222      	movs	r2, #34	; 0x22
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2228      	movs	r2, #40	; 0x28
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff f9b0 	bl	80052ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fd0:	2b28      	cmp	r3, #40	; 0x28
 8005fd2:	d127      	bne.n	8006024 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	089b      	lsrs	r3, r3, #2
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	81bb      	strh	r3, [r7, #12]
 8006006:	e002      	b.n	800600e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006016:	89ba      	ldrh	r2, [r7, #12]
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff f95e 	bl	80052de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006022:	e00e      	b.n	8006042 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800606a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800606c:	2300      	movs	r3, #0
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a8:	d172      	bne.n	8006190 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b22      	cmp	r3, #34	; 0x22
 80060ae:	d002      	beq.n	80060b6 <I2C_Slave_STOPF+0x6a>
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b2a      	cmp	r3, #42	; 0x2a
 80060b4:	d135      	bne.n	8006122 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe f9dc 	bl	80044ac <HAL_DMA_GetState>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d049      	beq.n	800618e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	4a69      	ldr	r2, [pc, #420]	; (80062a4 <I2C_Slave_STOPF+0x258>)
 8006100:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe f824 	bl	8004154 <HAL_DMA_Abort_IT>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d03d      	beq.n	800618e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006120:	e035      	b.n	800618e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b29a      	uxth	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006154:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe f9a6 	bl	80044ac <HAL_DMA_GetState>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d014      	beq.n	8006190 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616a:	4a4e      	ldr	r2, [pc, #312]	; (80062a4 <I2C_Slave_STOPF+0x258>)
 800616c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd ffee 	bl	8004154 <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	e000      	b.n	8006190 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800618e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d03e      	beq.n	8006218 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d112      	bne.n	80061ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d112      	bne.n	8006202 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f043 0204 	orr.w	r2, r3, #4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f843 	bl	80062ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006226:	e039      	b.n	800629c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b2a      	cmp	r3, #42	; 0x2a
 800622c:	d109      	bne.n	8006242 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2228      	movs	r2, #40	; 0x28
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff f844 	bl	80052ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b28      	cmp	r3, #40	; 0x28
 800624c:	d111      	bne.n	8006272 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <I2C_Slave_STOPF+0x25c>)
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f845 	bl	80052fa <HAL_I2C_ListenCpltCallback>
}
 8006270:	e014      	b.n	800629c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	2b22      	cmp	r3, #34	; 0x22
 8006278:	d002      	beq.n	8006280 <I2C_Slave_STOPF+0x234>
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b22      	cmp	r3, #34	; 0x22
 800627e:	d10d      	bne.n	800629c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff f817 	bl	80052ca <HAL_I2C_SlaveRxCpltCallback>
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	08006861 	.word	0x08006861
 80062a8:	ffff0000 	.word	0xffff0000

080062ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d002      	beq.n	80062d0 <I2C_ITError+0x24>
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d10a      	bne.n	80062e6 <I2C_ITError+0x3a>
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b22      	cmp	r3, #34	; 0x22
 80062d4:	d107      	bne.n	80062e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062ec:	2b28      	cmp	r3, #40	; 0x28
 80062ee:	d107      	bne.n	8006300 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2228      	movs	r2, #40	; 0x28
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062fe:	e015      	b.n	800632c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d00a      	beq.n	8006326 <I2C_ITError+0x7a>
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b60      	cmp	r3, #96	; 0x60
 8006314:	d007      	beq.n	8006326 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d162      	bne.n	8006402 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b01      	cmp	r3, #1
 8006358:	d020      	beq.n	800639c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	4a6a      	ldr	r2, [pc, #424]	; (8006508 <I2C_ITError+0x25c>)
 8006360:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fef4 	bl	8004154 <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8089 	beq.w	8006486 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006396:	4610      	mov	r0, r2
 8006398:	4798      	blx	r3
 800639a:	e074      	b.n	8006486 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	4a59      	ldr	r2, [pc, #356]	; (8006508 <I2C_ITError+0x25c>)
 80063a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fd fed3 	bl	8004154 <HAL_DMA_Abort_IT>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d068      	beq.n	8006486 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d10b      	bne.n	80063da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	e041      	b.n	8006486 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b60      	cmp	r3, #96	; 0x60
 800640c:	d125      	bne.n	800645a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d10b      	bne.n	8006442 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0201 	bic.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fe ff65 	bl	8005322 <HAL_I2C_AbortCpltCallback>
 8006458:	e015      	b.n	8006486 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d10b      	bne.n	8006480 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fd f9af 	bl	80037e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10e      	bne.n	80064b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d113      	bne.n	8006500 <I2C_ITError+0x254>
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	2b28      	cmp	r3, #40	; 0x28
 80064dc:	d110      	bne.n	8006500 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	; (800650c <I2C_ITError+0x260>)
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe fefd 	bl	80052fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08006861 	.word	0x08006861
 800650c:	ffff0000 	.word	0xffff0000

08006510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	461a      	mov	r2, r3
 800651e:	4603      	mov	r3, r0
 8006520:	817b      	strh	r3, [r7, #10]
 8006522:	460b      	mov	r3, r1
 8006524:	813b      	strh	r3, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2200      	movs	r2, #0
 8006542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa32 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006560:	d103      	bne.n	800656a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e05f      	b.n	800662e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800657c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	492d      	ldr	r1, [pc, #180]	; (8006638 <I2C_RequestMemoryWrite+0x128>)
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fa6a 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e04c      	b.n	800662e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ac:	6a39      	ldr	r1, [r7, #32]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fad4 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d107      	bne.n	80065d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e02b      	b.n	800662e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	611a      	str	r2, [r3, #16]
 80065e6:	e021      	b.n	800662c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065e8:	893b      	ldrh	r3, [r7, #8]
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f8:	6a39      	ldr	r1, [r7, #32]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 faae 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b04      	cmp	r3, #4
 800660c:	d107      	bne.n	800661e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e005      	b.n	800662e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006622:	893b      	ldrh	r3, [r7, #8]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	00010002 	.word	0x00010002

0800663c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006658:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800666e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	2200      	movs	r2, #0
 800667e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	2200      	movs	r2, #0
 800668e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006696:	2b21      	cmp	r3, #33	; 0x21
 8006698:	d007      	beq.n	80066aa <I2C_DMAXferCplt+0x6e>
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80066a0:	2b22      	cmp	r3, #34	; 0x22
 80066a2:	d131      	bne.n	8006708 <I2C_DMAXferCplt+0xcc>
 80066a4:	7cbb      	ldrb	r3, [r7, #18]
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d12e      	bne.n	8006708 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066b8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	2b29      	cmp	r3, #41	; 0x29
 80066c4:	d10a      	bne.n	80066dc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2221      	movs	r2, #33	; 0x21
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2228      	movs	r2, #40	; 0x28
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066d4:	6978      	ldr	r0, [r7, #20]
 80066d6:	f7fe fdee 	bl	80052b6 <HAL_I2C_SlaveTxCpltCallback>
 80066da:	e00c      	b.n	80066f6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	2b2a      	cmp	r3, #42	; 0x2a
 80066e0:	d109      	bne.n	80066f6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2222      	movs	r2, #34	; 0x22
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2228      	movs	r2, #40	; 0x28
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f7fe fdea 	bl	80052ca <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006704:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006706:	e06a      	b.n	80067de <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d064      	beq.n	80067de <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b01      	cmp	r3, #1
 800671c:	d107      	bne.n	800672e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800673c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006744:	d009      	beq.n	800675a <I2C_DMAXferCplt+0x11e>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d006      	beq.n	800675a <I2C_DMAXferCplt+0x11e>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006752:	d002      	beq.n	800675a <I2C_DMAXferCplt+0x11e>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b20      	cmp	r3, #32
 8006758:	d107      	bne.n	800676a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006768:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006778:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006788:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2200      	movs	r2, #0
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	f7fd f823 	bl	80037e4 <HAL_I2C_ErrorCallback>
}
 800679e:	e01e      	b.n	80067de <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d10a      	bne.n	80067ca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80067c2:	6978      	ldr	r0, [r7, #20]
 80067c4:	f7fe fda3 	bl	800530e <HAL_I2C_MemRxCpltCallback>
}
 80067c8:	e009      	b.n	80067de <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2212      	movs	r2, #18
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80067d8:	6978      	ldr	r0, [r7, #20]
 80067da:	f7fe fd62 	bl	80052a2 <HAL_I2C_MasterRxCpltCallback>
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	2200      	movs	r2, #0
 8006802:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	2200      	movs	r2, #0
 8006812:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fd fe57 	bl	80044c8 <HAL_DMA_GetError>
 800681a:	4603      	mov	r3, r0
 800681c:	2b02      	cmp	r3, #2
 800681e:	d01b      	beq.n	8006858 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0210 	orr.w	r2, r3, #16
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7fc ffc6 	bl	80037e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800687a:	4b4b      	ldr	r3, [pc, #300]	; (80069a8 <I2C_DMAAbort+0x148>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <I2C_DMAAbort+0x14c>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	0a1a      	lsrs	r2, r3, #8
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00da      	lsls	r2, r3, #3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068a6:	e00a      	b.n	80068be <I2C_DMAAbort+0x5e>
    }
    count--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068bc:	d0ea      	beq.n	8006894 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	2200      	movs	r2, #0
 80068cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	2200      	movs	r2, #0
 80068dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	2200      	movs	r2, #0
 8006902:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	2200      	movs	r2, #0
 8006912:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b60      	cmp	r3, #96	; 0x60
 800692e:	d10e      	bne.n	800694e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2200      	movs	r2, #0
 8006944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f7fe fceb 	bl	8005322 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800694c:	e027      	b.n	800699e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006954:	2b28      	cmp	r3, #40	; 0x28
 8006956:	d117      	bne.n	8006988 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006976:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2228      	movs	r2, #40	; 0x28
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006986:	e007      	b.n	8006998 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006998:	6978      	ldr	r0, [r7, #20]
 800699a:	f7fc ff23 	bl	80037e4 <HAL_I2C_ErrorCallback>
}
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000020 	.word	0x20000020
 80069ac:	14f8b589 	.word	0x14f8b589

080069b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c0:	e025      	b.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d021      	beq.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fd f97b 	bl	8003cc4 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d116      	bne.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e023      	b.n	8006a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10d      	bne.n	8006a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	e00c      	b.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	2301      	moveq	r3, #1
 8006a48:	2300      	movne	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d0b6      	beq.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a6c:	e051      	b.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d123      	bne.n	8006ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f043 0204 	orr.w	r2, r3, #4
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e046      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d021      	beq.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fd f8f9 	bl	8003cc4 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d116      	bne.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e020      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10c      	bne.n	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	43da      	mvns	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e00b      	b.n	8006b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d18d      	bne.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b68:	e02d      	b.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f86a 	bl	8006c44 <I2C_IsAcknowledgeFailed>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e02d      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d021      	beq.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fd f89f 	bl	8003cc4 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d116      	bne.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e007      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d1ca      	bne.n	8006b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	0a1a      	lsrs	r2, r3, #8
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e008      	b.n	8006c30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2c:	d0e9      	beq.n	8006c02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000020 	.word	0x20000020
 8006c40:	14f8b589 	.word	0x14f8b589

08006c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5a:	d11b      	bne.n	8006c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f043 0204 	orr.w	r2, r3, #4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006cb2:	d103      	bne.n	8006cbc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cba:	e007      	b.n	8006ccc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006cc4:	d102      	bne.n	8006ccc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d129      	bne.n	8006d42 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2224      	movs	r2, #36	; 0x24
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0210 	bic.w	r2, r2, #16
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006d42:	2302      	movs	r3, #2
  }
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d12a      	bne.n	8006dc0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2224      	movs	r2, #36	; 0x24
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	f023 030f 	bic.w	r3, r3, #15
 8006d90:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	89fb      	ldrh	r3, [r7, #14]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	89fa      	ldrh	r2, [r7, #14]
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_PWREx_EnableOverDrive+0x90>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006df6:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <HAL_PWREx_EnableOverDrive+0x94>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dfc:	f7fc ff62 	bl	8003cc4 <HAL_GetTick>
 8006e00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e02:	e009      	b.n	8006e18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e04:	f7fc ff5e 	bl	8003cc4 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e12:	d901      	bls.n	8006e18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e01f      	b.n	8006e58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e18:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e24:	d1ee      	bne.n	8006e04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e2c:	f7fc ff4a 	bl	8003cc4 <HAL_GetTick>
 8006e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e32:	e009      	b.n	8006e48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e34:	f7fc ff46 	bl	8003cc4 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e42:	d901      	bls.n	8006e48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e007      	b.n	8006e58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e54:	d1ee      	bne.n	8006e34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40023800 	.word	0x40023800
 8006e64:	420e0040 	.word	0x420e0040
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	420e0044 	.word	0x420e0044

08006e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e264      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d075      	beq.n	8006f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e8e:	4ba3      	ldr	r3, [pc, #652]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d00c      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9a:	4ba0      	ldr	r3, [pc, #640]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d112      	bne.n	8006ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ea6:	4b9d      	ldr	r3, [pc, #628]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eb2:	d10b      	bne.n	8006ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb4:	4b99      	ldr	r3, [pc, #612]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05b      	beq.n	8006f78 <HAL_RCC_OscConfig+0x108>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d157      	bne.n	8006f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e23f      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d106      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x74>
 8006ed6:	4b91      	ldr	r3, [pc, #580]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a90      	ldr	r2, [pc, #576]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e01d      	b.n	8006f20 <HAL_RCC_OscConfig+0xb0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x98>
 8006eee:	4b8b      	ldr	r3, [pc, #556]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a8a      	ldr	r2, [pc, #552]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	4b88      	ldr	r3, [pc, #544]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a87      	ldr	r2, [pc, #540]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	e00b      	b.n	8006f20 <HAL_RCC_OscConfig+0xb0>
 8006f08:	4b84      	ldr	r3, [pc, #528]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a83      	ldr	r2, [pc, #524]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4b81      	ldr	r3, [pc, #516]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a80      	ldr	r2, [pc, #512]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d013      	beq.n	8006f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f28:	f7fc fecc 	bl	8003cc4 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f30:	f7fc fec8 	bl	8003cc4 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b64      	cmp	r3, #100	; 0x64
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e204      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f42:	4b76      	ldr	r3, [pc, #472]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0xc0>
 8006f4e:	e014      	b.n	8006f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f50:	f7fc feb8 	bl	8003cc4 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f58:	f7fc feb4 	bl	8003cc4 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b64      	cmp	r3, #100	; 0x64
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1f0      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6a:	4b6c      	ldr	r3, [pc, #432]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f0      	bne.n	8006f58 <HAL_RCC_OscConfig+0xe8>
 8006f76:	e000      	b.n	8006f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d063      	beq.n	800704e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f86:	4b65      	ldr	r3, [pc, #404]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f92:	4b62      	ldr	r3, [pc, #392]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d11c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f9e:	4b5f      	ldr	r3, [pc, #380]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d116      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006faa:	4b5c      	ldr	r3, [pc, #368]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x152>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e1c4      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc2:	4b56      	ldr	r3, [pc, #344]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	4952      	ldr	r1, [pc, #328]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	e03a      	b.n	800704e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d020      	beq.n	8007022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe0:	4b4f      	ldr	r3, [pc, #316]	; (8007120 <HAL_RCC_OscConfig+0x2b0>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe6:	f7fc fe6d 	bl	8003cc4 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fec:	e008      	b.n	8007000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fee:	f7fc fe69 	bl	8003cc4 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e1a5      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007000:	4b46      	ldr	r3, [pc, #280]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0f0      	beq.n	8006fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800700c:	4b43      	ldr	r3, [pc, #268]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4940      	ldr	r1, [pc, #256]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]
 8007020:	e015      	b.n	800704e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCC_OscConfig+0x2b0>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fc fe4c 	bl	8003cc4 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007030:	f7fc fe48 	bl	8003cc4 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e184      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007042:	4b36      	ldr	r3, [pc, #216]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1f0      	bne.n	8007030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d030      	beq.n	80070bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007062:	4b30      	ldr	r3, [pc, #192]	; (8007124 <HAL_RCC_OscConfig+0x2b4>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007068:	f7fc fe2c 	bl	8003cc4 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007070:	f7fc fe28 	bl	8003cc4 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e164      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007082:	4b26      	ldr	r3, [pc, #152]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 8007084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0x200>
 800708e:	e015      	b.n	80070bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007090:	4b24      	ldr	r3, [pc, #144]	; (8007124 <HAL_RCC_OscConfig+0x2b4>)
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007096:	f7fc fe15 	bl	8003cc4 <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800709c:	e008      	b.n	80070b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709e:	f7fc fe11 	bl	8003cc4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e14d      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b0:	4b1a      	ldr	r3, [pc, #104]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 80070b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1f0      	bne.n	800709e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a0 	beq.w	800720a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	4b0f      	ldr	r3, [pc, #60]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	4a0e      	ldr	r2, [pc, #56]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e8:	6413      	str	r3, [r2, #64]	; 0x40
 80070ea:	4b0c      	ldr	r3, [pc, #48]	; (800711c <HAL_RCC_OscConfig+0x2ac>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_RCC_OscConfig+0x2b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d121      	bne.n	800714a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <HAL_RCC_OscConfig+0x2b8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a07      	ldr	r2, [pc, #28]	; (8007128 <HAL_RCC_OscConfig+0x2b8>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007112:	f7fc fdd7 	bl	8003cc4 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007118:	e011      	b.n	800713e <HAL_RCC_OscConfig+0x2ce>
 800711a:	bf00      	nop
 800711c:	40023800 	.word	0x40023800
 8007120:	42470000 	.word	0x42470000
 8007124:	42470e80 	.word	0x42470e80
 8007128:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712c:	f7fc fdca 	bl	8003cc4 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e106      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713e:	4b85      	ldr	r3, [pc, #532]	; (8007354 <HAL_RCC_OscConfig+0x4e4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d106      	bne.n	8007160 <HAL_RCC_OscConfig+0x2f0>
 8007152:	4b81      	ldr	r3, [pc, #516]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	4a80      	ldr	r2, [pc, #512]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	6713      	str	r3, [r2, #112]	; 0x70
 800715e:	e01c      	b.n	800719a <HAL_RCC_OscConfig+0x32a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b05      	cmp	r3, #5
 8007166:	d10c      	bne.n	8007182 <HAL_RCC_OscConfig+0x312>
 8007168:	4b7b      	ldr	r3, [pc, #492]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716c:	4a7a      	ldr	r2, [pc, #488]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 800716e:	f043 0304 	orr.w	r3, r3, #4
 8007172:	6713      	str	r3, [r2, #112]	; 0x70
 8007174:	4b78      	ldr	r3, [pc, #480]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	4a77      	ldr	r2, [pc, #476]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	6713      	str	r3, [r2, #112]	; 0x70
 8007180:	e00b      	b.n	800719a <HAL_RCC_OscConfig+0x32a>
 8007182:	4b75      	ldr	r3, [pc, #468]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	4a74      	ldr	r2, [pc, #464]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	6713      	str	r3, [r2, #112]	; 0x70
 800718e:	4b72      	ldr	r3, [pc, #456]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a71      	ldr	r2, [pc, #452]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007194:	f023 0304 	bic.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d015      	beq.n	80071ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a2:	f7fc fd8f 	bl	8003cc4 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a8:	e00a      	b.n	80071c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fc fd8b 	bl	8003cc4 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e0c5      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c0:	4b65      	ldr	r3, [pc, #404]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ee      	beq.n	80071aa <HAL_RCC_OscConfig+0x33a>
 80071cc:	e014      	b.n	80071f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ce:	f7fc fd79 	bl	8003cc4 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fc fd75 	bl	8003cc4 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e0af      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ec:	4b5a      	ldr	r3, [pc, #360]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ee      	bne.n	80071d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d105      	bne.n	800720a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071fe:	4b56      	ldr	r3, [pc, #344]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	4a55      	ldr	r2, [pc, #340]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007208:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 809b 	beq.w	800734a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007214:	4b50      	ldr	r3, [pc, #320]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 030c 	and.w	r3, r3, #12
 800721c:	2b08      	cmp	r3, #8
 800721e:	d05c      	beq.n	80072da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d141      	bne.n	80072ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007228:	4b4c      	ldr	r3, [pc, #304]	; (800735c <HAL_RCC_OscConfig+0x4ec>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800722e:	f7fc fd49 	bl	8003cc4 <HAL_GetTick>
 8007232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007236:	f7fc fd45 	bl	8003cc4 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e081      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007248:	4b43      	ldr	r3, [pc, #268]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f0      	bne.n	8007236 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	019b      	lsls	r3, r3, #6
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	3b01      	subs	r3, #1
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	4937      	ldr	r1, [pc, #220]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 800727a:	4313      	orrs	r3, r2
 800727c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800727e:	4b37      	ldr	r3, [pc, #220]	; (800735c <HAL_RCC_OscConfig+0x4ec>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007284:	f7fc fd1e 	bl	8003cc4 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800728c:	f7fc fd1a 	bl	8003cc4 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e056      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0x41c>
 80072aa:	e04e      	b.n	800734a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ac:	4b2b      	ldr	r3, [pc, #172]	; (800735c <HAL_RCC_OscConfig+0x4ec>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b2:	f7fc fd07 	bl	8003cc4 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fc fd03 	bl	8003cc4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e03f      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072cc:	4b22      	ldr	r3, [pc, #136]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f0      	bne.n	80072ba <HAL_RCC_OscConfig+0x44a>
 80072d8:	e037      	b.n	800734a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e032      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072e6:	4b1c      	ldr	r3, [pc, #112]	; (8007358 <HAL_RCC_OscConfig+0x4e8>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d028      	beq.n	8007346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d121      	bne.n	8007346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d11a      	bne.n	8007346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007316:	4013      	ands	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800731c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800731e:	4293      	cmp	r3, r2
 8007320:	d111      	bne.n	8007346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	3b01      	subs	r3, #1
 8007330:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d107      	bne.n	8007346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007342:	429a      	cmp	r2, r3
 8007344:	d001      	beq.n	800734a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40007000 	.word	0x40007000
 8007358:	40023800 	.word	0x40023800
 800735c:	42470060 	.word	0x42470060

08007360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0cc      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007374:	4b68      	ldr	r3, [pc, #416]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d90c      	bls.n	800739c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007382:	4b65      	ldr	r3, [pc, #404]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800738a:	4b63      	ldr	r3, [pc, #396]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d001      	beq.n	800739c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e0b8      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d020      	beq.n	80073ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073b4:	4b59      	ldr	r3, [pc, #356]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4a58      	ldr	r2, [pc, #352]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073cc:	4b53      	ldr	r3, [pc, #332]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	4a52      	ldr	r2, [pc, #328]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d8:	4b50      	ldr	r3, [pc, #320]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	494d      	ldr	r1, [pc, #308]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d044      	beq.n	8007480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d107      	bne.n	800740e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fe:	4b47      	ldr	r3, [pc, #284]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d119      	bne.n	800743e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e07f      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d003      	beq.n	800741e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800741a:	2b03      	cmp	r3, #3
 800741c:	d107      	bne.n	800742e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741e:	4b3f      	ldr	r3, [pc, #252]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e06f      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742e:	4b3b      	ldr	r3, [pc, #236]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e067      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800743e:	4b37      	ldr	r3, [pc, #220]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f023 0203 	bic.w	r2, r3, #3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4934      	ldr	r1, [pc, #208]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	4313      	orrs	r3, r2
 800744e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007450:	f7fc fc38 	bl	8003cc4 <HAL_GetTick>
 8007454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007456:	e00a      	b.n	800746e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007458:	f7fc fc34 	bl	8003cc4 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f241 3288 	movw	r2, #5000	; 0x1388
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e04f      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746e:	4b2b      	ldr	r3, [pc, #172]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 020c 	and.w	r2, r3, #12
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	429a      	cmp	r2, r3
 800747e:	d1eb      	bne.n	8007458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007480:	4b25      	ldr	r3, [pc, #148]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d20c      	bcs.n	80074a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800748e:	4b22      	ldr	r3, [pc, #136]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007496:	4b20      	ldr	r3, [pc, #128]	; (8007518 <HAL_RCC_ClockConfig+0x1b8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d001      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e032      	b.n	800750e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074b4:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	4916      	ldr	r1, [pc, #88]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d009      	beq.n	80074e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074d2:	4b12      	ldr	r3, [pc, #72]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	490e      	ldr	r1, [pc, #56]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074e6:	f000 f821 	bl	800752c <HAL_RCC_GetSysClockFreq>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	091b      	lsrs	r3, r3, #4
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	490a      	ldr	r1, [pc, #40]	; (8007520 <HAL_RCC_ClockConfig+0x1c0>)
 80074f8:	5ccb      	ldrb	r3, [r1, r3]
 80074fa:	fa22 f303 	lsr.w	r3, r2, r3
 80074fe:	4a09      	ldr	r2, [pc, #36]	; (8007524 <HAL_RCC_ClockConfig+0x1c4>)
 8007500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f7fc fb98 	bl	8003c3c <HAL_InitTick>

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40023c00 	.word	0x40023c00
 800751c:	40023800 	.word	0x40023800
 8007520:	0800b49c 	.word	0x0800b49c
 8007524:	20000020 	.word	0x20000020
 8007528:	20000024 	.word	0x20000024

0800752c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800752c:	b5b0      	push	{r4, r5, r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007532:	2100      	movs	r1, #0
 8007534:	6079      	str	r1, [r7, #4]
 8007536:	2100      	movs	r1, #0
 8007538:	60f9      	str	r1, [r7, #12]
 800753a:	2100      	movs	r1, #0
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800753e:	2100      	movs	r1, #0
 8007540:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007542:	4952      	ldr	r1, [pc, #328]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 8007544:	6889      	ldr	r1, [r1, #8]
 8007546:	f001 010c 	and.w	r1, r1, #12
 800754a:	2908      	cmp	r1, #8
 800754c:	d00d      	beq.n	800756a <HAL_RCC_GetSysClockFreq+0x3e>
 800754e:	2908      	cmp	r1, #8
 8007550:	f200 8094 	bhi.w	800767c <HAL_RCC_GetSysClockFreq+0x150>
 8007554:	2900      	cmp	r1, #0
 8007556:	d002      	beq.n	800755e <HAL_RCC_GetSysClockFreq+0x32>
 8007558:	2904      	cmp	r1, #4
 800755a:	d003      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0x38>
 800755c:	e08e      	b.n	800767c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800755e:	4b4c      	ldr	r3, [pc, #304]	; (8007690 <HAL_RCC_GetSysClockFreq+0x164>)
 8007560:	60bb      	str	r3, [r7, #8]
       break;
 8007562:	e08e      	b.n	8007682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007564:	4b4b      	ldr	r3, [pc, #300]	; (8007694 <HAL_RCC_GetSysClockFreq+0x168>)
 8007566:	60bb      	str	r3, [r7, #8]
      break;
 8007568:	e08b      	b.n	8007682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800756a:	4948      	ldr	r1, [pc, #288]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 800756c:	6849      	ldr	r1, [r1, #4]
 800756e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007572:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007574:	4945      	ldr	r1, [pc, #276]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 8007576:	6849      	ldr	r1, [r1, #4]
 8007578:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800757c:	2900      	cmp	r1, #0
 800757e:	d024      	beq.n	80075ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007580:	4942      	ldr	r1, [pc, #264]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 8007582:	6849      	ldr	r1, [r1, #4]
 8007584:	0989      	lsrs	r1, r1, #6
 8007586:	4608      	mov	r0, r1
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007590:	f04f 0500 	mov.w	r5, #0
 8007594:	ea00 0204 	and.w	r2, r0, r4
 8007598:	ea01 0305 	and.w	r3, r1, r5
 800759c:	493d      	ldr	r1, [pc, #244]	; (8007694 <HAL_RCC_GetSysClockFreq+0x168>)
 800759e:	fb01 f003 	mul.w	r0, r1, r3
 80075a2:	2100      	movs	r1, #0
 80075a4:	fb01 f102 	mul.w	r1, r1, r2
 80075a8:	1844      	adds	r4, r0, r1
 80075aa:	493a      	ldr	r1, [pc, #232]	; (8007694 <HAL_RCC_GetSysClockFreq+0x168>)
 80075ac:	fba2 0101 	umull	r0, r1, r2, r1
 80075b0:	1863      	adds	r3, r4, r1
 80075b2:	4619      	mov	r1, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	f7f9 f844 	bl	8000648 <__aeabi_uldivmod>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4613      	mov	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e04a      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075ca:	4b30      	ldr	r3, [pc, #192]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	099b      	lsrs	r3, r3, #6
 80075d0:	461a      	mov	r2, r3
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075da:	f04f 0100 	mov.w	r1, #0
 80075de:	ea02 0400 	and.w	r4, r2, r0
 80075e2:	ea03 0501 	and.w	r5, r3, r1
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	014b      	lsls	r3, r1, #5
 80075f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075f8:	0142      	lsls	r2, r0, #5
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	1b00      	subs	r0, r0, r4
 8007600:	eb61 0105 	sbc.w	r1, r1, r5
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	018b      	lsls	r3, r1, #6
 800760e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007612:	0182      	lsls	r2, r0, #6
 8007614:	1a12      	subs	r2, r2, r0
 8007616:	eb63 0301 	sbc.w	r3, r3, r1
 800761a:	f04f 0000 	mov.w	r0, #0
 800761e:	f04f 0100 	mov.w	r1, #0
 8007622:	00d9      	lsls	r1, r3, #3
 8007624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007628:	00d0      	lsls	r0, r2, #3
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	1912      	adds	r2, r2, r4
 8007630:	eb45 0303 	adc.w	r3, r5, r3
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	0299      	lsls	r1, r3, #10
 800763e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007642:	0290      	lsls	r0, r2, #10
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4610      	mov	r0, r2
 800764a:	4619      	mov	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	461a      	mov	r2, r3
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	f7f8 fff8 	bl	8000648 <__aeabi_uldivmod>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4613      	mov	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_RCC_GetSysClockFreq+0x160>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	3301      	adds	r3, #1
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	fbb2 f3f3 	udiv	r3, r2, r3
 8007678:	60bb      	str	r3, [r7, #8]
      break;
 800767a:	e002      	b.n	8007682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <HAL_RCC_GetSysClockFreq+0x164>)
 800767e:	60bb      	str	r3, [r7, #8]
      break;
 8007680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007682:	68bb      	ldr	r3, [r7, #8]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bdb0      	pop	{r4, r5, r7, pc}
 800768c:	40023800 	.word	0x40023800
 8007690:	00f42400 	.word	0x00f42400
 8007694:	017d7840 	.word	0x017d7840

08007698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800769c:	4b03      	ldr	r3, [pc, #12]	; (80076ac <HAL_RCC_GetHCLKFreq+0x14>)
 800769e:	681b      	ldr	r3, [r3, #0]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000020 	.word	0x20000020

080076b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076b4:	f7ff fff0 	bl	8007698 <HAL_RCC_GetHCLKFreq>
 80076b8:	4602      	mov	r2, r0
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	0a9b      	lsrs	r3, r3, #10
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	4903      	ldr	r1, [pc, #12]	; (80076d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076c6:	5ccb      	ldrb	r3, [r1, r3]
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40023800 	.word	0x40023800
 80076d4:	0800b4ac 	.word	0x0800b4ac

080076d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076dc:	f7ff ffdc 	bl	8007698 <HAL_RCC_GetHCLKFreq>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	0b5b      	lsrs	r3, r3, #13
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	4903      	ldr	r1, [pc, #12]	; (80076fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ee:	5ccb      	ldrb	r3, [r1, r3]
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40023800 	.word	0x40023800
 80076fc:	0800b4ac 	.word	0x0800b4ac

08007700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e03f      	b.n	8007792 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fc f91c 	bl	8003964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2224      	movs	r2, #36	; 0x24
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f929 	bl	800799c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b08a      	sub	sp, #40	; 0x28
 800779e:	af02      	add	r7, sp, #8
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d17c      	bne.n	80078b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <HAL_UART_Transmit+0x2c>
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e075      	b.n	80078b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_UART_Transmit+0x3e>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e06e      	b.n	80078b6 <HAL_UART_Transmit+0x11c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2221      	movs	r2, #33	; 0x21
 80077ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ee:	f7fc fa69 	bl	8003cc4 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d108      	bne.n	800781c <HAL_UART_Transmit+0x82>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e003      	b.n	8007824 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800782c:	e02a      	b.n	8007884 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2200      	movs	r2, #0
 8007836:	2180      	movs	r1, #128	; 0x80
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f840 	bl	80078be <UART_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e036      	b.n	80078b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800785c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	3302      	adds	r3, #2
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	e007      	b.n	8007876 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	3301      	adds	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1cf      	bne.n	800782e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	2140      	movs	r1, #64	; 0x40
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f810 	bl	80078be <UART_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e006      	b.n	80078b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e000      	b.n	80078b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b090      	sub	sp, #64	; 0x40
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	603b      	str	r3, [r7, #0]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ce:	e050      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d04c      	beq.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <UART_WaitOnFlagUntilTimeout+0x30>
 80078de:	f7fc f9f1 	bl	8003cc4 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d241      	bcs.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800790e:	637a      	str	r2, [r7, #52]	; 0x34
 8007910:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3314      	adds	r3, #20
 8007928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	613b      	str	r3, [r7, #16]
   return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3314      	adds	r3, #20
 8007940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007942:	623a      	str	r2, [r7, #32]
 8007944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e00f      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4013      	ands	r3, r2
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	429a      	cmp	r2, r3
 8007980:	bf0c      	ite	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	2300      	movne	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	429a      	cmp	r2, r3
 800798e:	d09f      	beq.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3740      	adds	r7, #64	; 0x40
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	b09f      	sub	sp, #124	; 0x7c
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	68d9      	ldr	r1, [r3, #12]
 80079b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	ea40 0301 	orr.w	r3, r0, r1
 80079bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079e0:	f021 010c 	bic.w	r1, r1, #12
 80079e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ea:	430b      	orrs	r3, r1
 80079ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	6999      	ldr	r1, [r3, #24]
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	ea40 0301 	orr.w	r3, r0, r1
 8007a04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4bc5      	ldr	r3, [pc, #788]	; (8007d20 <UART_SetConfig+0x384>)
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d004      	beq.n	8007a1a <UART_SetConfig+0x7e>
 8007a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4bc3      	ldr	r3, [pc, #780]	; (8007d24 <UART_SetConfig+0x388>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d103      	bne.n	8007a22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a1a:	f7ff fe5d 	bl	80076d8 <HAL_RCC_GetPCLK2Freq>
 8007a1e:	6778      	str	r0, [r7, #116]	; 0x74
 8007a20:	e002      	b.n	8007a28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a22:	f7ff fe45 	bl	80076b0 <HAL_RCC_GetPCLK1Freq>
 8007a26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a30:	f040 80b6 	bne.w	8007ba0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a36:	461c      	mov	r4, r3
 8007a38:	f04f 0500 	mov.w	r5, #0
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	462b      	mov	r3, r5
 8007a40:	1891      	adds	r1, r2, r2
 8007a42:	6439      	str	r1, [r7, #64]	; 0x40
 8007a44:	415b      	adcs	r3, r3
 8007a46:	647b      	str	r3, [r7, #68]	; 0x44
 8007a48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a4c:	1912      	adds	r2, r2, r4
 8007a4e:	eb45 0303 	adc.w	r3, r5, r3
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f04f 0100 	mov.w	r1, #0
 8007a5a:	00d9      	lsls	r1, r3, #3
 8007a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a60:	00d0      	lsls	r0, r2, #3
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	1911      	adds	r1, r2, r4
 8007a68:	6639      	str	r1, [r7, #96]	; 0x60
 8007a6a:	416b      	adcs	r3, r5
 8007a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	1891      	adds	r1, r2, r2
 8007a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a7c:	415b      	adcs	r3, r3
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a88:	f7f8 fdde 	bl	8000648 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4ba5      	ldr	r3, [pc, #660]	; (8007d28 <UART_SetConfig+0x38c>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011e      	lsls	r6, r3, #4
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	f04f 0500 	mov.w	r5, #0
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	1891      	adds	r1, r2, r2
 8007aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8007aaa:	415b      	adcs	r3, r3
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ab2:	1912      	adds	r2, r2, r4
 8007ab4:	eb45 0303 	adc.w	r3, r5, r3
 8007ab8:	f04f 0000 	mov.w	r0, #0
 8007abc:	f04f 0100 	mov.w	r1, #0
 8007ac0:	00d9      	lsls	r1, r3, #3
 8007ac2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ac6:	00d0      	lsls	r0, r2, #3
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	1911      	adds	r1, r2, r4
 8007ace:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ad0:	416b      	adcs	r3, r5
 8007ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	1891      	adds	r1, r2, r2
 8007ae0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ae2:	415b      	adcs	r3, r3
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aee:	f7f8 fdab 	bl	8000648 <__aeabi_uldivmod>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4b8c      	ldr	r3, [pc, #560]	; (8007d28 <UART_SetConfig+0x38c>)
 8007af8:	fba3 1302 	umull	r1, r3, r3, r2
 8007afc:	095b      	lsrs	r3, r3, #5
 8007afe:	2164      	movs	r1, #100	; 0x64
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	3332      	adds	r3, #50	; 0x32
 8007b0a:	4a87      	ldr	r2, [pc, #540]	; (8007d28 <UART_SetConfig+0x38c>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b18:	441e      	add	r6, r3
 8007b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f04f 0100 	mov.w	r1, #0
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	1894      	adds	r4, r2, r2
 8007b28:	623c      	str	r4, [r7, #32]
 8007b2a:	415b      	adcs	r3, r3
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b32:	1812      	adds	r2, r2, r0
 8007b34:	eb41 0303 	adc.w	r3, r1, r3
 8007b38:	f04f 0400 	mov.w	r4, #0
 8007b3c:	f04f 0500 	mov.w	r5, #0
 8007b40:	00dd      	lsls	r5, r3, #3
 8007b42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b46:	00d4      	lsls	r4, r2, #3
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	1814      	adds	r4, r2, r0
 8007b4e:	653c      	str	r4, [r7, #80]	; 0x50
 8007b50:	414b      	adcs	r3, r1
 8007b52:	657b      	str	r3, [r7, #84]	; 0x54
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	1891      	adds	r1, r2, r2
 8007b60:	61b9      	str	r1, [r7, #24]
 8007b62:	415b      	adcs	r3, r3
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b6e:	f7f8 fd6b 	bl	8000648 <__aeabi_uldivmod>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4b6c      	ldr	r3, [pc, #432]	; (8007d28 <UART_SetConfig+0x38c>)
 8007b78:	fba3 1302 	umull	r1, r3, r3, r2
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	2164      	movs	r1, #100	; 0x64
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	3332      	adds	r3, #50	; 0x32
 8007b8a:	4a67      	ldr	r2, [pc, #412]	; (8007d28 <UART_SetConfig+0x38c>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	f003 0207 	and.w	r2, r3, #7
 8007b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4432      	add	r2, r6
 8007b9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b9e:	e0b9      	b.n	8007d14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba2:	461c      	mov	r4, r3
 8007ba4:	f04f 0500 	mov.w	r5, #0
 8007ba8:	4622      	mov	r2, r4
 8007baa:	462b      	mov	r3, r5
 8007bac:	1891      	adds	r1, r2, r2
 8007bae:	6139      	str	r1, [r7, #16]
 8007bb0:	415b      	adcs	r3, r3
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bb8:	1912      	adds	r2, r2, r4
 8007bba:	eb45 0303 	adc.w	r3, r5, r3
 8007bbe:	f04f 0000 	mov.w	r0, #0
 8007bc2:	f04f 0100 	mov.w	r1, #0
 8007bc6:	00d9      	lsls	r1, r3, #3
 8007bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bcc:	00d0      	lsls	r0, r2, #3
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	eb12 0804 	adds.w	r8, r2, r4
 8007bd6:	eb43 0905 	adc.w	r9, r3, r5
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f04f 0100 	mov.w	r1, #0
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	008b      	lsls	r3, r1, #2
 8007bee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bf2:	0082      	lsls	r2, r0, #2
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 fd26 	bl	8000648 <__aeabi_uldivmod>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4b49      	ldr	r3, [pc, #292]	; (8007d28 <UART_SetConfig+0x38c>)
 8007c02:	fba3 2302 	umull	r2, r3, r3, r2
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	011e      	lsls	r6, r3, #4
 8007c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f04f 0100 	mov.w	r1, #0
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	1894      	adds	r4, r2, r2
 8007c18:	60bc      	str	r4, [r7, #8]
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c22:	1812      	adds	r2, r2, r0
 8007c24:	eb41 0303 	adc.w	r3, r1, r3
 8007c28:	f04f 0400 	mov.w	r4, #0
 8007c2c:	f04f 0500 	mov.w	r5, #0
 8007c30:	00dd      	lsls	r5, r3, #3
 8007c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c36:	00d4      	lsls	r4, r2, #3
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	1814      	adds	r4, r2, r0
 8007c3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c40:	414b      	adcs	r3, r1
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f04f 0100 	mov.w	r1, #0
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	008b      	lsls	r3, r1, #2
 8007c58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c5c:	0082      	lsls	r2, r0, #2
 8007c5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c62:	f7f8 fcf1 	bl	8000648 <__aeabi_uldivmod>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4b2f      	ldr	r3, [pc, #188]	; (8007d28 <UART_SetConfig+0x38c>)
 8007c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	2164      	movs	r1, #100	; 0x64
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	3332      	adds	r3, #50	; 0x32
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <UART_SetConfig+0x38c>)
 8007c80:	fba2 2303 	umull	r2, r3, r2, r3
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c8a:	441e      	add	r6, r3
 8007c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f04f 0100 	mov.w	r1, #0
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	1894      	adds	r4, r2, r2
 8007c9a:	603c      	str	r4, [r7, #0]
 8007c9c:	415b      	adcs	r3, r3
 8007c9e:	607b      	str	r3, [r7, #4]
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	1812      	adds	r2, r2, r0
 8007ca6:	eb41 0303 	adc.w	r3, r1, r3
 8007caa:	f04f 0400 	mov.w	r4, #0
 8007cae:	f04f 0500 	mov.w	r5, #0
 8007cb2:	00dd      	lsls	r5, r3, #3
 8007cb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cb8:	00d4      	lsls	r4, r2, #3
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	eb12 0a00 	adds.w	sl, r2, r0
 8007cc2:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f04f 0100 	mov.w	r1, #0
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	008b      	lsls	r3, r1, #2
 8007cda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cde:	0082      	lsls	r2, r0, #2
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	f7f8 fcb0 	bl	8000648 <__aeabi_uldivmod>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <UART_SetConfig+0x38c>)
 8007cee:	fba3 1302 	umull	r1, r3, r3, r2
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	2164      	movs	r1, #100	; 0x64
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	3332      	adds	r3, #50	; 0x32
 8007d00:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <UART_SetConfig+0x38c>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	f003 020f 	and.w	r2, r3, #15
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4432      	add	r2, r6
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	377c      	adds	r7, #124	; 0x7c
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	bf00      	nop
 8007d20:	40011000 	.word	0x40011000
 8007d24:	40011400 	.word	0x40011400
 8007d28:	51eb851f 	.word	0x51eb851f

08007d2c <__errno>:
 8007d2c:	4b01      	ldr	r3, [pc, #4]	; (8007d34 <__errno+0x8>)
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	2000002c 	.word	0x2000002c

08007d38 <__libc_init_array>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	4d0d      	ldr	r5, [pc, #52]	; (8007d70 <__libc_init_array+0x38>)
 8007d3c:	4c0d      	ldr	r4, [pc, #52]	; (8007d74 <__libc_init_array+0x3c>)
 8007d3e:	1b64      	subs	r4, r4, r5
 8007d40:	10a4      	asrs	r4, r4, #2
 8007d42:	2600      	movs	r6, #0
 8007d44:	42a6      	cmp	r6, r4
 8007d46:	d109      	bne.n	8007d5c <__libc_init_array+0x24>
 8007d48:	4d0b      	ldr	r5, [pc, #44]	; (8007d78 <__libc_init_array+0x40>)
 8007d4a:	4c0c      	ldr	r4, [pc, #48]	; (8007d7c <__libc_init_array+0x44>)
 8007d4c:	f001 fdb6 	bl	80098bc <_init>
 8007d50:	1b64      	subs	r4, r4, r5
 8007d52:	10a4      	asrs	r4, r4, #2
 8007d54:	2600      	movs	r6, #0
 8007d56:	42a6      	cmp	r6, r4
 8007d58:	d105      	bne.n	8007d66 <__libc_init_array+0x2e>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d60:	4798      	blx	r3
 8007d62:	3601      	adds	r6, #1
 8007d64:	e7ee      	b.n	8007d44 <__libc_init_array+0xc>
 8007d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6a:	4798      	blx	r3
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	e7f2      	b.n	8007d56 <__libc_init_array+0x1e>
 8007d70:	0800b92c 	.word	0x0800b92c
 8007d74:	0800b92c 	.word	0x0800b92c
 8007d78:	0800b92c 	.word	0x0800b92c
 8007d7c:	0800b930 	.word	0x0800b930

08007d80 <malloc>:
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <malloc+0xc>)
 8007d82:	4601      	mov	r1, r0
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f000 b871 	b.w	8007e6c <_malloc_r>
 8007d8a:	bf00      	nop
 8007d8c:	2000002c 	.word	0x2000002c

08007d90 <free>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <free+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f000 b819 	b.w	8007dcc <_free_r>
 8007d9a:	bf00      	nop
 8007d9c:	2000002c 	.word	0x2000002c

08007da0 <memcpy>:
 8007da0:	440a      	add	r2, r1
 8007da2:	4291      	cmp	r1, r2
 8007da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da8:	d100      	bne.n	8007dac <memcpy+0xc>
 8007daa:	4770      	bx	lr
 8007dac:	b510      	push	{r4, lr}
 8007dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007db6:	4291      	cmp	r1, r2
 8007db8:	d1f9      	bne.n	8007dae <memcpy+0xe>
 8007dba:	bd10      	pop	{r4, pc}

08007dbc <memset>:
 8007dbc:	4402      	add	r2, r0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d100      	bne.n	8007dc6 <memset+0xa>
 8007dc4:	4770      	bx	lr
 8007dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dca:	e7f9      	b.n	8007dc0 <memset+0x4>

08007dcc <_free_r>:
 8007dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d048      	beq.n	8007e64 <_free_r+0x98>
 8007dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd6:	9001      	str	r0, [sp, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f1a1 0404 	sub.w	r4, r1, #4
 8007dde:	bfb8      	it	lt
 8007de0:	18e4      	addlt	r4, r4, r3
 8007de2:	f000 fc19 	bl	8008618 <__malloc_lock>
 8007de6:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <_free_r+0x9c>)
 8007de8:	9801      	ldr	r0, [sp, #4]
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	4615      	mov	r5, r2
 8007dee:	b933      	cbnz	r3, 8007dfe <_free_r+0x32>
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	6014      	str	r4, [r2, #0]
 8007df4:	b003      	add	sp, #12
 8007df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dfa:	f000 bc13 	b.w	8008624 <__malloc_unlock>
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	d90b      	bls.n	8007e1a <_free_r+0x4e>
 8007e02:	6821      	ldr	r1, [r4, #0]
 8007e04:	1862      	adds	r2, r4, r1
 8007e06:	4293      	cmp	r3, r2
 8007e08:	bf04      	itt	eq
 8007e0a:	681a      	ldreq	r2, [r3, #0]
 8007e0c:	685b      	ldreq	r3, [r3, #4]
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	bf04      	itt	eq
 8007e12:	1852      	addeq	r2, r2, r1
 8007e14:	6022      	streq	r2, [r4, #0]
 8007e16:	602c      	str	r4, [r5, #0]
 8007e18:	e7ec      	b.n	8007df4 <_free_r+0x28>
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	b10b      	cbz	r3, 8007e24 <_free_r+0x58>
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d9fa      	bls.n	8007e1a <_free_r+0x4e>
 8007e24:	6811      	ldr	r1, [r2, #0]
 8007e26:	1855      	adds	r5, r2, r1
 8007e28:	42a5      	cmp	r5, r4
 8007e2a:	d10b      	bne.n	8007e44 <_free_r+0x78>
 8007e2c:	6824      	ldr	r4, [r4, #0]
 8007e2e:	4421      	add	r1, r4
 8007e30:	1854      	adds	r4, r2, r1
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	d1dd      	bne.n	8007df4 <_free_r+0x28>
 8007e38:	681c      	ldr	r4, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	6053      	str	r3, [r2, #4]
 8007e3e:	4421      	add	r1, r4
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	e7d7      	b.n	8007df4 <_free_r+0x28>
 8007e44:	d902      	bls.n	8007e4c <_free_r+0x80>
 8007e46:	230c      	movs	r3, #12
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	e7d3      	b.n	8007df4 <_free_r+0x28>
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	1961      	adds	r1, r4, r5
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf04      	itt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	6063      	str	r3, [r4, #4]
 8007e5a:	bf04      	itt	eq
 8007e5c:	1949      	addeq	r1, r1, r5
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	6054      	str	r4, [r2, #4]
 8007e62:	e7c7      	b.n	8007df4 <_free_r+0x28>
 8007e64:	b003      	add	sp, #12
 8007e66:	bd30      	pop	{r4, r5, pc}
 8007e68:	200004b4 	.word	0x200004b4

08007e6c <_malloc_r>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	1ccd      	adds	r5, r1, #3
 8007e70:	f025 0503 	bic.w	r5, r5, #3
 8007e74:	3508      	adds	r5, #8
 8007e76:	2d0c      	cmp	r5, #12
 8007e78:	bf38      	it	cc
 8007e7a:	250c      	movcc	r5, #12
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	4606      	mov	r6, r0
 8007e80:	db01      	blt.n	8007e86 <_malloc_r+0x1a>
 8007e82:	42a9      	cmp	r1, r5
 8007e84:	d903      	bls.n	8007e8e <_malloc_r+0x22>
 8007e86:	230c      	movs	r3, #12
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8e:	f000 fbc3 	bl	8008618 <__malloc_lock>
 8007e92:	4921      	ldr	r1, [pc, #132]	; (8007f18 <_malloc_r+0xac>)
 8007e94:	680a      	ldr	r2, [r1, #0]
 8007e96:	4614      	mov	r4, r2
 8007e98:	b99c      	cbnz	r4, 8007ec2 <_malloc_r+0x56>
 8007e9a:	4f20      	ldr	r7, [pc, #128]	; (8007f1c <_malloc_r+0xb0>)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	b923      	cbnz	r3, 8007eaa <_malloc_r+0x3e>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f000 f8ca 	bl	800803c <_sbrk_r>
 8007ea8:	6038      	str	r0, [r7, #0]
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f8c5 	bl	800803c <_sbrk_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	d123      	bne.n	8007efe <_malloc_r+0x92>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	6033      	str	r3, [r6, #0]
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 fbb2 	bl	8008624 <__malloc_unlock>
 8007ec0:	e7e3      	b.n	8007e8a <_malloc_r+0x1e>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	1b5b      	subs	r3, r3, r5
 8007ec6:	d417      	bmi.n	8007ef8 <_malloc_r+0x8c>
 8007ec8:	2b0b      	cmp	r3, #11
 8007eca:	d903      	bls.n	8007ed4 <_malloc_r+0x68>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	441c      	add	r4, r3
 8007ed0:	6025      	str	r5, [r4, #0]
 8007ed2:	e004      	b.n	8007ede <_malloc_r+0x72>
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	42a2      	cmp	r2, r4
 8007ed8:	bf0c      	ite	eq
 8007eda:	600b      	streq	r3, [r1, #0]
 8007edc:	6053      	strne	r3, [r2, #4]
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f000 fba0 	bl	8008624 <__malloc_unlock>
 8007ee4:	f104 000b 	add.w	r0, r4, #11
 8007ee8:	1d23      	adds	r3, r4, #4
 8007eea:	f020 0007 	bic.w	r0, r0, #7
 8007eee:	1ac2      	subs	r2, r0, r3
 8007ef0:	d0cc      	beq.n	8007e8c <_malloc_r+0x20>
 8007ef2:	1a1b      	subs	r3, r3, r0
 8007ef4:	50a3      	str	r3, [r4, r2]
 8007ef6:	e7c9      	b.n	8007e8c <_malloc_r+0x20>
 8007ef8:	4622      	mov	r2, r4
 8007efa:	6864      	ldr	r4, [r4, #4]
 8007efc:	e7cc      	b.n	8007e98 <_malloc_r+0x2c>
 8007efe:	1cc4      	adds	r4, r0, #3
 8007f00:	f024 0403 	bic.w	r4, r4, #3
 8007f04:	42a0      	cmp	r0, r4
 8007f06:	d0e3      	beq.n	8007ed0 <_malloc_r+0x64>
 8007f08:	1a21      	subs	r1, r4, r0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 f896 	bl	800803c <_sbrk_r>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d1dd      	bne.n	8007ed0 <_malloc_r+0x64>
 8007f14:	e7cf      	b.n	8007eb6 <_malloc_r+0x4a>
 8007f16:	bf00      	nop
 8007f18:	200004b4 	.word	0x200004b4
 8007f1c:	200004b8 	.word	0x200004b8

08007f20 <iprintf>:
 8007f20:	b40f      	push	{r0, r1, r2, r3}
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <iprintf+0x2c>)
 8007f24:	b513      	push	{r0, r1, r4, lr}
 8007f26:	681c      	ldr	r4, [r3, #0]
 8007f28:	b124      	cbz	r4, 8007f34 <iprintf+0x14>
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	b913      	cbnz	r3, 8007f34 <iprintf+0x14>
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fa6e 	bl	8008410 <__sinit>
 8007f34:	ab05      	add	r3, sp, #20
 8007f36:	9a04      	ldr	r2, [sp, #16]
 8007f38:	68a1      	ldr	r1, [r4, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fba1 	bl	8008684 <_vfiprintf_r>
 8007f42:	b002      	add	sp, #8
 8007f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f48:	b004      	add	sp, #16
 8007f4a:	4770      	bx	lr
 8007f4c:	2000002c 	.word	0x2000002c

08007f50 <_puts_r>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	460e      	mov	r6, r1
 8007f54:	4605      	mov	r5, r0
 8007f56:	b118      	cbz	r0, 8007f60 <_puts_r+0x10>
 8007f58:	6983      	ldr	r3, [r0, #24]
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_puts_r+0x10>
 8007f5c:	f000 fa58 	bl	8008410 <__sinit>
 8007f60:	69ab      	ldr	r3, [r5, #24]
 8007f62:	68ac      	ldr	r4, [r5, #8]
 8007f64:	b913      	cbnz	r3, 8007f6c <_puts_r+0x1c>
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 fa52 	bl	8008410 <__sinit>
 8007f6c:	4b2c      	ldr	r3, [pc, #176]	; (8008020 <_puts_r+0xd0>)
 8007f6e:	429c      	cmp	r4, r3
 8007f70:	d120      	bne.n	8007fb4 <_puts_r+0x64>
 8007f72:	686c      	ldr	r4, [r5, #4]
 8007f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d405      	bmi.n	8007f86 <_puts_r+0x36>
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	0598      	lsls	r0, r3, #22
 8007f7e:	d402      	bmi.n	8007f86 <_puts_r+0x36>
 8007f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f82:	f000 fae3 	bl	800854c <__retarget_lock_acquire_recursive>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	0719      	lsls	r1, r3, #28
 8007f8a:	d51d      	bpl.n	8007fc8 <_puts_r+0x78>
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	b1db      	cbz	r3, 8007fc8 <_puts_r+0x78>
 8007f90:	3e01      	subs	r6, #1
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	60a3      	str	r3, [r4, #8]
 8007f9c:	bb39      	cbnz	r1, 8007fee <_puts_r+0x9e>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da38      	bge.n	8008014 <_puts_r+0xc4>
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	210a      	movs	r1, #10
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f858 	bl	800805c <__swbuf_r>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d011      	beq.n	8007fd4 <_puts_r+0x84>
 8007fb0:	250a      	movs	r5, #10
 8007fb2:	e011      	b.n	8007fd8 <_puts_r+0x88>
 8007fb4:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <_puts_r+0xd4>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d101      	bne.n	8007fbe <_puts_r+0x6e>
 8007fba:	68ac      	ldr	r4, [r5, #8]
 8007fbc:	e7da      	b.n	8007f74 <_puts_r+0x24>
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <_puts_r+0xd8>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	bf08      	it	eq
 8007fc4:	68ec      	ldreq	r4, [r5, #12]
 8007fc6:	e7d5      	b.n	8007f74 <_puts_r+0x24>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f898 	bl	8008100 <__swsetup_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d0dd      	beq.n	8007f90 <_puts_r+0x40>
 8007fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fda:	07da      	lsls	r2, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_puts_r+0x9a>
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	059b      	lsls	r3, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_puts_r+0x9a>
 8007fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe6:	f000 fab2 	bl	800854e <__retarget_lock_release_recursive>
 8007fea:	4628      	mov	r0, r5
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da04      	bge.n	8007ffc <_puts_r+0xac>
 8007ff2:	69a2      	ldr	r2, [r4, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	dc06      	bgt.n	8008006 <_puts_r+0xb6>
 8007ff8:	290a      	cmp	r1, #10
 8007ffa:	d004      	beq.n	8008006 <_puts_r+0xb6>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	7019      	strb	r1, [r3, #0]
 8008004:	e7c5      	b.n	8007f92 <_puts_r+0x42>
 8008006:	4622      	mov	r2, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f000 f827 	bl	800805c <__swbuf_r>
 800800e:	3001      	adds	r0, #1
 8008010:	d1bf      	bne.n	8007f92 <_puts_r+0x42>
 8008012:	e7df      	b.n	8007fd4 <_puts_r+0x84>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	250a      	movs	r5, #10
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	701d      	strb	r5, [r3, #0]
 800801e:	e7db      	b.n	8007fd8 <_puts_r+0x88>
 8008020:	0800b4e0 	.word	0x0800b4e0
 8008024:	0800b500 	.word	0x0800b500
 8008028:	0800b4c0 	.word	0x0800b4c0

0800802c <puts>:
 800802c:	4b02      	ldr	r3, [pc, #8]	; (8008038 <puts+0xc>)
 800802e:	4601      	mov	r1, r0
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	f7ff bf8d 	b.w	8007f50 <_puts_r>
 8008036:	bf00      	nop
 8008038:	2000002c 	.word	0x2000002c

0800803c <_sbrk_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d06      	ldr	r5, [pc, #24]	; (8008058 <_sbrk_r+0x1c>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	602b      	str	r3, [r5, #0]
 8008048:	f7fb fd64 	bl	8003b14 <_sbrk>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_sbrk_r+0x1a>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_sbrk_r+0x1a>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	200005c4 	.word	0x200005c4

0800805c <__swbuf_r>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	460e      	mov	r6, r1
 8008060:	4614      	mov	r4, r2
 8008062:	4605      	mov	r5, r0
 8008064:	b118      	cbz	r0, 800806e <__swbuf_r+0x12>
 8008066:	6983      	ldr	r3, [r0, #24]
 8008068:	b90b      	cbnz	r3, 800806e <__swbuf_r+0x12>
 800806a:	f000 f9d1 	bl	8008410 <__sinit>
 800806e:	4b21      	ldr	r3, [pc, #132]	; (80080f4 <__swbuf_r+0x98>)
 8008070:	429c      	cmp	r4, r3
 8008072:	d12b      	bne.n	80080cc <__swbuf_r+0x70>
 8008074:	686c      	ldr	r4, [r5, #4]
 8008076:	69a3      	ldr	r3, [r4, #24]
 8008078:	60a3      	str	r3, [r4, #8]
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	071a      	lsls	r2, r3, #28
 800807e:	d52f      	bpl.n	80080e0 <__swbuf_r+0x84>
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	b36b      	cbz	r3, 80080e0 <__swbuf_r+0x84>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	1ac0      	subs	r0, r0, r3
 800808a:	6963      	ldr	r3, [r4, #20]
 800808c:	b2f6      	uxtb	r6, r6
 800808e:	4283      	cmp	r3, r0
 8008090:	4637      	mov	r7, r6
 8008092:	dc04      	bgt.n	800809e <__swbuf_r+0x42>
 8008094:	4621      	mov	r1, r4
 8008096:	4628      	mov	r0, r5
 8008098:	f000 f926 	bl	80082e8 <_fflush_r>
 800809c:	bb30      	cbnz	r0, 80080ec <__swbuf_r+0x90>
 800809e:	68a3      	ldr	r3, [r4, #8]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	60a3      	str	r3, [r4, #8]
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	6022      	str	r2, [r4, #0]
 80080aa:	701e      	strb	r6, [r3, #0]
 80080ac:	6963      	ldr	r3, [r4, #20]
 80080ae:	3001      	adds	r0, #1
 80080b0:	4283      	cmp	r3, r0
 80080b2:	d004      	beq.n	80080be <__swbuf_r+0x62>
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	07db      	lsls	r3, r3, #31
 80080b8:	d506      	bpl.n	80080c8 <__swbuf_r+0x6c>
 80080ba:	2e0a      	cmp	r6, #10
 80080bc:	d104      	bne.n	80080c8 <__swbuf_r+0x6c>
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 f911 	bl	80082e8 <_fflush_r>
 80080c6:	b988      	cbnz	r0, 80080ec <__swbuf_r+0x90>
 80080c8:	4638      	mov	r0, r7
 80080ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <__swbuf_r+0x9c>)
 80080ce:	429c      	cmp	r4, r3
 80080d0:	d101      	bne.n	80080d6 <__swbuf_r+0x7a>
 80080d2:	68ac      	ldr	r4, [r5, #8]
 80080d4:	e7cf      	b.n	8008076 <__swbuf_r+0x1a>
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <__swbuf_r+0xa0>)
 80080d8:	429c      	cmp	r4, r3
 80080da:	bf08      	it	eq
 80080dc:	68ec      	ldreq	r4, [r5, #12]
 80080de:	e7ca      	b.n	8008076 <__swbuf_r+0x1a>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 f80c 	bl	8008100 <__swsetup_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d0cb      	beq.n	8008084 <__swbuf_r+0x28>
 80080ec:	f04f 37ff 	mov.w	r7, #4294967295
 80080f0:	e7ea      	b.n	80080c8 <__swbuf_r+0x6c>
 80080f2:	bf00      	nop
 80080f4:	0800b4e0 	.word	0x0800b4e0
 80080f8:	0800b500 	.word	0x0800b500
 80080fc:	0800b4c0 	.word	0x0800b4c0

08008100 <__swsetup_r>:
 8008100:	4b32      	ldr	r3, [pc, #200]	; (80081cc <__swsetup_r+0xcc>)
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	681d      	ldr	r5, [r3, #0]
 8008106:	4606      	mov	r6, r0
 8008108:	460c      	mov	r4, r1
 800810a:	b125      	cbz	r5, 8008116 <__swsetup_r+0x16>
 800810c:	69ab      	ldr	r3, [r5, #24]
 800810e:	b913      	cbnz	r3, 8008116 <__swsetup_r+0x16>
 8008110:	4628      	mov	r0, r5
 8008112:	f000 f97d 	bl	8008410 <__sinit>
 8008116:	4b2e      	ldr	r3, [pc, #184]	; (80081d0 <__swsetup_r+0xd0>)
 8008118:	429c      	cmp	r4, r3
 800811a:	d10f      	bne.n	800813c <__swsetup_r+0x3c>
 800811c:	686c      	ldr	r4, [r5, #4]
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008124:	0719      	lsls	r1, r3, #28
 8008126:	d42c      	bmi.n	8008182 <__swsetup_r+0x82>
 8008128:	06dd      	lsls	r5, r3, #27
 800812a:	d411      	bmi.n	8008150 <__swsetup_r+0x50>
 800812c:	2309      	movs	r3, #9
 800812e:	6033      	str	r3, [r6, #0]
 8008130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	e03e      	b.n	80081ba <__swsetup_r+0xba>
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <__swsetup_r+0xd4>)
 800813e:	429c      	cmp	r4, r3
 8008140:	d101      	bne.n	8008146 <__swsetup_r+0x46>
 8008142:	68ac      	ldr	r4, [r5, #8]
 8008144:	e7eb      	b.n	800811e <__swsetup_r+0x1e>
 8008146:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <__swsetup_r+0xd8>)
 8008148:	429c      	cmp	r4, r3
 800814a:	bf08      	it	eq
 800814c:	68ec      	ldreq	r4, [r5, #12]
 800814e:	e7e6      	b.n	800811e <__swsetup_r+0x1e>
 8008150:	0758      	lsls	r0, r3, #29
 8008152:	d512      	bpl.n	800817a <__swsetup_r+0x7a>
 8008154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008156:	b141      	cbz	r1, 800816a <__swsetup_r+0x6a>
 8008158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <__swsetup_r+0x66>
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff fe33 	bl	8007dcc <_free_r>
 8008166:	2300      	movs	r3, #0
 8008168:	6363      	str	r3, [r4, #52]	; 0x34
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	2300      	movs	r3, #0
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f043 0308 	orr.w	r3, r3, #8
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	b94b      	cbnz	r3, 800819a <__swsetup_r+0x9a>
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800818c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008190:	d003      	beq.n	800819a <__swsetup_r+0x9a>
 8008192:	4621      	mov	r1, r4
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f9ff 	bl	8008598 <__smakebuf_r>
 800819a:	89a0      	ldrh	r0, [r4, #12]
 800819c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a0:	f010 0301 	ands.w	r3, r0, #1
 80081a4:	d00a      	beq.n	80081bc <__swsetup_r+0xbc>
 80081a6:	2300      	movs	r3, #0
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	6963      	ldr	r3, [r4, #20]
 80081ac:	425b      	negs	r3, r3
 80081ae:	61a3      	str	r3, [r4, #24]
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b943      	cbnz	r3, 80081c6 <__swsetup_r+0xc6>
 80081b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081b8:	d1ba      	bne.n	8008130 <__swsetup_r+0x30>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	0781      	lsls	r1, r0, #30
 80081be:	bf58      	it	pl
 80081c0:	6963      	ldrpl	r3, [r4, #20]
 80081c2:	60a3      	str	r3, [r4, #8]
 80081c4:	e7f4      	b.n	80081b0 <__swsetup_r+0xb0>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7f7      	b.n	80081ba <__swsetup_r+0xba>
 80081ca:	bf00      	nop
 80081cc:	2000002c 	.word	0x2000002c
 80081d0:	0800b4e0 	.word	0x0800b4e0
 80081d4:	0800b500 	.word	0x0800b500
 80081d8:	0800b4c0 	.word	0x0800b4c0

080081dc <__sflush_r>:
 80081dc:	898a      	ldrh	r2, [r1, #12]
 80081de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e2:	4605      	mov	r5, r0
 80081e4:	0710      	lsls	r0, r2, #28
 80081e6:	460c      	mov	r4, r1
 80081e8:	d458      	bmi.n	800829c <__sflush_r+0xc0>
 80081ea:	684b      	ldr	r3, [r1, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dc05      	bgt.n	80081fc <__sflush_r+0x20>
 80081f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dc02      	bgt.n	80081fc <__sflush_r+0x20>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fe:	2e00      	cmp	r6, #0
 8008200:	d0f9      	beq.n	80081f6 <__sflush_r+0x1a>
 8008202:	2300      	movs	r3, #0
 8008204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008208:	682f      	ldr	r7, [r5, #0]
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	d032      	beq.n	8008274 <__sflush_r+0x98>
 800820e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	075a      	lsls	r2, r3, #29
 8008214:	d505      	bpl.n	8008222 <__sflush_r+0x46>
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	1ac0      	subs	r0, r0, r3
 800821a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800821c:	b10b      	cbz	r3, 8008222 <__sflush_r+0x46>
 800821e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008220:	1ac0      	subs	r0, r0, r3
 8008222:	2300      	movs	r3, #0
 8008224:	4602      	mov	r2, r0
 8008226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	4628      	mov	r0, r5
 800822c:	47b0      	blx	r6
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	d106      	bne.n	8008242 <__sflush_r+0x66>
 8008234:	6829      	ldr	r1, [r5, #0]
 8008236:	291d      	cmp	r1, #29
 8008238:	d82c      	bhi.n	8008294 <__sflush_r+0xb8>
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <__sflush_r+0x108>)
 800823c:	40ca      	lsrs	r2, r1
 800823e:	07d6      	lsls	r6, r2, #31
 8008240:	d528      	bpl.n	8008294 <__sflush_r+0xb8>
 8008242:	2200      	movs	r2, #0
 8008244:	6062      	str	r2, [r4, #4]
 8008246:	04d9      	lsls	r1, r3, #19
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	d504      	bpl.n	8008258 <__sflush_r+0x7c>
 800824e:	1c42      	adds	r2, r0, #1
 8008250:	d101      	bne.n	8008256 <__sflush_r+0x7a>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	b903      	cbnz	r3, 8008258 <__sflush_r+0x7c>
 8008256:	6560      	str	r0, [r4, #84]	; 0x54
 8008258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800825a:	602f      	str	r7, [r5, #0]
 800825c:	2900      	cmp	r1, #0
 800825e:	d0ca      	beq.n	80081f6 <__sflush_r+0x1a>
 8008260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008264:	4299      	cmp	r1, r3
 8008266:	d002      	beq.n	800826e <__sflush_r+0x92>
 8008268:	4628      	mov	r0, r5
 800826a:	f7ff fdaf 	bl	8007dcc <_free_r>
 800826e:	2000      	movs	r0, #0
 8008270:	6360      	str	r0, [r4, #52]	; 0x34
 8008272:	e7c1      	b.n	80081f8 <__sflush_r+0x1c>
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	2301      	movs	r3, #1
 8008278:	4628      	mov	r0, r5
 800827a:	47b0      	blx	r6
 800827c:	1c41      	adds	r1, r0, #1
 800827e:	d1c7      	bne.n	8008210 <__sflush_r+0x34>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0c4      	beq.n	8008210 <__sflush_r+0x34>
 8008286:	2b1d      	cmp	r3, #29
 8008288:	d001      	beq.n	800828e <__sflush_r+0xb2>
 800828a:	2b16      	cmp	r3, #22
 800828c:	d101      	bne.n	8008292 <__sflush_r+0xb6>
 800828e:	602f      	str	r7, [r5, #0]
 8008290:	e7b1      	b.n	80081f6 <__sflush_r+0x1a>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	e7ad      	b.n	80081f8 <__sflush_r+0x1c>
 800829c:	690f      	ldr	r7, [r1, #16]
 800829e:	2f00      	cmp	r7, #0
 80082a0:	d0a9      	beq.n	80081f6 <__sflush_r+0x1a>
 80082a2:	0793      	lsls	r3, r2, #30
 80082a4:	680e      	ldr	r6, [r1, #0]
 80082a6:	bf08      	it	eq
 80082a8:	694b      	ldreq	r3, [r1, #20]
 80082aa:	600f      	str	r7, [r1, #0]
 80082ac:	bf18      	it	ne
 80082ae:	2300      	movne	r3, #0
 80082b0:	eba6 0807 	sub.w	r8, r6, r7
 80082b4:	608b      	str	r3, [r1, #8]
 80082b6:	f1b8 0f00 	cmp.w	r8, #0
 80082ba:	dd9c      	ble.n	80081f6 <__sflush_r+0x1a>
 80082bc:	6a21      	ldr	r1, [r4, #32]
 80082be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082c0:	4643      	mov	r3, r8
 80082c2:	463a      	mov	r2, r7
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b0      	blx	r6
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dc06      	bgt.n	80082da <__sflush_r+0xfe>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	e78e      	b.n	80081f8 <__sflush_r+0x1c>
 80082da:	4407      	add	r7, r0
 80082dc:	eba8 0800 	sub.w	r8, r8, r0
 80082e0:	e7e9      	b.n	80082b6 <__sflush_r+0xda>
 80082e2:	bf00      	nop
 80082e4:	20400001 	.word	0x20400001

080082e8 <_fflush_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	690b      	ldr	r3, [r1, #16]
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b913      	cbnz	r3, 80082f8 <_fflush_r+0x10>
 80082f2:	2500      	movs	r5, #0
 80082f4:	4628      	mov	r0, r5
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	b118      	cbz	r0, 8008302 <_fflush_r+0x1a>
 80082fa:	6983      	ldr	r3, [r0, #24]
 80082fc:	b90b      	cbnz	r3, 8008302 <_fflush_r+0x1a>
 80082fe:	f000 f887 	bl	8008410 <__sinit>
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <_fflush_r+0x6c>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d11b      	bne.n	8008340 <_fflush_r+0x58>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0ef      	beq.n	80082f2 <_fflush_r+0xa>
 8008312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008314:	07d0      	lsls	r0, r2, #31
 8008316:	d404      	bmi.n	8008322 <_fflush_r+0x3a>
 8008318:	0599      	lsls	r1, r3, #22
 800831a:	d402      	bmi.n	8008322 <_fflush_r+0x3a>
 800831c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800831e:	f000 f915 	bl	800854c <__retarget_lock_acquire_recursive>
 8008322:	4628      	mov	r0, r5
 8008324:	4621      	mov	r1, r4
 8008326:	f7ff ff59 	bl	80081dc <__sflush_r>
 800832a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800832c:	07da      	lsls	r2, r3, #31
 800832e:	4605      	mov	r5, r0
 8008330:	d4e0      	bmi.n	80082f4 <_fflush_r+0xc>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	059b      	lsls	r3, r3, #22
 8008336:	d4dd      	bmi.n	80082f4 <_fflush_r+0xc>
 8008338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800833a:	f000 f908 	bl	800854e <__retarget_lock_release_recursive>
 800833e:	e7d9      	b.n	80082f4 <_fflush_r+0xc>
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <_fflush_r+0x70>)
 8008342:	429c      	cmp	r4, r3
 8008344:	d101      	bne.n	800834a <_fflush_r+0x62>
 8008346:	68ac      	ldr	r4, [r5, #8]
 8008348:	e7df      	b.n	800830a <_fflush_r+0x22>
 800834a:	4b04      	ldr	r3, [pc, #16]	; (800835c <_fflush_r+0x74>)
 800834c:	429c      	cmp	r4, r3
 800834e:	bf08      	it	eq
 8008350:	68ec      	ldreq	r4, [r5, #12]
 8008352:	e7da      	b.n	800830a <_fflush_r+0x22>
 8008354:	0800b4e0 	.word	0x0800b4e0
 8008358:	0800b500 	.word	0x0800b500
 800835c:	0800b4c0 	.word	0x0800b4c0

08008360 <std>:
 8008360:	2300      	movs	r3, #0
 8008362:	b510      	push	{r4, lr}
 8008364:	4604      	mov	r4, r0
 8008366:	e9c0 3300 	strd	r3, r3, [r0]
 800836a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800836e:	6083      	str	r3, [r0, #8]
 8008370:	8181      	strh	r1, [r0, #12]
 8008372:	6643      	str	r3, [r0, #100]	; 0x64
 8008374:	81c2      	strh	r2, [r0, #14]
 8008376:	6183      	str	r3, [r0, #24]
 8008378:	4619      	mov	r1, r3
 800837a:	2208      	movs	r2, #8
 800837c:	305c      	adds	r0, #92	; 0x5c
 800837e:	f7ff fd1d 	bl	8007dbc <memset>
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <std+0x38>)
 8008384:	6263      	str	r3, [r4, #36]	; 0x24
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <std+0x3c>)
 8008388:	62a3      	str	r3, [r4, #40]	; 0x28
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <std+0x40>)
 800838c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <std+0x44>)
 8008390:	6224      	str	r4, [r4, #32]
 8008392:	6323      	str	r3, [r4, #48]	; 0x30
 8008394:	bd10      	pop	{r4, pc}
 8008396:	bf00      	nop
 8008398:	08008c0d 	.word	0x08008c0d
 800839c:	08008c2f 	.word	0x08008c2f
 80083a0:	08008c67 	.word	0x08008c67
 80083a4:	08008c8b 	.word	0x08008c8b

080083a8 <_cleanup_r>:
 80083a8:	4901      	ldr	r1, [pc, #4]	; (80083b0 <_cleanup_r+0x8>)
 80083aa:	f000 b8af 	b.w	800850c <_fwalk_reent>
 80083ae:	bf00      	nop
 80083b0:	080082e9 	.word	0x080082e9

080083b4 <__sfmoreglue>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	1e4a      	subs	r2, r1, #1
 80083b8:	2568      	movs	r5, #104	; 0x68
 80083ba:	4355      	muls	r5, r2
 80083bc:	460e      	mov	r6, r1
 80083be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083c2:	f7ff fd53 	bl	8007e6c <_malloc_r>
 80083c6:	4604      	mov	r4, r0
 80083c8:	b140      	cbz	r0, 80083dc <__sfmoreglue+0x28>
 80083ca:	2100      	movs	r1, #0
 80083cc:	e9c0 1600 	strd	r1, r6, [r0]
 80083d0:	300c      	adds	r0, #12
 80083d2:	60a0      	str	r0, [r4, #8]
 80083d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083d8:	f7ff fcf0 	bl	8007dbc <memset>
 80083dc:	4620      	mov	r0, r4
 80083de:	bd70      	pop	{r4, r5, r6, pc}

080083e0 <__sfp_lock_acquire>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__sfp_lock_acquire+0x8>)
 80083e2:	f000 b8b3 	b.w	800854c <__retarget_lock_acquire_recursive>
 80083e6:	bf00      	nop
 80083e8:	200005c0 	.word	0x200005c0

080083ec <__sfp_lock_release>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__sfp_lock_release+0x8>)
 80083ee:	f000 b8ae 	b.w	800854e <__retarget_lock_release_recursive>
 80083f2:	bf00      	nop
 80083f4:	200005c0 	.word	0x200005c0

080083f8 <__sinit_lock_acquire>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__sinit_lock_acquire+0x8>)
 80083fa:	f000 b8a7 	b.w	800854c <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	200005bb 	.word	0x200005bb

08008404 <__sinit_lock_release>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__sinit_lock_release+0x8>)
 8008406:	f000 b8a2 	b.w	800854e <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	200005bb 	.word	0x200005bb

08008410 <__sinit>:
 8008410:	b510      	push	{r4, lr}
 8008412:	4604      	mov	r4, r0
 8008414:	f7ff fff0 	bl	80083f8 <__sinit_lock_acquire>
 8008418:	69a3      	ldr	r3, [r4, #24]
 800841a:	b11b      	cbz	r3, 8008424 <__sinit+0x14>
 800841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008420:	f7ff bff0 	b.w	8008404 <__sinit_lock_release>
 8008424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008428:	6523      	str	r3, [r4, #80]	; 0x50
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <__sinit+0x68>)
 800842c:	4a13      	ldr	r2, [pc, #76]	; (800847c <__sinit+0x6c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	62a2      	str	r2, [r4, #40]	; 0x28
 8008432:	42a3      	cmp	r3, r4
 8008434:	bf04      	itt	eq
 8008436:	2301      	moveq	r3, #1
 8008438:	61a3      	streq	r3, [r4, #24]
 800843a:	4620      	mov	r0, r4
 800843c:	f000 f820 	bl	8008480 <__sfp>
 8008440:	6060      	str	r0, [r4, #4]
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f81c 	bl	8008480 <__sfp>
 8008448:	60a0      	str	r0, [r4, #8]
 800844a:	4620      	mov	r0, r4
 800844c:	f000 f818 	bl	8008480 <__sfp>
 8008450:	2200      	movs	r2, #0
 8008452:	60e0      	str	r0, [r4, #12]
 8008454:	2104      	movs	r1, #4
 8008456:	6860      	ldr	r0, [r4, #4]
 8008458:	f7ff ff82 	bl	8008360 <std>
 800845c:	68a0      	ldr	r0, [r4, #8]
 800845e:	2201      	movs	r2, #1
 8008460:	2109      	movs	r1, #9
 8008462:	f7ff ff7d 	bl	8008360 <std>
 8008466:	68e0      	ldr	r0, [r4, #12]
 8008468:	2202      	movs	r2, #2
 800846a:	2112      	movs	r1, #18
 800846c:	f7ff ff78 	bl	8008360 <std>
 8008470:	2301      	movs	r3, #1
 8008472:	61a3      	str	r3, [r4, #24]
 8008474:	e7d2      	b.n	800841c <__sinit+0xc>
 8008476:	bf00      	nop
 8008478:	0800b4bc 	.word	0x0800b4bc
 800847c:	080083a9 	.word	0x080083a9

08008480 <__sfp>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	4607      	mov	r7, r0
 8008484:	f7ff ffac 	bl	80083e0 <__sfp_lock_acquire>
 8008488:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <__sfp+0x84>)
 800848a:	681e      	ldr	r6, [r3, #0]
 800848c:	69b3      	ldr	r3, [r6, #24]
 800848e:	b913      	cbnz	r3, 8008496 <__sfp+0x16>
 8008490:	4630      	mov	r0, r6
 8008492:	f7ff ffbd 	bl	8008410 <__sinit>
 8008496:	3648      	adds	r6, #72	; 0x48
 8008498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800849c:	3b01      	subs	r3, #1
 800849e:	d503      	bpl.n	80084a8 <__sfp+0x28>
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	b30b      	cbz	r3, 80084e8 <__sfp+0x68>
 80084a4:	6836      	ldr	r6, [r6, #0]
 80084a6:	e7f7      	b.n	8008498 <__sfp+0x18>
 80084a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084ac:	b9d5      	cbnz	r5, 80084e4 <__sfp+0x64>
 80084ae:	4b16      	ldr	r3, [pc, #88]	; (8008508 <__sfp+0x88>)
 80084b0:	60e3      	str	r3, [r4, #12]
 80084b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084b6:	6665      	str	r5, [r4, #100]	; 0x64
 80084b8:	f000 f847 	bl	800854a <__retarget_lock_init_recursive>
 80084bc:	f7ff ff96 	bl	80083ec <__sfp_lock_release>
 80084c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084c8:	6025      	str	r5, [r4, #0]
 80084ca:	61a5      	str	r5, [r4, #24]
 80084cc:	2208      	movs	r2, #8
 80084ce:	4629      	mov	r1, r5
 80084d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084d4:	f7ff fc72 	bl	8007dbc <memset>
 80084d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084e0:	4620      	mov	r0, r4
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e4:	3468      	adds	r4, #104	; 0x68
 80084e6:	e7d9      	b.n	800849c <__sfp+0x1c>
 80084e8:	2104      	movs	r1, #4
 80084ea:	4638      	mov	r0, r7
 80084ec:	f7ff ff62 	bl	80083b4 <__sfmoreglue>
 80084f0:	4604      	mov	r4, r0
 80084f2:	6030      	str	r0, [r6, #0]
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d1d5      	bne.n	80084a4 <__sfp+0x24>
 80084f8:	f7ff ff78 	bl	80083ec <__sfp_lock_release>
 80084fc:	230c      	movs	r3, #12
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	e7ee      	b.n	80084e0 <__sfp+0x60>
 8008502:	bf00      	nop
 8008504:	0800b4bc 	.word	0x0800b4bc
 8008508:	ffff0001 	.word	0xffff0001

0800850c <_fwalk_reent>:
 800850c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008510:	4606      	mov	r6, r0
 8008512:	4688      	mov	r8, r1
 8008514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008518:	2700      	movs	r7, #0
 800851a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800851e:	f1b9 0901 	subs.w	r9, r9, #1
 8008522:	d505      	bpl.n	8008530 <_fwalk_reent+0x24>
 8008524:	6824      	ldr	r4, [r4, #0]
 8008526:	2c00      	cmp	r4, #0
 8008528:	d1f7      	bne.n	800851a <_fwalk_reent+0xe>
 800852a:	4638      	mov	r0, r7
 800852c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008530:	89ab      	ldrh	r3, [r5, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d907      	bls.n	8008546 <_fwalk_reent+0x3a>
 8008536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800853a:	3301      	adds	r3, #1
 800853c:	d003      	beq.n	8008546 <_fwalk_reent+0x3a>
 800853e:	4629      	mov	r1, r5
 8008540:	4630      	mov	r0, r6
 8008542:	47c0      	blx	r8
 8008544:	4307      	orrs	r7, r0
 8008546:	3568      	adds	r5, #104	; 0x68
 8008548:	e7e9      	b.n	800851e <_fwalk_reent+0x12>

0800854a <__retarget_lock_init_recursive>:
 800854a:	4770      	bx	lr

0800854c <__retarget_lock_acquire_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_release_recursive>:
 800854e:	4770      	bx	lr

08008550 <__swhatbuf_r>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	460e      	mov	r6, r1
 8008554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008558:	2900      	cmp	r1, #0
 800855a:	b096      	sub	sp, #88	; 0x58
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	da07      	bge.n	8008572 <__swhatbuf_r+0x22>
 8008562:	2300      	movs	r3, #0
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	89b3      	ldrh	r3, [r6, #12]
 8008568:	061a      	lsls	r2, r3, #24
 800856a:	d410      	bmi.n	800858e <__swhatbuf_r+0x3e>
 800856c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008570:	e00e      	b.n	8008590 <__swhatbuf_r+0x40>
 8008572:	466a      	mov	r2, sp
 8008574:	f000 fbb0 	bl	8008cd8 <_fstat_r>
 8008578:	2800      	cmp	r0, #0
 800857a:	dbf2      	blt.n	8008562 <__swhatbuf_r+0x12>
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008582:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008586:	425a      	negs	r2, r3
 8008588:	415a      	adcs	r2, r3
 800858a:	602a      	str	r2, [r5, #0]
 800858c:	e7ee      	b.n	800856c <__swhatbuf_r+0x1c>
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	2000      	movs	r0, #0
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	b016      	add	sp, #88	; 0x58
 8008596:	bd70      	pop	{r4, r5, r6, pc}

08008598 <__smakebuf_r>:
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800859c:	079d      	lsls	r5, r3, #30
 800859e:	4606      	mov	r6, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	d507      	bpl.n	80085b4 <__smakebuf_r+0x1c>
 80085a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	2301      	movs	r3, #1
 80085ae:	6163      	str	r3, [r4, #20]
 80085b0:	b002      	add	sp, #8
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	ab01      	add	r3, sp, #4
 80085b6:	466a      	mov	r2, sp
 80085b8:	f7ff ffca 	bl	8008550 <__swhatbuf_r>
 80085bc:	9900      	ldr	r1, [sp, #0]
 80085be:	4605      	mov	r5, r0
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff fc53 	bl	8007e6c <_malloc_r>
 80085c6:	b948      	cbnz	r0, 80085dc <__smakebuf_r+0x44>
 80085c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085cc:	059a      	lsls	r2, r3, #22
 80085ce:	d4ef      	bmi.n	80085b0 <__smakebuf_r+0x18>
 80085d0:	f023 0303 	bic.w	r3, r3, #3
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7e3      	b.n	80085a4 <__smakebuf_r+0xc>
 80085dc:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <__smakebuf_r+0x7c>)
 80085de:	62b3      	str	r3, [r6, #40]	; 0x28
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	6020      	str	r0, [r4, #0]
 80085e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	9b00      	ldr	r3, [sp, #0]
 80085ec:	6163      	str	r3, [r4, #20]
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	6120      	str	r0, [r4, #16]
 80085f2:	b15b      	cbz	r3, 800860c <__smakebuf_r+0x74>
 80085f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 fb7f 	bl	8008cfc <_isatty_r>
 80085fe:	b128      	cbz	r0, 800860c <__smakebuf_r+0x74>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	89a0      	ldrh	r0, [r4, #12]
 800860e:	4305      	orrs	r5, r0
 8008610:	81a5      	strh	r5, [r4, #12]
 8008612:	e7cd      	b.n	80085b0 <__smakebuf_r+0x18>
 8008614:	080083a9 	.word	0x080083a9

08008618 <__malloc_lock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_lock+0x8>)
 800861a:	f7ff bf97 	b.w	800854c <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	200005bc 	.word	0x200005bc

08008624 <__malloc_unlock>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__malloc_unlock+0x8>)
 8008626:	f7ff bf92 	b.w	800854e <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	200005bc 	.word	0x200005bc

08008630 <__sfputc_r>:
 8008630:	6893      	ldr	r3, [r2, #8]
 8008632:	3b01      	subs	r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	b410      	push	{r4}
 8008638:	6093      	str	r3, [r2, #8]
 800863a:	da08      	bge.n	800864e <__sfputc_r+0x1e>
 800863c:	6994      	ldr	r4, [r2, #24]
 800863e:	42a3      	cmp	r3, r4
 8008640:	db01      	blt.n	8008646 <__sfputc_r+0x16>
 8008642:	290a      	cmp	r1, #10
 8008644:	d103      	bne.n	800864e <__sfputc_r+0x1e>
 8008646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864a:	f7ff bd07 	b.w	800805c <__swbuf_r>
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	1c58      	adds	r0, r3, #1
 8008652:	6010      	str	r0, [r2, #0]
 8008654:	7019      	strb	r1, [r3, #0]
 8008656:	4608      	mov	r0, r1
 8008658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865c:	4770      	bx	lr

0800865e <__sfputs_r>:
 800865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008660:	4606      	mov	r6, r0
 8008662:	460f      	mov	r7, r1
 8008664:	4614      	mov	r4, r2
 8008666:	18d5      	adds	r5, r2, r3
 8008668:	42ac      	cmp	r4, r5
 800866a:	d101      	bne.n	8008670 <__sfputs_r+0x12>
 800866c:	2000      	movs	r0, #0
 800866e:	e007      	b.n	8008680 <__sfputs_r+0x22>
 8008670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008674:	463a      	mov	r2, r7
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ffda 	bl	8008630 <__sfputc_r>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d1f3      	bne.n	8008668 <__sfputs_r+0xa>
 8008680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008684 <_vfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	460d      	mov	r5, r1
 800868a:	b09d      	sub	sp, #116	; 0x74
 800868c:	4614      	mov	r4, r2
 800868e:	4698      	mov	r8, r3
 8008690:	4606      	mov	r6, r0
 8008692:	b118      	cbz	r0, 800869c <_vfiprintf_r+0x18>
 8008694:	6983      	ldr	r3, [r0, #24]
 8008696:	b90b      	cbnz	r3, 800869c <_vfiprintf_r+0x18>
 8008698:	f7ff feba 	bl	8008410 <__sinit>
 800869c:	4b89      	ldr	r3, [pc, #548]	; (80088c4 <_vfiprintf_r+0x240>)
 800869e:	429d      	cmp	r5, r3
 80086a0:	d11b      	bne.n	80086da <_vfiprintf_r+0x56>
 80086a2:	6875      	ldr	r5, [r6, #4]
 80086a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a6:	07d9      	lsls	r1, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_vfiprintf_r+0x32>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	059a      	lsls	r2, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_vfiprintf_r+0x32>
 80086b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b2:	f7ff ff4b 	bl	800854c <__retarget_lock_acquire_recursive>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	071b      	lsls	r3, r3, #28
 80086ba:	d501      	bpl.n	80086c0 <_vfiprintf_r+0x3c>
 80086bc:	692b      	ldr	r3, [r5, #16]
 80086be:	b9eb      	cbnz	r3, 80086fc <_vfiprintf_r+0x78>
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff fd1c 	bl	8008100 <__swsetup_r>
 80086c8:	b1c0      	cbz	r0, 80086fc <_vfiprintf_r+0x78>
 80086ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086cc:	07dc      	lsls	r4, r3, #31
 80086ce:	d50e      	bpl.n	80086ee <_vfiprintf_r+0x6a>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	b01d      	add	sp, #116	; 0x74
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086da:	4b7b      	ldr	r3, [pc, #492]	; (80088c8 <_vfiprintf_r+0x244>)
 80086dc:	429d      	cmp	r5, r3
 80086de:	d101      	bne.n	80086e4 <_vfiprintf_r+0x60>
 80086e0:	68b5      	ldr	r5, [r6, #8]
 80086e2:	e7df      	b.n	80086a4 <_vfiprintf_r+0x20>
 80086e4:	4b79      	ldr	r3, [pc, #484]	; (80088cc <_vfiprintf_r+0x248>)
 80086e6:	429d      	cmp	r5, r3
 80086e8:	bf08      	it	eq
 80086ea:	68f5      	ldreq	r5, [r6, #12]
 80086ec:	e7da      	b.n	80086a4 <_vfiprintf_r+0x20>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	0598      	lsls	r0, r3, #22
 80086f2:	d4ed      	bmi.n	80086d0 <_vfiprintf_r+0x4c>
 80086f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086f6:	f7ff ff2a 	bl	800854e <__retarget_lock_release_recursive>
 80086fa:	e7e9      	b.n	80086d0 <_vfiprintf_r+0x4c>
 80086fc:	2300      	movs	r3, #0
 80086fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008700:	2320      	movs	r3, #32
 8008702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008706:	f8cd 800c 	str.w	r8, [sp, #12]
 800870a:	2330      	movs	r3, #48	; 0x30
 800870c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088d0 <_vfiprintf_r+0x24c>
 8008710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008714:	f04f 0901 	mov.w	r9, #1
 8008718:	4623      	mov	r3, r4
 800871a:	469a      	mov	sl, r3
 800871c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008720:	b10a      	cbz	r2, 8008726 <_vfiprintf_r+0xa2>
 8008722:	2a25      	cmp	r2, #37	; 0x25
 8008724:	d1f9      	bne.n	800871a <_vfiprintf_r+0x96>
 8008726:	ebba 0b04 	subs.w	fp, sl, r4
 800872a:	d00b      	beq.n	8008744 <_vfiprintf_r+0xc0>
 800872c:	465b      	mov	r3, fp
 800872e:	4622      	mov	r2, r4
 8008730:	4629      	mov	r1, r5
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ff93 	bl	800865e <__sfputs_r>
 8008738:	3001      	adds	r0, #1
 800873a:	f000 80aa 	beq.w	8008892 <_vfiprintf_r+0x20e>
 800873e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008740:	445a      	add	r2, fp
 8008742:	9209      	str	r2, [sp, #36]	; 0x24
 8008744:	f89a 3000 	ldrb.w	r3, [sl]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 80a2 	beq.w	8008892 <_vfiprintf_r+0x20e>
 800874e:	2300      	movs	r3, #0
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008758:	f10a 0a01 	add.w	sl, sl, #1
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	9307      	str	r3, [sp, #28]
 8008760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008764:	931a      	str	r3, [sp, #104]	; 0x68
 8008766:	4654      	mov	r4, sl
 8008768:	2205      	movs	r2, #5
 800876a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876e:	4858      	ldr	r0, [pc, #352]	; (80088d0 <_vfiprintf_r+0x24c>)
 8008770:	f7f7 fd3e 	bl	80001f0 <memchr>
 8008774:	9a04      	ldr	r2, [sp, #16]
 8008776:	b9d8      	cbnz	r0, 80087b0 <_vfiprintf_r+0x12c>
 8008778:	06d1      	lsls	r1, r2, #27
 800877a:	bf44      	itt	mi
 800877c:	2320      	movmi	r3, #32
 800877e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008782:	0713      	lsls	r3, r2, #28
 8008784:	bf44      	itt	mi
 8008786:	232b      	movmi	r3, #43	; 0x2b
 8008788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800878c:	f89a 3000 	ldrb.w	r3, [sl]
 8008790:	2b2a      	cmp	r3, #42	; 0x2a
 8008792:	d015      	beq.n	80087c0 <_vfiprintf_r+0x13c>
 8008794:	9a07      	ldr	r2, [sp, #28]
 8008796:	4654      	mov	r4, sl
 8008798:	2000      	movs	r0, #0
 800879a:	f04f 0c0a 	mov.w	ip, #10
 800879e:	4621      	mov	r1, r4
 80087a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087a4:	3b30      	subs	r3, #48	; 0x30
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d94e      	bls.n	8008848 <_vfiprintf_r+0x1c4>
 80087aa:	b1b0      	cbz	r0, 80087da <_vfiprintf_r+0x156>
 80087ac:	9207      	str	r2, [sp, #28]
 80087ae:	e014      	b.n	80087da <_vfiprintf_r+0x156>
 80087b0:	eba0 0308 	sub.w	r3, r0, r8
 80087b4:	fa09 f303 	lsl.w	r3, r9, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	46a2      	mov	sl, r4
 80087be:	e7d2      	b.n	8008766 <_vfiprintf_r+0xe2>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	1d19      	adds	r1, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	9103      	str	r1, [sp, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbb      	ittet	lt
 80087cc:	425b      	neglt	r3, r3
 80087ce:	f042 0202 	orrlt.w	r2, r2, #2
 80087d2:	9307      	strge	r3, [sp, #28]
 80087d4:	9307      	strlt	r3, [sp, #28]
 80087d6:	bfb8      	it	lt
 80087d8:	9204      	strlt	r2, [sp, #16]
 80087da:	7823      	ldrb	r3, [r4, #0]
 80087dc:	2b2e      	cmp	r3, #46	; 0x2e
 80087de:	d10c      	bne.n	80087fa <_vfiprintf_r+0x176>
 80087e0:	7863      	ldrb	r3, [r4, #1]
 80087e2:	2b2a      	cmp	r3, #42	; 0x2a
 80087e4:	d135      	bne.n	8008852 <_vfiprintf_r+0x1ce>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	1d1a      	adds	r2, r3, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	9203      	str	r2, [sp, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfb8      	it	lt
 80087f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80087f6:	3402      	adds	r4, #2
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088e0 <_vfiprintf_r+0x25c>
 80087fe:	7821      	ldrb	r1, [r4, #0]
 8008800:	2203      	movs	r2, #3
 8008802:	4650      	mov	r0, sl
 8008804:	f7f7 fcf4 	bl	80001f0 <memchr>
 8008808:	b140      	cbz	r0, 800881c <_vfiprintf_r+0x198>
 800880a:	2340      	movs	r3, #64	; 0x40
 800880c:	eba0 000a 	sub.w	r0, r0, sl
 8008810:	fa03 f000 	lsl.w	r0, r3, r0
 8008814:	9b04      	ldr	r3, [sp, #16]
 8008816:	4303      	orrs	r3, r0
 8008818:	3401      	adds	r4, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008820:	482c      	ldr	r0, [pc, #176]	; (80088d4 <_vfiprintf_r+0x250>)
 8008822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008826:	2206      	movs	r2, #6
 8008828:	f7f7 fce2 	bl	80001f0 <memchr>
 800882c:	2800      	cmp	r0, #0
 800882e:	d03f      	beq.n	80088b0 <_vfiprintf_r+0x22c>
 8008830:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <_vfiprintf_r+0x254>)
 8008832:	bb1b      	cbnz	r3, 800887c <_vfiprintf_r+0x1f8>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	3307      	adds	r3, #7
 8008838:	f023 0307 	bic.w	r3, r3, #7
 800883c:	3308      	adds	r3, #8
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008842:	443b      	add	r3, r7
 8008844:	9309      	str	r3, [sp, #36]	; 0x24
 8008846:	e767      	b.n	8008718 <_vfiprintf_r+0x94>
 8008848:	fb0c 3202 	mla	r2, ip, r2, r3
 800884c:	460c      	mov	r4, r1
 800884e:	2001      	movs	r0, #1
 8008850:	e7a5      	b.n	800879e <_vfiprintf_r+0x11a>
 8008852:	2300      	movs	r3, #0
 8008854:	3401      	adds	r4, #1
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	4619      	mov	r1, r3
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	4620      	mov	r0, r4
 8008860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008864:	3a30      	subs	r2, #48	; 0x30
 8008866:	2a09      	cmp	r2, #9
 8008868:	d903      	bls.n	8008872 <_vfiprintf_r+0x1ee>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0c5      	beq.n	80087fa <_vfiprintf_r+0x176>
 800886e:	9105      	str	r1, [sp, #20]
 8008870:	e7c3      	b.n	80087fa <_vfiprintf_r+0x176>
 8008872:	fb0c 2101 	mla	r1, ip, r1, r2
 8008876:	4604      	mov	r4, r0
 8008878:	2301      	movs	r3, #1
 800887a:	e7f0      	b.n	800885e <_vfiprintf_r+0x1da>
 800887c:	ab03      	add	r3, sp, #12
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	462a      	mov	r2, r5
 8008882:	4b16      	ldr	r3, [pc, #88]	; (80088dc <_vfiprintf_r+0x258>)
 8008884:	a904      	add	r1, sp, #16
 8008886:	4630      	mov	r0, r6
 8008888:	f3af 8000 	nop.w
 800888c:	4607      	mov	r7, r0
 800888e:	1c78      	adds	r0, r7, #1
 8008890:	d1d6      	bne.n	8008840 <_vfiprintf_r+0x1bc>
 8008892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008894:	07d9      	lsls	r1, r3, #31
 8008896:	d405      	bmi.n	80088a4 <_vfiprintf_r+0x220>
 8008898:	89ab      	ldrh	r3, [r5, #12]
 800889a:	059a      	lsls	r2, r3, #22
 800889c:	d402      	bmi.n	80088a4 <_vfiprintf_r+0x220>
 800889e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a0:	f7ff fe55 	bl	800854e <__retarget_lock_release_recursive>
 80088a4:	89ab      	ldrh	r3, [r5, #12]
 80088a6:	065b      	lsls	r3, r3, #25
 80088a8:	f53f af12 	bmi.w	80086d0 <_vfiprintf_r+0x4c>
 80088ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ae:	e711      	b.n	80086d4 <_vfiprintf_r+0x50>
 80088b0:	ab03      	add	r3, sp, #12
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	462a      	mov	r2, r5
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <_vfiprintf_r+0x258>)
 80088b8:	a904      	add	r1, sp, #16
 80088ba:	4630      	mov	r0, r6
 80088bc:	f000 f880 	bl	80089c0 <_printf_i>
 80088c0:	e7e4      	b.n	800888c <_vfiprintf_r+0x208>
 80088c2:	bf00      	nop
 80088c4:	0800b4e0 	.word	0x0800b4e0
 80088c8:	0800b500 	.word	0x0800b500
 80088cc:	0800b4c0 	.word	0x0800b4c0
 80088d0:	0800b520 	.word	0x0800b520
 80088d4:	0800b52a 	.word	0x0800b52a
 80088d8:	00000000 	.word	0x00000000
 80088dc:	0800865f 	.word	0x0800865f
 80088e0:	0800b526 	.word	0x0800b526

080088e4 <_printf_common>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	4616      	mov	r6, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	688a      	ldr	r2, [r1, #8]
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	bfb8      	it	lt
 80088f8:	4613      	movlt	r3, r2
 80088fa:	6033      	str	r3, [r6, #0]
 80088fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008900:	4607      	mov	r7, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b10a      	cbz	r2, 800890a <_printf_common+0x26>
 8008906:	3301      	adds	r3, #1
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	6833      	ldrmi	r3, [r6, #0]
 8008912:	3302      	addmi	r3, #2
 8008914:	6033      	strmi	r3, [r6, #0]
 8008916:	6825      	ldr	r5, [r4, #0]
 8008918:	f015 0506 	ands.w	r5, r5, #6
 800891c:	d106      	bne.n	800892c <_printf_common+0x48>
 800891e:	f104 0a19 	add.w	sl, r4, #25
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6832      	ldr	r2, [r6, #0]
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc26      	bgt.n	800897a <_printf_common+0x96>
 800892c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008930:	1e13      	subs	r3, r2, #0
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	bf18      	it	ne
 8008936:	2301      	movne	r3, #1
 8008938:	0692      	lsls	r2, r2, #26
 800893a:	d42b      	bmi.n	8008994 <_printf_common+0xb0>
 800893c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008940:	4649      	mov	r1, r9
 8008942:	4638      	mov	r0, r7
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d01e      	beq.n	8008988 <_printf_common+0xa4>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	68e5      	ldr	r5, [r4, #12]
 800894e:	6832      	ldr	r2, [r6, #0]
 8008950:	f003 0306 	and.w	r3, r3, #6
 8008954:	2b04      	cmp	r3, #4
 8008956:	bf08      	it	eq
 8008958:	1aad      	subeq	r5, r5, r2
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	6922      	ldr	r2, [r4, #16]
 800895e:	bf0c      	ite	eq
 8008960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008964:	2500      	movne	r5, #0
 8008966:	4293      	cmp	r3, r2
 8008968:	bfc4      	itt	gt
 800896a:	1a9b      	subgt	r3, r3, r2
 800896c:	18ed      	addgt	r5, r5, r3
 800896e:	2600      	movs	r6, #0
 8008970:	341a      	adds	r4, #26
 8008972:	42b5      	cmp	r5, r6
 8008974:	d11a      	bne.n	80089ac <_printf_common+0xc8>
 8008976:	2000      	movs	r0, #0
 8008978:	e008      	b.n	800898c <_printf_common+0xa8>
 800897a:	2301      	movs	r3, #1
 800897c:	4652      	mov	r2, sl
 800897e:	4649      	mov	r1, r9
 8008980:	4638      	mov	r0, r7
 8008982:	47c0      	blx	r8
 8008984:	3001      	adds	r0, #1
 8008986:	d103      	bne.n	8008990 <_printf_common+0xac>
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	3501      	adds	r5, #1
 8008992:	e7c6      	b.n	8008922 <_printf_common+0x3e>
 8008994:	18e1      	adds	r1, r4, r3
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	2030      	movs	r0, #48	; 0x30
 800899a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800899e:	4422      	add	r2, r4
 80089a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089a8:	3302      	adds	r3, #2
 80089aa:	e7c7      	b.n	800893c <_printf_common+0x58>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4622      	mov	r2, r4
 80089b0:	4649      	mov	r1, r9
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c0      	blx	r8
 80089b6:	3001      	adds	r0, #1
 80089b8:	d0e6      	beq.n	8008988 <_printf_common+0xa4>
 80089ba:	3601      	adds	r6, #1
 80089bc:	e7d9      	b.n	8008972 <_printf_common+0x8e>
	...

080089c0 <_printf_i>:
 80089c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	4691      	mov	r9, r2
 80089c8:	7e27      	ldrb	r7, [r4, #24]
 80089ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089cc:	2f78      	cmp	r7, #120	; 0x78
 80089ce:	4680      	mov	r8, r0
 80089d0:	469a      	mov	sl, r3
 80089d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d6:	d807      	bhi.n	80089e8 <_printf_i+0x28>
 80089d8:	2f62      	cmp	r7, #98	; 0x62
 80089da:	d80a      	bhi.n	80089f2 <_printf_i+0x32>
 80089dc:	2f00      	cmp	r7, #0
 80089de:	f000 80d8 	beq.w	8008b92 <_printf_i+0x1d2>
 80089e2:	2f58      	cmp	r7, #88	; 0x58
 80089e4:	f000 80a3 	beq.w	8008b2e <_printf_i+0x16e>
 80089e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f0:	e03a      	b.n	8008a68 <_printf_i+0xa8>
 80089f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089f6:	2b15      	cmp	r3, #21
 80089f8:	d8f6      	bhi.n	80089e8 <_printf_i+0x28>
 80089fa:	a001      	add	r0, pc, #4	; (adr r0, 8008a00 <_printf_i+0x40>)
 80089fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a00:	08008a59 	.word	0x08008a59
 8008a04:	08008a6d 	.word	0x08008a6d
 8008a08:	080089e9 	.word	0x080089e9
 8008a0c:	080089e9 	.word	0x080089e9
 8008a10:	080089e9 	.word	0x080089e9
 8008a14:	080089e9 	.word	0x080089e9
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	080089e9 	.word	0x080089e9
 8008a20:	080089e9 	.word	0x080089e9
 8008a24:	080089e9 	.word	0x080089e9
 8008a28:	080089e9 	.word	0x080089e9
 8008a2c:	08008b79 	.word	0x08008b79
 8008a30:	08008a9d 	.word	0x08008a9d
 8008a34:	08008b5b 	.word	0x08008b5b
 8008a38:	080089e9 	.word	0x080089e9
 8008a3c:	080089e9 	.word	0x080089e9
 8008a40:	08008b9b 	.word	0x08008b9b
 8008a44:	080089e9 	.word	0x080089e9
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	080089e9 	.word	0x080089e9
 8008a50:	080089e9 	.word	0x080089e9
 8008a54:	08008b63 	.word	0x08008b63
 8008a58:	680b      	ldr	r3, [r1, #0]
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	600a      	str	r2, [r1, #0]
 8008a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0a3      	b.n	8008bb4 <_printf_i+0x1f4>
 8008a6c:	6825      	ldr	r5, [r4, #0]
 8008a6e:	6808      	ldr	r0, [r1, #0]
 8008a70:	062e      	lsls	r6, r5, #24
 8008a72:	f100 0304 	add.w	r3, r0, #4
 8008a76:	d50a      	bpl.n	8008a8e <_printf_i+0xce>
 8008a78:	6805      	ldr	r5, [r0, #0]
 8008a7a:	600b      	str	r3, [r1, #0]
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	da03      	bge.n	8008a88 <_printf_i+0xc8>
 8008a80:	232d      	movs	r3, #45	; 0x2d
 8008a82:	426d      	negs	r5, r5
 8008a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a88:	485e      	ldr	r0, [pc, #376]	; (8008c04 <_printf_i+0x244>)
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	e019      	b.n	8008ac2 <_printf_i+0x102>
 8008a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a92:	6805      	ldr	r5, [r0, #0]
 8008a94:	600b      	str	r3, [r1, #0]
 8008a96:	bf18      	it	ne
 8008a98:	b22d      	sxthne	r5, r5
 8008a9a:	e7ef      	b.n	8008a7c <_printf_i+0xbc>
 8008a9c:	680b      	ldr	r3, [r1, #0]
 8008a9e:	6825      	ldr	r5, [r4, #0]
 8008aa0:	1d18      	adds	r0, r3, #4
 8008aa2:	6008      	str	r0, [r1, #0]
 8008aa4:	0628      	lsls	r0, r5, #24
 8008aa6:	d501      	bpl.n	8008aac <_printf_i+0xec>
 8008aa8:	681d      	ldr	r5, [r3, #0]
 8008aaa:	e002      	b.n	8008ab2 <_printf_i+0xf2>
 8008aac:	0669      	lsls	r1, r5, #25
 8008aae:	d5fb      	bpl.n	8008aa8 <_printf_i+0xe8>
 8008ab0:	881d      	ldrh	r5, [r3, #0]
 8008ab2:	4854      	ldr	r0, [pc, #336]	; (8008c04 <_printf_i+0x244>)
 8008ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2308      	moveq	r3, #8
 8008aba:	230a      	movne	r3, #10
 8008abc:	2100      	movs	r1, #0
 8008abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ac2:	6866      	ldr	r6, [r4, #4]
 8008ac4:	60a6      	str	r6, [r4, #8]
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	bfa2      	ittt	ge
 8008aca:	6821      	ldrge	r1, [r4, #0]
 8008acc:	f021 0104 	bicge.w	r1, r1, #4
 8008ad0:	6021      	strge	r1, [r4, #0]
 8008ad2:	b90d      	cbnz	r5, 8008ad8 <_printf_i+0x118>
 8008ad4:	2e00      	cmp	r6, #0
 8008ad6:	d04d      	beq.n	8008b74 <_printf_i+0x1b4>
 8008ad8:	4616      	mov	r6, r2
 8008ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ade:	fb03 5711 	mls	r7, r3, r1, r5
 8008ae2:	5dc7      	ldrb	r7, [r0, r7]
 8008ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ae8:	462f      	mov	r7, r5
 8008aea:	42bb      	cmp	r3, r7
 8008aec:	460d      	mov	r5, r1
 8008aee:	d9f4      	bls.n	8008ada <_printf_i+0x11a>
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d10b      	bne.n	8008b0c <_printf_i+0x14c>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	07df      	lsls	r7, r3, #31
 8008af8:	d508      	bpl.n	8008b0c <_printf_i+0x14c>
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6861      	ldr	r1, [r4, #4]
 8008afe:	4299      	cmp	r1, r3
 8008b00:	bfde      	ittt	le
 8008b02:	2330      	movle	r3, #48	; 0x30
 8008b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b0c:	1b92      	subs	r2, r2, r6
 8008b0e:	6122      	str	r2, [r4, #16]
 8008b10:	f8cd a000 	str.w	sl, [sp]
 8008b14:	464b      	mov	r3, r9
 8008b16:	aa03      	add	r2, sp, #12
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f7ff fee2 	bl	80088e4 <_printf_common>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d14c      	bne.n	8008bbe <_printf_i+0x1fe>
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	b004      	add	sp, #16
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2e:	4835      	ldr	r0, [pc, #212]	; (8008c04 <_printf_i+0x244>)
 8008b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	680e      	ldr	r6, [r1, #0]
 8008b38:	061f      	lsls	r7, r3, #24
 8008b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b3e:	600e      	str	r6, [r1, #0]
 8008b40:	d514      	bpl.n	8008b6c <_printf_i+0x1ac>
 8008b42:	07d9      	lsls	r1, r3, #31
 8008b44:	bf44      	itt	mi
 8008b46:	f043 0320 	orrmi.w	r3, r3, #32
 8008b4a:	6023      	strmi	r3, [r4, #0]
 8008b4c:	b91d      	cbnz	r5, 8008b56 <_printf_i+0x196>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	f023 0320 	bic.w	r3, r3, #32
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	2310      	movs	r3, #16
 8008b58:	e7b0      	b.n	8008abc <_printf_i+0xfc>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f043 0320 	orr.w	r3, r3, #32
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	2378      	movs	r3, #120	; 0x78
 8008b64:	4828      	ldr	r0, [pc, #160]	; (8008c08 <_printf_i+0x248>)
 8008b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b6a:	e7e3      	b.n	8008b34 <_printf_i+0x174>
 8008b6c:	065e      	lsls	r6, r3, #25
 8008b6e:	bf48      	it	mi
 8008b70:	b2ad      	uxthmi	r5, r5
 8008b72:	e7e6      	b.n	8008b42 <_printf_i+0x182>
 8008b74:	4616      	mov	r6, r2
 8008b76:	e7bb      	b.n	8008af0 <_printf_i+0x130>
 8008b78:	680b      	ldr	r3, [r1, #0]
 8008b7a:	6826      	ldr	r6, [r4, #0]
 8008b7c:	6960      	ldr	r0, [r4, #20]
 8008b7e:	1d1d      	adds	r5, r3, #4
 8008b80:	600d      	str	r5, [r1, #0]
 8008b82:	0635      	lsls	r5, r6, #24
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	d501      	bpl.n	8008b8c <_printf_i+0x1cc>
 8008b88:	6018      	str	r0, [r3, #0]
 8008b8a:	e002      	b.n	8008b92 <_printf_i+0x1d2>
 8008b8c:	0671      	lsls	r1, r6, #25
 8008b8e:	d5fb      	bpl.n	8008b88 <_printf_i+0x1c8>
 8008b90:	8018      	strh	r0, [r3, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	4616      	mov	r6, r2
 8008b98:	e7ba      	b.n	8008b10 <_printf_i+0x150>
 8008b9a:	680b      	ldr	r3, [r1, #0]
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	600a      	str	r2, [r1, #0]
 8008ba0:	681e      	ldr	r6, [r3, #0]
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7f7 fb22 	bl	80001f0 <memchr>
 8008bac:	b108      	cbz	r0, 8008bb2 <_printf_i+0x1f2>
 8008bae:	1b80      	subs	r0, r0, r6
 8008bb0:	6060      	str	r0, [r4, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	6123      	str	r3, [r4, #16]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbc:	e7a8      	b.n	8008b10 <_printf_i+0x150>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	4632      	mov	r2, r6
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	47d0      	blx	sl
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d0ab      	beq.n	8008b24 <_printf_i+0x164>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	079b      	lsls	r3, r3, #30
 8008bd0:	d413      	bmi.n	8008bfa <_printf_i+0x23a>
 8008bd2:	68e0      	ldr	r0, [r4, #12]
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	4298      	cmp	r0, r3
 8008bd8:	bfb8      	it	lt
 8008bda:	4618      	movlt	r0, r3
 8008bdc:	e7a4      	b.n	8008b28 <_printf_i+0x168>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4632      	mov	r2, r6
 8008be2:	4649      	mov	r1, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	47d0      	blx	sl
 8008be8:	3001      	adds	r0, #1
 8008bea:	d09b      	beq.n	8008b24 <_printf_i+0x164>
 8008bec:	3501      	adds	r5, #1
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	9903      	ldr	r1, [sp, #12]
 8008bf2:	1a5b      	subs	r3, r3, r1
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dcf2      	bgt.n	8008bde <_printf_i+0x21e>
 8008bf8:	e7eb      	b.n	8008bd2 <_printf_i+0x212>
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	f104 0619 	add.w	r6, r4, #25
 8008c00:	e7f5      	b.n	8008bee <_printf_i+0x22e>
 8008c02:	bf00      	nop
 8008c04:	0800b531 	.word	0x0800b531
 8008c08:	0800b542 	.word	0x0800b542

08008c0c <__sread>:
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	460c      	mov	r4, r1
 8008c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c14:	f000 f894 	bl	8008d40 <_read_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	bfab      	itete	ge
 8008c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c20:	181b      	addge	r3, r3, r0
 8008c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c26:	bfac      	ite	ge
 8008c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c2a:	81a3      	strhlt	r3, [r4, #12]
 8008c2c:	bd10      	pop	{r4, pc}

08008c2e <__swrite>:
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	461f      	mov	r7, r3
 8008c34:	898b      	ldrh	r3, [r1, #12]
 8008c36:	05db      	lsls	r3, r3, #23
 8008c38:	4605      	mov	r5, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	d505      	bpl.n	8008c4c <__swrite+0x1e>
 8008c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c44:	2302      	movs	r3, #2
 8008c46:	2200      	movs	r2, #0
 8008c48:	f000 f868 	bl	8008d1c <_lseek_r>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c62:	f000 b817 	b.w	8008c94 <_write_r>

08008c66 <__sseek>:
 8008c66:	b510      	push	{r4, lr}
 8008c68:	460c      	mov	r4, r1
 8008c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6e:	f000 f855 	bl	8008d1c <_lseek_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	bf15      	itete	ne
 8008c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c82:	81a3      	strheq	r3, [r4, #12]
 8008c84:	bf18      	it	ne
 8008c86:	81a3      	strhne	r3, [r4, #12]
 8008c88:	bd10      	pop	{r4, pc}

08008c8a <__sclose>:
 8008c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8e:	f000 b813 	b.w	8008cb8 <_close_r>
	...

08008c94 <_write_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	; (8008cb4 <_write_r+0x20>)
 8008c98:	4604      	mov	r4, r0
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f7f7 fe4c 	bl	8000940 <_write>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_write_r+0x1e>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_write_r+0x1e>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200005c4 	.word	0x200005c4

08008cb8 <_close_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_close_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7fa fef1 	bl	8003aaa <_close>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_close_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_close_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	200005c4 	.word	0x200005c4

08008cd8 <_fstat_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d07      	ldr	r5, [pc, #28]	; (8008cf8 <_fstat_r+0x20>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7fa feec 	bl	8003ac2 <_fstat>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_fstat_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_fstat_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200005c4 	.word	0x200005c4

08008cfc <_isatty_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_isatty_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7fa feeb 	bl	8003ae2 <_isatty>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_isatty_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_isatty_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	200005c4 	.word	0x200005c4

08008d1c <_lseek_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d07      	ldr	r5, [pc, #28]	; (8008d3c <_lseek_r+0x20>)
 8008d20:	4604      	mov	r4, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	602a      	str	r2, [r5, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7fa fee4 	bl	8003af8 <_lseek>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_lseek_r+0x1e>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_lseek_r+0x1e>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	200005c4 	.word	0x200005c4

08008d40 <_read_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	; (8008d60 <_read_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7fa fe8e 	bl	8003a70 <_read>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_read_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_read_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200005c4 	.word	0x200005c4

08008d64 <cosf>:
 8008d64:	ee10 3a10 	vmov	r3, s0
 8008d68:	b507      	push	{r0, r1, r2, lr}
 8008d6a:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <cosf+0x78>)
 8008d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d70:	4293      	cmp	r3, r2
 8008d72:	dc04      	bgt.n	8008d7e <cosf+0x1a>
 8008d74:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008de0 <cosf+0x7c>
 8008d78:	f000 f9b2 	bl	80090e0 <__kernel_cosf>
 8008d7c:	e004      	b.n	8008d88 <cosf+0x24>
 8008d7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008d82:	db04      	blt.n	8008d8e <cosf+0x2a>
 8008d84:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008d88:	b003      	add	sp, #12
 8008d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d8e:	4668      	mov	r0, sp
 8008d90:	f000 f86a 	bl	8008e68 <__ieee754_rem_pio2f>
 8008d94:	f000 0003 	and.w	r0, r0, #3
 8008d98:	2801      	cmp	r0, #1
 8008d9a:	d007      	beq.n	8008dac <cosf+0x48>
 8008d9c:	2802      	cmp	r0, #2
 8008d9e:	d00e      	beq.n	8008dbe <cosf+0x5a>
 8008da0:	b9a0      	cbnz	r0, 8008dcc <cosf+0x68>
 8008da2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008da6:	ed9d 0a00 	vldr	s0, [sp]
 8008daa:	e7e5      	b.n	8008d78 <cosf+0x14>
 8008dac:	eddd 0a01 	vldr	s1, [sp, #4]
 8008db0:	ed9d 0a00 	vldr	s0, [sp]
 8008db4:	f000 fc7e 	bl	80096b4 <__kernel_sinf>
 8008db8:	eeb1 0a40 	vneg.f32	s0, s0
 8008dbc:	e7e4      	b.n	8008d88 <cosf+0x24>
 8008dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dc2:	ed9d 0a00 	vldr	s0, [sp]
 8008dc6:	f000 f98b 	bl	80090e0 <__kernel_cosf>
 8008dca:	e7f5      	b.n	8008db8 <cosf+0x54>
 8008dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dd0:	ed9d 0a00 	vldr	s0, [sp]
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f000 fc6d 	bl	80096b4 <__kernel_sinf>
 8008dda:	e7d5      	b.n	8008d88 <cosf+0x24>
 8008ddc:	3f490fd8 	.word	0x3f490fd8
 8008de0:	00000000 	.word	0x00000000

08008de4 <sinf>:
 8008de4:	ee10 3a10 	vmov	r3, s0
 8008de8:	b507      	push	{r0, r1, r2, lr}
 8008dea:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <sinf+0x7c>)
 8008dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008df0:	4293      	cmp	r3, r2
 8008df2:	dc05      	bgt.n	8008e00 <sinf+0x1c>
 8008df4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008e64 <sinf+0x80>
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f000 fc5b 	bl	80096b4 <__kernel_sinf>
 8008dfe:	e004      	b.n	8008e0a <sinf+0x26>
 8008e00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e04:	db04      	blt.n	8008e10 <sinf+0x2c>
 8008e06:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008e0a:	b003      	add	sp, #12
 8008e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e10:	4668      	mov	r0, sp
 8008e12:	f000 f829 	bl	8008e68 <__ieee754_rem_pio2f>
 8008e16:	f000 0003 	and.w	r0, r0, #3
 8008e1a:	2801      	cmp	r0, #1
 8008e1c:	d008      	beq.n	8008e30 <sinf+0x4c>
 8008e1e:	2802      	cmp	r0, #2
 8008e20:	d00d      	beq.n	8008e3e <sinf+0x5a>
 8008e22:	b9b0      	cbnz	r0, 8008e52 <sinf+0x6e>
 8008e24:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e28:	ed9d 0a00 	vldr	s0, [sp]
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	e7e4      	b.n	8008dfa <sinf+0x16>
 8008e30:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e34:	ed9d 0a00 	vldr	s0, [sp]
 8008e38:	f000 f952 	bl	80090e0 <__kernel_cosf>
 8008e3c:	e7e5      	b.n	8008e0a <sinf+0x26>
 8008e3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e42:	ed9d 0a00 	vldr	s0, [sp]
 8008e46:	2001      	movs	r0, #1
 8008e48:	f000 fc34 	bl	80096b4 <__kernel_sinf>
 8008e4c:	eeb1 0a40 	vneg.f32	s0, s0
 8008e50:	e7db      	b.n	8008e0a <sinf+0x26>
 8008e52:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e56:	ed9d 0a00 	vldr	s0, [sp]
 8008e5a:	f000 f941 	bl	80090e0 <__kernel_cosf>
 8008e5e:	e7f5      	b.n	8008e4c <sinf+0x68>
 8008e60:	3f490fd8 	.word	0x3f490fd8
 8008e64:	00000000 	.word	0x00000000

08008e68 <__ieee754_rem_pio2f>:
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	ee10 6a10 	vmov	r6, s0
 8008e6e:	4b8e      	ldr	r3, [pc, #568]	; (80090a8 <__ieee754_rem_pio2f+0x240>)
 8008e70:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008e74:	429d      	cmp	r5, r3
 8008e76:	b087      	sub	sp, #28
 8008e78:	eef0 7a40 	vmov.f32	s15, s0
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	dc05      	bgt.n	8008e8c <__ieee754_rem_pio2f+0x24>
 8008e80:	2300      	movs	r3, #0
 8008e82:	ed80 0a00 	vstr	s0, [r0]
 8008e86:	6043      	str	r3, [r0, #4]
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e01a      	b.n	8008ec2 <__ieee754_rem_pio2f+0x5a>
 8008e8c:	4b87      	ldr	r3, [pc, #540]	; (80090ac <__ieee754_rem_pio2f+0x244>)
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	dc46      	bgt.n	8008f20 <__ieee754_rem_pio2f+0xb8>
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80090b0 <__ieee754_rem_pio2f+0x248>
 8008e98:	4b86      	ldr	r3, [pc, #536]	; (80090b4 <__ieee754_rem_pio2f+0x24c>)
 8008e9a:	f025 050f 	bic.w	r5, r5, #15
 8008e9e:	dd1f      	ble.n	8008ee0 <__ieee754_rem_pio2f+0x78>
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008ea6:	d00e      	beq.n	8008ec6 <__ieee754_rem_pio2f+0x5e>
 8008ea8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80090b8 <__ieee754_rem_pio2f+0x250>
 8008eac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008eb0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008eb4:	ed80 0a00 	vstr	s0, [r0]
 8008eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	edc4 7a01 	vstr	s15, [r4, #4]
 8008ec2:	b007      	add	sp, #28
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80090bc <__ieee754_rem_pio2f+0x254>
 8008eca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80090c0 <__ieee754_rem_pio2f+0x258>
 8008ece:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008ed2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008ed6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008eda:	edc0 6a00 	vstr	s13, [r0]
 8008ede:	e7eb      	b.n	8008eb8 <__ieee754_rem_pio2f+0x50>
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ee6:	d00e      	beq.n	8008f06 <__ieee754_rem_pio2f+0x9e>
 8008ee8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80090b8 <__ieee754_rem_pio2f+0x250>
 8008eec:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008ef0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008ef4:	ed80 0a00 	vstr	s0, [r0]
 8008ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	edc4 7a01 	vstr	s15, [r4, #4]
 8008f04:	e7dd      	b.n	8008ec2 <__ieee754_rem_pio2f+0x5a>
 8008f06:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80090bc <__ieee754_rem_pio2f+0x254>
 8008f0a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80090c0 <__ieee754_rem_pio2f+0x258>
 8008f0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f12:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008f16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f1a:	edc0 6a00 	vstr	s13, [r0]
 8008f1e:	e7eb      	b.n	8008ef8 <__ieee754_rem_pio2f+0x90>
 8008f20:	4b68      	ldr	r3, [pc, #416]	; (80090c4 <__ieee754_rem_pio2f+0x25c>)
 8008f22:	429d      	cmp	r5, r3
 8008f24:	dc72      	bgt.n	800900c <__ieee754_rem_pio2f+0x1a4>
 8008f26:	f000 fc0d 	bl	8009744 <fabsf>
 8008f2a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80090c8 <__ieee754_rem_pio2f+0x260>
 8008f2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008f32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f3e:	ee17 0a90 	vmov	r0, s15
 8008f42:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80090b0 <__ieee754_rem_pio2f+0x248>
 8008f46:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008f4a:	281f      	cmp	r0, #31
 8008f4c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80090b8 <__ieee754_rem_pio2f+0x250>
 8008f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f54:	eeb1 6a47 	vneg.f32	s12, s14
 8008f58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008f5c:	ee16 2a90 	vmov	r2, s13
 8008f60:	dc1c      	bgt.n	8008f9c <__ieee754_rem_pio2f+0x134>
 8008f62:	495a      	ldr	r1, [pc, #360]	; (80090cc <__ieee754_rem_pio2f+0x264>)
 8008f64:	1e47      	subs	r7, r0, #1
 8008f66:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008f6a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008f6e:	428b      	cmp	r3, r1
 8008f70:	d014      	beq.n	8008f9c <__ieee754_rem_pio2f+0x134>
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	ed94 7a00 	vldr	s14, [r4]
 8008f78:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008f7c:	2e00      	cmp	r6, #0
 8008f7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f82:	ed84 0a01 	vstr	s0, [r4, #4]
 8008f86:	da9c      	bge.n	8008ec2 <__ieee754_rem_pio2f+0x5a>
 8008f88:	eeb1 7a47 	vneg.f32	s14, s14
 8008f8c:	eeb1 0a40 	vneg.f32	s0, s0
 8008f90:	ed84 7a00 	vstr	s14, [r4]
 8008f94:	ed84 0a01 	vstr	s0, [r4, #4]
 8008f98:	4240      	negs	r0, r0
 8008f9a:	e792      	b.n	8008ec2 <__ieee754_rem_pio2f+0x5a>
 8008f9c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008fa0:	15eb      	asrs	r3, r5, #23
 8008fa2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008fa6:	2d08      	cmp	r5, #8
 8008fa8:	dde3      	ble.n	8008f72 <__ieee754_rem_pio2f+0x10a>
 8008faa:	eddf 7a44 	vldr	s15, [pc, #272]	; 80090bc <__ieee754_rem_pio2f+0x254>
 8008fae:	eef0 6a40 	vmov.f32	s13, s0
 8008fb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008fb6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008fba:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008fbe:	eddf 7a40 	vldr	s15, [pc, #256]	; 80090c0 <__ieee754_rem_pio2f+0x258>
 8008fc2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8008fc6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008fca:	eef0 7a40 	vmov.f32	s15, s0
 8008fce:	ee15 2a90 	vmov	r2, s11
 8008fd2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	2b19      	cmp	r3, #25
 8008fda:	dc04      	bgt.n	8008fe6 <__ieee754_rem_pio2f+0x17e>
 8008fdc:	edc4 5a00 	vstr	s11, [r4]
 8008fe0:	eeb0 0a66 	vmov.f32	s0, s13
 8008fe4:	e7c6      	b.n	8008f74 <__ieee754_rem_pio2f+0x10c>
 8008fe6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80090d0 <__ieee754_rem_pio2f+0x268>
 8008fea:	eeb0 0a66 	vmov.f32	s0, s13
 8008fee:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008ff2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008ff6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80090d4 <__ieee754_rem_pio2f+0x26c>
 8008ffa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008ffe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009002:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009006:	ed84 7a00 	vstr	s14, [r4]
 800900a:	e7b3      	b.n	8008f74 <__ieee754_rem_pio2f+0x10c>
 800900c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009010:	db06      	blt.n	8009020 <__ieee754_rem_pio2f+0x1b8>
 8009012:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009016:	edc0 7a01 	vstr	s15, [r0, #4]
 800901a:	edc0 7a00 	vstr	s15, [r0]
 800901e:	e733      	b.n	8008e88 <__ieee754_rem_pio2f+0x20>
 8009020:	15ea      	asrs	r2, r5, #23
 8009022:	3a86      	subs	r2, #134	; 0x86
 8009024:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009030:	eddf 6a29 	vldr	s13, [pc, #164]	; 80090d8 <__ieee754_rem_pio2f+0x270>
 8009034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800903c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009044:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800904c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009050:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009054:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009058:	eef5 7a40 	vcmp.f32	s15, #0.0
 800905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009060:	edcd 7a05 	vstr	s15, [sp, #20]
 8009064:	d11e      	bne.n	80090a4 <__ieee754_rem_pio2f+0x23c>
 8009066:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800906a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906e:	bf14      	ite	ne
 8009070:	2302      	movne	r3, #2
 8009072:	2301      	moveq	r3, #1
 8009074:	4919      	ldr	r1, [pc, #100]	; (80090dc <__ieee754_rem_pio2f+0x274>)
 8009076:	9101      	str	r1, [sp, #4]
 8009078:	2102      	movs	r1, #2
 800907a:	9100      	str	r1, [sp, #0]
 800907c:	a803      	add	r0, sp, #12
 800907e:	4621      	mov	r1, r4
 8009080:	f000 f88e 	bl	80091a0 <__kernel_rem_pio2f>
 8009084:	2e00      	cmp	r6, #0
 8009086:	f6bf af1c 	bge.w	8008ec2 <__ieee754_rem_pio2f+0x5a>
 800908a:	edd4 7a00 	vldr	s15, [r4]
 800908e:	eef1 7a67 	vneg.f32	s15, s15
 8009092:	edc4 7a00 	vstr	s15, [r4]
 8009096:	edd4 7a01 	vldr	s15, [r4, #4]
 800909a:	eef1 7a67 	vneg.f32	s15, s15
 800909e:	edc4 7a01 	vstr	s15, [r4, #4]
 80090a2:	e779      	b.n	8008f98 <__ieee754_rem_pio2f+0x130>
 80090a4:	2303      	movs	r3, #3
 80090a6:	e7e5      	b.n	8009074 <__ieee754_rem_pio2f+0x20c>
 80090a8:	3f490fd8 	.word	0x3f490fd8
 80090ac:	4016cbe3 	.word	0x4016cbe3
 80090b0:	3fc90f80 	.word	0x3fc90f80
 80090b4:	3fc90fd0 	.word	0x3fc90fd0
 80090b8:	37354443 	.word	0x37354443
 80090bc:	37354400 	.word	0x37354400
 80090c0:	2e85a308 	.word	0x2e85a308
 80090c4:	43490f80 	.word	0x43490f80
 80090c8:	3f22f984 	.word	0x3f22f984
 80090cc:	0800b554 	.word	0x0800b554
 80090d0:	2e85a300 	.word	0x2e85a300
 80090d4:	248d3132 	.word	0x248d3132
 80090d8:	43800000 	.word	0x43800000
 80090dc:	0800b5d4 	.word	0x0800b5d4

080090e0 <__kernel_cosf>:
 80090e0:	ee10 3a10 	vmov	r3, s0
 80090e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80090ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80090f0:	da05      	bge.n	80090fe <__kernel_cosf+0x1e>
 80090f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80090f6:	ee17 2a90 	vmov	r2, s15
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d03d      	beq.n	800917a <__kernel_cosf+0x9a>
 80090fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009102:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009180 <__kernel_cosf+0xa0>
 8009106:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009184 <__kernel_cosf+0xa4>
 800910a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009188 <__kernel_cosf+0xa8>
 800910e:	4a1f      	ldr	r2, [pc, #124]	; (800918c <__kernel_cosf+0xac>)
 8009110:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009114:	4293      	cmp	r3, r2
 8009116:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009190 <__kernel_cosf+0xb0>
 800911a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800911e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009194 <__kernel_cosf+0xb4>
 8009122:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009126:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009198 <__kernel_cosf+0xb8>
 800912a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800912e:	eeb0 7a66 	vmov.f32	s14, s13
 8009132:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009136:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800913a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800913e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009142:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009146:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800914a:	dc04      	bgt.n	8009156 <__kernel_cosf+0x76>
 800914c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009150:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009154:	4770      	bx	lr
 8009156:	4a11      	ldr	r2, [pc, #68]	; (800919c <__kernel_cosf+0xbc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	bfda      	itte	le
 800915c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009160:	ee06 3a90 	vmovle	s13, r3
 8009164:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800916c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009174:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009178:	4770      	bx	lr
 800917a:	eeb0 0a46 	vmov.f32	s0, s12
 800917e:	4770      	bx	lr
 8009180:	ad47d74e 	.word	0xad47d74e
 8009184:	310f74f6 	.word	0x310f74f6
 8009188:	3d2aaaab 	.word	0x3d2aaaab
 800918c:	3e999999 	.word	0x3e999999
 8009190:	b493f27c 	.word	0xb493f27c
 8009194:	37d00d01 	.word	0x37d00d01
 8009198:	bab60b61 	.word	0xbab60b61
 800919c:	3f480000 	.word	0x3f480000

080091a0 <__kernel_rem_pio2f>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	ed2d 8b04 	vpush	{d8-d9}
 80091a8:	b0d7      	sub	sp, #348	; 0x15c
 80091aa:	4616      	mov	r6, r2
 80091ac:	4698      	mov	r8, r3
 80091ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80091b0:	4bbb      	ldr	r3, [pc, #748]	; (80094a0 <__kernel_rem_pio2f+0x300>)
 80091b2:	9001      	str	r0, [sp, #4]
 80091b4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80091b8:	1d33      	adds	r3, r6, #4
 80091ba:	460d      	mov	r5, r1
 80091bc:	f108 39ff 	add.w	r9, r8, #4294967295
 80091c0:	db29      	blt.n	8009216 <__kernel_rem_pio2f+0x76>
 80091c2:	1ef1      	subs	r1, r6, #3
 80091c4:	bf48      	it	mi
 80091c6:	1d31      	addmi	r1, r6, #4
 80091c8:	10c9      	asrs	r1, r1, #3
 80091ca:	1c4c      	adds	r4, r1, #1
 80091cc:	00e3      	lsls	r3, r4, #3
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80091d2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80094b0 <__kernel_rem_pio2f+0x310>
 80091d6:	eba1 0009 	sub.w	r0, r1, r9
 80091da:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80091de:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80091e2:	eb07 0c09 	add.w	ip, r7, r9
 80091e6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80091ea:	2300      	movs	r3, #0
 80091ec:	4563      	cmp	r3, ip
 80091ee:	dd14      	ble.n	800921a <__kernel_rem_pio2f+0x7a>
 80091f0:	ab1a      	add	r3, sp, #104	; 0x68
 80091f2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80091f6:	46cc      	mov	ip, r9
 80091f8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80091fc:	f1c8 0b01 	rsb	fp, r8, #1
 8009200:	eb0b 020c 	add.w	r2, fp, ip
 8009204:	4297      	cmp	r7, r2
 8009206:	db27      	blt.n	8009258 <__kernel_rem_pio2f+0xb8>
 8009208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800920c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80094b0 <__kernel_rem_pio2f+0x310>
 8009210:	4618      	mov	r0, r3
 8009212:	2200      	movs	r2, #0
 8009214:	e016      	b.n	8009244 <__kernel_rem_pio2f+0xa4>
 8009216:	2100      	movs	r1, #0
 8009218:	e7d7      	b.n	80091ca <__kernel_rem_pio2f+0x2a>
 800921a:	42d8      	cmn	r0, r3
 800921c:	bf5d      	ittte	pl
 800921e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8009222:	ee07 2a90 	vmovpl	s15, r2
 8009226:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800922a:	eef0 7a47 	vmovmi.f32	s15, s14
 800922e:	ecea 7a01 	vstmia	sl!, {s15}
 8009232:	3301      	adds	r3, #1
 8009234:	e7da      	b.n	80091ec <__kernel_rem_pio2f+0x4c>
 8009236:	ecfe 6a01 	vldmia	lr!, {s13}
 800923a:	ed90 7a00 	vldr	s14, [r0]
 800923e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009242:	3201      	adds	r2, #1
 8009244:	454a      	cmp	r2, r9
 8009246:	f1a0 0004 	sub.w	r0, r0, #4
 800924a:	ddf4      	ble.n	8009236 <__kernel_rem_pio2f+0x96>
 800924c:	ecea 7a01 	vstmia	sl!, {s15}
 8009250:	3304      	adds	r3, #4
 8009252:	f10c 0c01 	add.w	ip, ip, #1
 8009256:	e7d3      	b.n	8009200 <__kernel_rem_pio2f+0x60>
 8009258:	ab06      	add	r3, sp, #24
 800925a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009262:	eddf 8a92 	vldr	s17, [pc, #584]	; 80094ac <__kernel_rem_pio2f+0x30c>
 8009266:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80094a8 <__kernel_rem_pio2f+0x308>
 800926a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800926e:	9303      	str	r3, [sp, #12]
 8009270:	46ba      	mov	sl, r7
 8009272:	ab56      	add	r3, sp, #344	; 0x158
 8009274:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009278:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800927c:	ab06      	add	r3, sp, #24
 800927e:	4618      	mov	r0, r3
 8009280:	4652      	mov	r2, sl
 8009282:	2a00      	cmp	r2, #0
 8009284:	dc51      	bgt.n	800932a <__kernel_rem_pio2f+0x18a>
 8009286:	4620      	mov	r0, r4
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	f000 faa5 	bl	80097d8 <scalbnf>
 800928e:	eeb0 8a40 	vmov.f32	s16, s0
 8009292:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009296:	ee28 0a00 	vmul.f32	s0, s16, s0
 800929a:	f000 fa5b 	bl	8009754 <floorf>
 800929e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80092a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80092ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80092b2:	edcd 7a00 	vstr	s15, [sp]
 80092b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80092ba:	dd4b      	ble.n	8009354 <__kernel_rem_pio2f+0x1b4>
 80092bc:	f10a 3cff 	add.w	ip, sl, #4294967295
 80092c0:	aa06      	add	r2, sp, #24
 80092c2:	f1c4 0e08 	rsb	lr, r4, #8
 80092c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80092ca:	ee17 1a90 	vmov	r1, s15
 80092ce:	fa42 f00e 	asr.w	r0, r2, lr
 80092d2:	4401      	add	r1, r0
 80092d4:	9100      	str	r1, [sp, #0]
 80092d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80092da:	a906      	add	r1, sp, #24
 80092dc:	1a12      	subs	r2, r2, r0
 80092de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80092e2:	f1c4 0007 	rsb	r0, r4, #7
 80092e6:	fa42 fb00 	asr.w	fp, r2, r0
 80092ea:	f1bb 0f00 	cmp.w	fp, #0
 80092ee:	dd43      	ble.n	8009378 <__kernel_rem_pio2f+0x1d8>
 80092f0:	9a00      	ldr	r2, [sp, #0]
 80092f2:	f04f 0e00 	mov.w	lr, #0
 80092f6:	3201      	adds	r2, #1
 80092f8:	9200      	str	r2, [sp, #0]
 80092fa:	4670      	mov	r0, lr
 80092fc:	45f2      	cmp	sl, lr
 80092fe:	dc6c      	bgt.n	80093da <__kernel_rem_pio2f+0x23a>
 8009300:	2c00      	cmp	r4, #0
 8009302:	dd04      	ble.n	800930e <__kernel_rem_pio2f+0x16e>
 8009304:	2c01      	cmp	r4, #1
 8009306:	d079      	beq.n	80093fc <__kernel_rem_pio2f+0x25c>
 8009308:	2c02      	cmp	r4, #2
 800930a:	f000 8082 	beq.w	8009412 <__kernel_rem_pio2f+0x272>
 800930e:	f1bb 0f02 	cmp.w	fp, #2
 8009312:	d131      	bne.n	8009378 <__kernel_rem_pio2f+0x1d8>
 8009314:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009318:	ee30 8a48 	vsub.f32	s16, s0, s16
 800931c:	b360      	cbz	r0, 8009378 <__kernel_rem_pio2f+0x1d8>
 800931e:	4620      	mov	r0, r4
 8009320:	f000 fa5a 	bl	80097d8 <scalbnf>
 8009324:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009328:	e026      	b.n	8009378 <__kernel_rem_pio2f+0x1d8>
 800932a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800932e:	3a01      	subs	r2, #1
 8009330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009334:	a942      	add	r1, sp, #264	; 0x108
 8009336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800933a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800933e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009342:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009346:	eca0 0a01 	vstmia	r0!, {s0}
 800934a:	ed9c 0a00 	vldr	s0, [ip]
 800934e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009352:	e796      	b.n	8009282 <__kernel_rem_pio2f+0xe2>
 8009354:	d107      	bne.n	8009366 <__kernel_rem_pio2f+0x1c6>
 8009356:	f10a 32ff 	add.w	r2, sl, #4294967295
 800935a:	a906      	add	r1, sp, #24
 800935c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009360:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8009364:	e7c1      	b.n	80092ea <__kernel_rem_pio2f+0x14a>
 8009366:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800936a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009372:	da2f      	bge.n	80093d4 <__kernel_rem_pio2f+0x234>
 8009374:	f04f 0b00 	mov.w	fp, #0
 8009378:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	f040 8098 	bne.w	80094b4 <__kernel_rem_pio2f+0x314>
 8009384:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009388:	469c      	mov	ip, r3
 800938a:	2200      	movs	r2, #0
 800938c:	45bc      	cmp	ip, r7
 800938e:	da48      	bge.n	8009422 <__kernel_rem_pio2f+0x282>
 8009390:	2a00      	cmp	r2, #0
 8009392:	d05f      	beq.n	8009454 <__kernel_rem_pio2f+0x2b4>
 8009394:	aa06      	add	r2, sp, #24
 8009396:	3c08      	subs	r4, #8
 8009398:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800939c:	2900      	cmp	r1, #0
 800939e:	d07d      	beq.n	800949c <__kernel_rem_pio2f+0x2fc>
 80093a0:	4620      	mov	r0, r4
 80093a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	f000 fa16 	bl	80097d8 <scalbnf>
 80093ac:	9b01      	ldr	r3, [sp, #4]
 80093ae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80094ac <__kernel_rem_pio2f+0x30c>
 80093b2:	4619      	mov	r1, r3
 80093b4:	2900      	cmp	r1, #0
 80093b6:	f280 80af 	bge.w	8009518 <__kernel_rem_pio2f+0x378>
 80093ba:	4618      	mov	r0, r3
 80093bc:	2400      	movs	r4, #0
 80093be:	2800      	cmp	r0, #0
 80093c0:	f2c0 80d0 	blt.w	8009564 <__kernel_rem_pio2f+0x3c4>
 80093c4:	a942      	add	r1, sp, #264	; 0x108
 80093c6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80093ca:	4a36      	ldr	r2, [pc, #216]	; (80094a4 <__kernel_rem_pio2f+0x304>)
 80093cc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80094b0 <__kernel_rem_pio2f+0x310>
 80093d0:	2100      	movs	r1, #0
 80093d2:	e0bb      	b.n	800954c <__kernel_rem_pio2f+0x3ac>
 80093d4:	f04f 0b02 	mov.w	fp, #2
 80093d8:	e78a      	b.n	80092f0 <__kernel_rem_pio2f+0x150>
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	b948      	cbnz	r0, 80093f2 <__kernel_rem_pio2f+0x252>
 80093de:	b11a      	cbz	r2, 80093e8 <__kernel_rem_pio2f+0x248>
 80093e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f10e 0e01 	add.w	lr, lr, #1
 80093ec:	3304      	adds	r3, #4
 80093ee:	4610      	mov	r0, r2
 80093f0:	e784      	b.n	80092fc <__kernel_rem_pio2f+0x15c>
 80093f2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	4602      	mov	r2, r0
 80093fa:	e7f5      	b.n	80093e8 <__kernel_rem_pio2f+0x248>
 80093fc:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009400:	ab06      	add	r3, sp, #24
 8009402:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940a:	aa06      	add	r2, sp, #24
 800940c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8009410:	e77d      	b.n	800930e <__kernel_rem_pio2f+0x16e>
 8009412:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009416:	ab06      	add	r3, sp, #24
 8009418:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800941c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009420:	e7f3      	b.n	800940a <__kernel_rem_pio2f+0x26a>
 8009422:	a906      	add	r1, sp, #24
 8009424:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8009428:	f10c 3cff 	add.w	ip, ip, #4294967295
 800942c:	4302      	orrs	r2, r0
 800942e:	e7ad      	b.n	800938c <__kernel_rem_pio2f+0x1ec>
 8009430:	3001      	adds	r0, #1
 8009432:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009436:	2a00      	cmp	r2, #0
 8009438:	d0fa      	beq.n	8009430 <__kernel_rem_pio2f+0x290>
 800943a:	a91a      	add	r1, sp, #104	; 0x68
 800943c:	eb0a 0208 	add.w	r2, sl, r8
 8009440:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009444:	f10a 0301 	add.w	r3, sl, #1
 8009448:	eb0a 0100 	add.w	r1, sl, r0
 800944c:	4299      	cmp	r1, r3
 800944e:	da04      	bge.n	800945a <__kernel_rem_pio2f+0x2ba>
 8009450:	468a      	mov	sl, r1
 8009452:	e70e      	b.n	8009272 <__kernel_rem_pio2f+0xd2>
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	2001      	movs	r0, #1
 8009458:	e7eb      	b.n	8009432 <__kernel_rem_pio2f+0x292>
 800945a:	9803      	ldr	r0, [sp, #12]
 800945c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009460:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009464:	9000      	str	r0, [sp, #0]
 8009466:	ee07 0a90 	vmov	s15, r0
 800946a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946e:	2000      	movs	r0, #0
 8009470:	ece2 7a01 	vstmia	r2!, {s15}
 8009474:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80094b0 <__kernel_rem_pio2f+0x310>
 8009478:	4696      	mov	lr, r2
 800947a:	4548      	cmp	r0, r9
 800947c:	dd06      	ble.n	800948c <__kernel_rem_pio2f+0x2ec>
 800947e:	a842      	add	r0, sp, #264	; 0x108
 8009480:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009484:	edc0 7a00 	vstr	s15, [r0]
 8009488:	3301      	adds	r3, #1
 800948a:	e7df      	b.n	800944c <__kernel_rem_pio2f+0x2ac>
 800948c:	ecfc 6a01 	vldmia	ip!, {s13}
 8009490:	ed3e 7a01 	vldmdb	lr!, {s14}
 8009494:	3001      	adds	r0, #1
 8009496:	eee6 7a87 	vfma.f32	s15, s13, s14
 800949a:	e7ee      	b.n	800947a <__kernel_rem_pio2f+0x2da>
 800949c:	3b01      	subs	r3, #1
 800949e:	e779      	b.n	8009394 <__kernel_rem_pio2f+0x1f4>
 80094a0:	0800b918 	.word	0x0800b918
 80094a4:	0800b8ec 	.word	0x0800b8ec
 80094a8:	43800000 	.word	0x43800000
 80094ac:	3b800000 	.word	0x3b800000
 80094b0:	00000000 	.word	0x00000000
 80094b4:	9b02      	ldr	r3, [sp, #8]
 80094b6:	eeb0 0a48 	vmov.f32	s0, s16
 80094ba:	1b98      	subs	r0, r3, r6
 80094bc:	f000 f98c 	bl	80097d8 <scalbnf>
 80094c0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80094a8 <__kernel_rem_pio2f+0x308>
 80094c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80094c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094cc:	db1b      	blt.n	8009506 <__kernel_rem_pio2f+0x366>
 80094ce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80094ac <__kernel_rem_pio2f+0x30c>
 80094d2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80094d6:	aa06      	add	r2, sp, #24
 80094d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094dc:	a906      	add	r1, sp, #24
 80094de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094e2:	3408      	adds	r4, #8
 80094e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80094e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80094f0:	ee10 3a10 	vmov	r3, s0
 80094f4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80094f8:	ee17 2a90 	vmov	r2, s15
 80094fc:	f10a 0301 	add.w	r3, sl, #1
 8009500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009504:	e74c      	b.n	80093a0 <__kernel_rem_pio2f+0x200>
 8009506:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800950a:	aa06      	add	r2, sp, #24
 800950c:	ee10 3a10 	vmov	r3, s0
 8009510:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009514:	4653      	mov	r3, sl
 8009516:	e743      	b.n	80093a0 <__kernel_rem_pio2f+0x200>
 8009518:	aa42      	add	r2, sp, #264	; 0x108
 800951a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800951e:	aa06      	add	r2, sp, #24
 8009520:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009524:	9201      	str	r2, [sp, #4]
 8009526:	ee07 2a90 	vmov	s15, r2
 800952a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800952e:	3901      	subs	r1, #1
 8009530:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009534:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009538:	edc0 7a00 	vstr	s15, [r0]
 800953c:	e73a      	b.n	80093b4 <__kernel_rem_pio2f+0x214>
 800953e:	ecf2 6a01 	vldmia	r2!, {s13}
 8009542:	ecb6 7a01 	vldmia	r6!, {s14}
 8009546:	eee6 7a87 	vfma.f32	s15, s13, s14
 800954a:	3101      	adds	r1, #1
 800954c:	42b9      	cmp	r1, r7
 800954e:	dc01      	bgt.n	8009554 <__kernel_rem_pio2f+0x3b4>
 8009550:	428c      	cmp	r4, r1
 8009552:	daf4      	bge.n	800953e <__kernel_rem_pio2f+0x39e>
 8009554:	aa56      	add	r2, sp, #344	; 0x158
 8009556:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800955a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800955e:	3801      	subs	r0, #1
 8009560:	3401      	adds	r4, #1
 8009562:	e72c      	b.n	80093be <__kernel_rem_pio2f+0x21e>
 8009564:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009566:	2a02      	cmp	r2, #2
 8009568:	dc0a      	bgt.n	8009580 <__kernel_rem_pio2f+0x3e0>
 800956a:	2a00      	cmp	r2, #0
 800956c:	dc61      	bgt.n	8009632 <__kernel_rem_pio2f+0x492>
 800956e:	d03c      	beq.n	80095ea <__kernel_rem_pio2f+0x44a>
 8009570:	9b00      	ldr	r3, [sp, #0]
 8009572:	f003 0007 	and.w	r0, r3, #7
 8009576:	b057      	add	sp, #348	; 0x15c
 8009578:	ecbd 8b04 	vpop	{d8-d9}
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009582:	2a03      	cmp	r2, #3
 8009584:	d1f4      	bne.n	8009570 <__kernel_rem_pio2f+0x3d0>
 8009586:	aa2e      	add	r2, sp, #184	; 0xb8
 8009588:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800958c:	4608      	mov	r0, r1
 800958e:	461c      	mov	r4, r3
 8009590:	2c00      	cmp	r4, #0
 8009592:	f1a0 0004 	sub.w	r0, r0, #4
 8009596:	dc59      	bgt.n	800964c <__kernel_rem_pio2f+0x4ac>
 8009598:	4618      	mov	r0, r3
 800959a:	2801      	cmp	r0, #1
 800959c:	f1a1 0104 	sub.w	r1, r1, #4
 80095a0:	dc64      	bgt.n	800966c <__kernel_rem_pio2f+0x4cc>
 80095a2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80094b0 <__kernel_rem_pio2f+0x310>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	dc70      	bgt.n	800968c <__kernel_rem_pio2f+0x4ec>
 80095aa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80095ae:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80095b2:	f1bb 0f00 	cmp.w	fp, #0
 80095b6:	d172      	bne.n	800969e <__kernel_rem_pio2f+0x4fe>
 80095b8:	edc5 6a00 	vstr	s13, [r5]
 80095bc:	ed85 7a01 	vstr	s14, [r5, #4]
 80095c0:	edc5 7a02 	vstr	s15, [r5, #8]
 80095c4:	e7d4      	b.n	8009570 <__kernel_rem_pio2f+0x3d0>
 80095c6:	aa2e      	add	r2, sp, #184	; 0xb8
 80095c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80095cc:	ed91 7a00 	vldr	s14, [r1]
 80095d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	daf5      	bge.n	80095c6 <__kernel_rem_pio2f+0x426>
 80095da:	f1bb 0f00 	cmp.w	fp, #0
 80095de:	d001      	beq.n	80095e4 <__kernel_rem_pio2f+0x444>
 80095e0:	eef1 7a67 	vneg.f32	s15, s15
 80095e4:	edc5 7a00 	vstr	s15, [r5]
 80095e8:	e7c2      	b.n	8009570 <__kernel_rem_pio2f+0x3d0>
 80095ea:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80094b0 <__kernel_rem_pio2f+0x310>
 80095ee:	e7f2      	b.n	80095d6 <__kernel_rem_pio2f+0x436>
 80095f0:	aa2e      	add	r2, sp, #184	; 0xb8
 80095f2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80095f6:	edd0 7a00 	vldr	s15, [r0]
 80095fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095fe:	3901      	subs	r1, #1
 8009600:	2900      	cmp	r1, #0
 8009602:	daf5      	bge.n	80095f0 <__kernel_rem_pio2f+0x450>
 8009604:	f1bb 0f00 	cmp.w	fp, #0
 8009608:	d017      	beq.n	800963a <__kernel_rem_pio2f+0x49a>
 800960a:	eef1 7a47 	vneg.f32	s15, s14
 800960e:	edc5 7a00 	vstr	s15, [r5]
 8009612:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800961a:	a82f      	add	r0, sp, #188	; 0xbc
 800961c:	2101      	movs	r1, #1
 800961e:	428b      	cmp	r3, r1
 8009620:	da0e      	bge.n	8009640 <__kernel_rem_pio2f+0x4a0>
 8009622:	f1bb 0f00 	cmp.w	fp, #0
 8009626:	d001      	beq.n	800962c <__kernel_rem_pio2f+0x48c>
 8009628:	eef1 7a67 	vneg.f32	s15, s15
 800962c:	edc5 7a01 	vstr	s15, [r5, #4]
 8009630:	e79e      	b.n	8009570 <__kernel_rem_pio2f+0x3d0>
 8009632:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80094b0 <__kernel_rem_pio2f+0x310>
 8009636:	4619      	mov	r1, r3
 8009638:	e7e2      	b.n	8009600 <__kernel_rem_pio2f+0x460>
 800963a:	eef0 7a47 	vmov.f32	s15, s14
 800963e:	e7e6      	b.n	800960e <__kernel_rem_pio2f+0x46e>
 8009640:	ecb0 7a01 	vldmia	r0!, {s14}
 8009644:	3101      	adds	r1, #1
 8009646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800964a:	e7e8      	b.n	800961e <__kernel_rem_pio2f+0x47e>
 800964c:	edd0 7a00 	vldr	s15, [r0]
 8009650:	edd0 6a01 	vldr	s13, [r0, #4]
 8009654:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009658:	3c01      	subs	r4, #1
 800965a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800965e:	ed80 7a00 	vstr	s14, [r0]
 8009662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009666:	edc0 7a01 	vstr	s15, [r0, #4]
 800966a:	e791      	b.n	8009590 <__kernel_rem_pio2f+0x3f0>
 800966c:	edd1 7a00 	vldr	s15, [r1]
 8009670:	edd1 6a01 	vldr	s13, [r1, #4]
 8009674:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009678:	3801      	subs	r0, #1
 800967a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800967e:	ed81 7a00 	vstr	s14, [r1]
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	edc1 7a01 	vstr	s15, [r1, #4]
 800968a:	e786      	b.n	800959a <__kernel_rem_pio2f+0x3fa>
 800968c:	aa2e      	add	r2, sp, #184	; 0xb8
 800968e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009692:	ed91 7a00 	vldr	s14, [r1]
 8009696:	3b01      	subs	r3, #1
 8009698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800969c:	e783      	b.n	80095a6 <__kernel_rem_pio2f+0x406>
 800969e:	eef1 6a66 	vneg.f32	s13, s13
 80096a2:	eeb1 7a47 	vneg.f32	s14, s14
 80096a6:	edc5 6a00 	vstr	s13, [r5]
 80096aa:	ed85 7a01 	vstr	s14, [r5, #4]
 80096ae:	eef1 7a67 	vneg.f32	s15, s15
 80096b2:	e785      	b.n	80095c0 <__kernel_rem_pio2f+0x420>

080096b4 <__kernel_sinf>:
 80096b4:	ee10 3a10 	vmov	r3, s0
 80096b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80096c0:	da04      	bge.n	80096cc <__kernel_sinf+0x18>
 80096c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80096c6:	ee17 3a90 	vmov	r3, s15
 80096ca:	b35b      	cbz	r3, 8009724 <__kernel_sinf+0x70>
 80096cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80096d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009728 <__kernel_sinf+0x74>
 80096d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800972c <__kernel_sinf+0x78>
 80096d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80096dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009730 <__kernel_sinf+0x7c>
 80096e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80096e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009734 <__kernel_sinf+0x80>
 80096e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80096ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009738 <__kernel_sinf+0x84>
 80096f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80096f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80096f8:	b930      	cbnz	r0, 8009708 <__kernel_sinf+0x54>
 80096fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800973c <__kernel_sinf+0x88>
 80096fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009702:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009706:	4770      	bx	lr
 8009708:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800970c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009710:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009714:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009718:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009740 <__kernel_sinf+0x8c>
 800971c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009720:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	2f2ec9d3 	.word	0x2f2ec9d3
 800972c:	b2d72f34 	.word	0xb2d72f34
 8009730:	3638ef1b 	.word	0x3638ef1b
 8009734:	b9500d01 	.word	0xb9500d01
 8009738:	3c088889 	.word	0x3c088889
 800973c:	be2aaaab 	.word	0xbe2aaaab
 8009740:	3e2aaaab 	.word	0x3e2aaaab

08009744 <fabsf>:
 8009744:	ee10 3a10 	vmov	r3, s0
 8009748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800974c:	ee00 3a10 	vmov	s0, r3
 8009750:	4770      	bx	lr
	...

08009754 <floorf>:
 8009754:	ee10 3a10 	vmov	r3, s0
 8009758:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800975c:	3a7f      	subs	r2, #127	; 0x7f
 800975e:	2a16      	cmp	r2, #22
 8009760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009764:	dc2a      	bgt.n	80097bc <floorf+0x68>
 8009766:	2a00      	cmp	r2, #0
 8009768:	da11      	bge.n	800978e <floorf+0x3a>
 800976a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80097cc <floorf+0x78>
 800976e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009772:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	dd05      	ble.n	8009788 <floorf+0x34>
 800977c:	2b00      	cmp	r3, #0
 800977e:	da23      	bge.n	80097c8 <floorf+0x74>
 8009780:	4a13      	ldr	r2, [pc, #76]	; (80097d0 <floorf+0x7c>)
 8009782:	2900      	cmp	r1, #0
 8009784:	bf18      	it	ne
 8009786:	4613      	movne	r3, r2
 8009788:	ee00 3a10 	vmov	s0, r3
 800978c:	4770      	bx	lr
 800978e:	4911      	ldr	r1, [pc, #68]	; (80097d4 <floorf+0x80>)
 8009790:	4111      	asrs	r1, r2
 8009792:	420b      	tst	r3, r1
 8009794:	d0fa      	beq.n	800978c <floorf+0x38>
 8009796:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80097cc <floorf+0x78>
 800979a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800979e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	ddef      	ble.n	8009788 <floorf+0x34>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfbe      	ittt	lt
 80097ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80097b0:	fa40 f202 	asrlt.w	r2, r0, r2
 80097b4:	189b      	addlt	r3, r3, r2
 80097b6:	ea23 0301 	bic.w	r3, r3, r1
 80097ba:	e7e5      	b.n	8009788 <floorf+0x34>
 80097bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80097c0:	d3e4      	bcc.n	800978c <floorf+0x38>
 80097c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097c6:	4770      	bx	lr
 80097c8:	2300      	movs	r3, #0
 80097ca:	e7dd      	b.n	8009788 <floorf+0x34>
 80097cc:	7149f2ca 	.word	0x7149f2ca
 80097d0:	bf800000 	.word	0xbf800000
 80097d4:	007fffff 	.word	0x007fffff

080097d8 <scalbnf>:
 80097d8:	ee10 3a10 	vmov	r3, s0
 80097dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80097e0:	d025      	beq.n	800982e <scalbnf+0x56>
 80097e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80097e6:	d302      	bcc.n	80097ee <scalbnf+0x16>
 80097e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097ec:	4770      	bx	lr
 80097ee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80097f2:	d122      	bne.n	800983a <scalbnf+0x62>
 80097f4:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <scalbnf+0xc8>)
 80097f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80098a4 <scalbnf+0xcc>
 80097fa:	4298      	cmp	r0, r3
 80097fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009800:	db16      	blt.n	8009830 <scalbnf+0x58>
 8009802:	ee10 3a10 	vmov	r3, s0
 8009806:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800980a:	3a19      	subs	r2, #25
 800980c:	4402      	add	r2, r0
 800980e:	2afe      	cmp	r2, #254	; 0xfe
 8009810:	dd15      	ble.n	800983e <scalbnf+0x66>
 8009812:	ee10 3a10 	vmov	r3, s0
 8009816:	eddf 7a24 	vldr	s15, [pc, #144]	; 80098a8 <scalbnf+0xd0>
 800981a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80098ac <scalbnf+0xd4>
 800981e:	2b00      	cmp	r3, #0
 8009820:	eeb0 7a67 	vmov.f32	s14, s15
 8009824:	bfb8      	it	lt
 8009826:	eef0 7a66 	vmovlt.f32	s15, s13
 800982a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800982e:	4770      	bx	lr
 8009830:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80098b0 <scalbnf+0xd8>
 8009834:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009838:	4770      	bx	lr
 800983a:	0dd2      	lsrs	r2, r2, #23
 800983c:	e7e6      	b.n	800980c <scalbnf+0x34>
 800983e:	2a00      	cmp	r2, #0
 8009840:	dd06      	ble.n	8009850 <scalbnf+0x78>
 8009842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009846:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800984a:	ee00 3a10 	vmov	s0, r3
 800984e:	4770      	bx	lr
 8009850:	f112 0f16 	cmn.w	r2, #22
 8009854:	da1a      	bge.n	800988c <scalbnf+0xb4>
 8009856:	f24c 3350 	movw	r3, #50000	; 0xc350
 800985a:	4298      	cmp	r0, r3
 800985c:	ee10 3a10 	vmov	r3, s0
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009864:	dd0a      	ble.n	800987c <scalbnf+0xa4>
 8009866:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80098a8 <scalbnf+0xd0>
 800986a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80098ac <scalbnf+0xd4>
 800986e:	eef0 7a40 	vmov.f32	s15, s0
 8009872:	2b00      	cmp	r3, #0
 8009874:	bf18      	it	ne
 8009876:	eeb0 0a47 	vmovne.f32	s0, s14
 800987a:	e7db      	b.n	8009834 <scalbnf+0x5c>
 800987c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80098b0 <scalbnf+0xd8>
 8009880:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80098b4 <scalbnf+0xdc>
 8009884:	eef0 7a40 	vmov.f32	s15, s0
 8009888:	2b00      	cmp	r3, #0
 800988a:	e7f3      	b.n	8009874 <scalbnf+0x9c>
 800988c:	3219      	adds	r2, #25
 800988e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009892:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009896:	eddf 7a08 	vldr	s15, [pc, #32]	; 80098b8 <scalbnf+0xe0>
 800989a:	ee07 3a10 	vmov	s14, r3
 800989e:	e7c4      	b.n	800982a <scalbnf+0x52>
 80098a0:	ffff3cb0 	.word	0xffff3cb0
 80098a4:	4c000000 	.word	0x4c000000
 80098a8:	7149f2ca 	.word	0x7149f2ca
 80098ac:	f149f2ca 	.word	0xf149f2ca
 80098b0:	0da24260 	.word	0x0da24260
 80098b4:	8da24260 	.word	0x8da24260
 80098b8:	33000000 	.word	0x33000000

080098bc <_init>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	bf00      	nop
 80098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c2:	bc08      	pop	{r3}
 80098c4:	469e      	mov	lr, r3
 80098c6:	4770      	bx	lr

080098c8 <_fini>:
 80098c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ca:	bf00      	nop
 80098cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ce:	bc08      	pop	{r3}
 80098d0:	469e      	mov	lr, r3
 80098d2:	4770      	bx	lr
